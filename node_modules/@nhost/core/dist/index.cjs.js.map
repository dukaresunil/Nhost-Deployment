{"version":3,"file":"index.cjs.js","sources":["../../../node_modules/.pnpm/@simplewebauthn+browser@6.0.0/node_modules/@simplewebauthn/browser/dist/bundle/index.js","../src/constants.ts","../src/errors.ts","../src/hasura-auth.ts","../src/storage.ts","../src/utils.ts","../src/validators.ts","../src/machines/context.ts","../src/machines/change-email.ts","../src/machines/change-password.ts","../src/machines/enable-mfa.ts","../src/machines/reset-password.ts","../src/machines/send-verification-email.ts","../src/machines/index.ts","../src/client.ts","../src/cookie-client.ts","../src/promises/addSecurityKey.ts","../src/promises/changeEmail.ts","../src/promises/changePassword.ts","../src/promises/mfa.ts","../src/promises/resetPassword.ts","../src/promises/sendVerificationEmail.ts","../src/promises/signInAnonymous.ts","../src/promises/signInEmailPassword.ts","../src/promises/signInEmailPasswordless.ts","../src/promises/signInEmailSecurityKey.ts","../src/promises/signInMfaTotp.ts","../src/promises/signInSmsPasswordless.ts","../src/promises/signInSmsPasswordlessOtp.ts","../src/promises/signOut.ts","../src/promises/signUpEmailPassword.ts","../src/promises/signUpEmailSecurityKey.ts"],"sourcesContent":["/* [@simplewebauthn/browser@6.0.0] */\nfunction utf8StringToBuffer(value) {\n    return new TextEncoder().encode(value);\n}\n\nfunction bufferToBase64URLString(buffer) {\n    const bytes = new Uint8Array(buffer);\n    let str = '';\n    for (const charCode of bytes) {\n        str += String.fromCharCode(charCode);\n    }\n    const base64String = btoa(str);\n    return base64String.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\n\nfunction base64URLStringToBuffer(base64URLString) {\n    const base64 = base64URLString.replace(/-/g, '+').replace(/_/g, '/');\n    const padLength = (4 - (base64.length % 4)) % 4;\n    const padded = base64.padEnd(base64.length + padLength, '=');\n    const binary = atob(padded);\n    const buffer = new ArrayBuffer(binary.length);\n    const bytes = new Uint8Array(buffer);\n    for (let i = 0; i < binary.length; i++) {\n        bytes[i] = binary.charCodeAt(i);\n    }\n    return buffer;\n}\n\nfunction browserSupportsWebAuthn() {\n    return ((window === null || window === void 0 ? void 0 : window.PublicKeyCredential) !== undefined && typeof window.PublicKeyCredential === 'function');\n}\n\nfunction toPublicKeyCredentialDescriptor(descriptor) {\n    const { id } = descriptor;\n    return {\n        ...descriptor,\n        id: base64URLStringToBuffer(id),\n        transports: descriptor.transports,\n    };\n}\n\nfunction isValidDomain(hostname) {\n    return (hostname === 'localhost' || /^([a-z0-9]+(-[a-z0-9]+)*\\.)+[a-z]{2,}$/i.test(hostname));\n}\n\nclass WebAuthnError extends Error {\n    constructor(message, name = 'WebAuthnError') {\n        super(message);\n        this.name = name;\n    }\n}\n\nfunction identifyRegistrationError({ error, options, }) {\n    var _a, _b;\n    const { publicKey } = options;\n    if (!publicKey) {\n        throw Error('options was missing required publicKey property');\n    }\n    if (error.name === 'AbortError') {\n        if (options.signal === new AbortController().signal) {\n            return new WebAuthnError('Registration ceremony was sent an abort signal', 'AbortError');\n        }\n    }\n    else if (error.name === 'ConstraintError') {\n        if (((_a = publicKey.authenticatorSelection) === null || _a === void 0 ? void 0 : _a.requireResidentKey) === true) {\n            return new WebAuthnError('Discoverable credentials were required but no available authenticator supported it', 'ConstraintError');\n        }\n        else if (((_b = publicKey.authenticatorSelection) === null || _b === void 0 ? void 0 : _b.userVerification) === 'required') {\n            return new WebAuthnError('User verification was required but no available authenticator supported it', 'ConstraintError');\n        }\n    }\n    else if (error.name === 'InvalidStateError') {\n        return new WebAuthnError('The authenticator was previously registered', 'InvalidStateError');\n    }\n    else if (error.name === 'NotAllowedError') {\n        return new WebAuthnError('User clicked cancel, or the registration ceremony timed out', 'NotAllowedError');\n    }\n    else if (error.name === 'NotSupportedError') {\n        const validPubKeyCredParams = publicKey.pubKeyCredParams.filter(param => param.type === 'public-key');\n        if (validPubKeyCredParams.length === 0) {\n            return new WebAuthnError('No entry in pubKeyCredParams was of type \"public-key\"', 'NotSupportedError');\n        }\n        return new WebAuthnError('No available authenticator supported any of the specified pubKeyCredParams algorithms', 'NotSupportedError');\n    }\n    else if (error.name === 'SecurityError') {\n        const effectiveDomain = window.location.hostname;\n        if (!isValidDomain(effectiveDomain)) {\n            return new WebAuthnError(`${window.location.hostname} is an invalid domain`, 'SecurityError');\n        }\n        else if (publicKey.rp.id !== effectiveDomain) {\n            return new WebAuthnError(`The RP ID \"${publicKey.rp.id}\" is invalid for this domain`, 'SecurityError');\n        }\n    }\n    else if (error.name === 'TypeError') {\n        if (publicKey.user.id.byteLength < 1 || publicKey.user.id.byteLength > 64) {\n            return new WebAuthnError('User ID was not between 1 and 64 characters', 'TypeError');\n        }\n    }\n    else if (error.name === 'UnknownError') {\n        return new WebAuthnError('The authenticator was unable to process the specified options, or could not create a new credential', 'UnknownError');\n    }\n    return error;\n}\n\nclass WebAuthnAbortService {\n    createNewAbortSignal() {\n        if (this.controller) {\n            this.controller.abort();\n        }\n        this.controller = new AbortController();\n        return this.controller.signal;\n    }\n    reset() {\n        this.controller = undefined;\n    }\n}\nconst webauthnAbortService = new WebAuthnAbortService();\n\nasync function startRegistration(creationOptionsJSON) {\n    if (!browserSupportsWebAuthn()) {\n        throw new Error('WebAuthn is not supported in this browser');\n    }\n    const publicKey = {\n        ...creationOptionsJSON,\n        challenge: base64URLStringToBuffer(creationOptionsJSON.challenge),\n        user: {\n            ...creationOptionsJSON.user,\n            id: utf8StringToBuffer(creationOptionsJSON.user.id),\n        },\n        excludeCredentials: creationOptionsJSON.excludeCredentials.map(toPublicKeyCredentialDescriptor),\n    };\n    const options = { publicKey };\n    options.signal = webauthnAbortService.createNewAbortSignal();\n    let credential;\n    try {\n        credential = (await navigator.credentials.create(options));\n    }\n    catch (err) {\n        throw identifyRegistrationError({ error: err, options });\n    }\n    finally {\n        webauthnAbortService.reset();\n    }\n    if (!credential) {\n        throw new Error('Registration was not completed');\n    }\n    const { id, rawId, response, type } = credential;\n    const credentialJSON = {\n        id,\n        rawId: bufferToBase64URLString(rawId),\n        response: {\n            attestationObject: bufferToBase64URLString(response.attestationObject),\n            clientDataJSON: bufferToBase64URLString(response.clientDataJSON),\n        },\n        type,\n        clientExtensionResults: credential.getClientExtensionResults(),\n        authenticatorAttachment: credential.authenticatorAttachment,\n    };\n    if (typeof response.getTransports === 'function') {\n        credentialJSON.transports = response.getTransports();\n    }\n    return credentialJSON;\n}\n\nfunction bufferToUTF8String(value) {\n    return new TextDecoder('utf-8').decode(value);\n}\n\nasync function browserSupportsWebAuthnAutofill() {\n    if (navigator.credentials.conditionalMediationSupported) {\n        return true;\n    }\n    const globalPublicKeyCredential = window.PublicKeyCredential;\n    return (globalPublicKeyCredential.isConditionalMediationAvailable !== undefined &&\n        globalPublicKeyCredential.isConditionalMediationAvailable());\n}\n\nfunction identifyAuthenticationError({ error, options, }) {\n    var _a;\n    const { publicKey } = options;\n    if (!publicKey) {\n        throw Error('options was missing required publicKey property');\n    }\n    if (error.name === 'AbortError') {\n        if (options.signal === new AbortController().signal) {\n            return new WebAuthnError('Authentication ceremony was sent an abort signal', 'AbortError');\n        }\n    }\n    else if (error.name === 'NotAllowedError') {\n        if ((_a = publicKey.allowCredentials) === null || _a === void 0 ? void 0 : _a.length) {\n            return new WebAuthnError('No available authenticator recognized any of the allowed credentials', 'NotAllowedError');\n        }\n        return new WebAuthnError('User clicked cancel, or the authentication ceremony timed out', 'NotAllowedError');\n    }\n    else if (error.name === 'SecurityError') {\n        const effectiveDomain = window.location.hostname;\n        if (!isValidDomain(effectiveDomain)) {\n            return new WebAuthnError(`${window.location.hostname} is an invalid domain`, 'SecurityError');\n        }\n        else if (publicKey.rpId !== effectiveDomain) {\n            return new WebAuthnError(`The RP ID \"${publicKey.rpId}\" is invalid for this domain`, 'SecurityError');\n        }\n    }\n    else if (error.name === 'UnknownError') {\n        return new WebAuthnError('The authenticator was unable to process the specified options, or could not create a new assertion signature', 'UnknownError');\n    }\n    return error;\n}\n\nasync function startAuthentication(requestOptionsJSON, useBrowserAutofill = false) {\n    var _a, _b;\n    if (!browserSupportsWebAuthn()) {\n        throw new Error('WebAuthn is not supported in this browser');\n    }\n    let allowCredentials;\n    if (((_a = requestOptionsJSON.allowCredentials) === null || _a === void 0 ? void 0 : _a.length) !== 0) {\n        allowCredentials = (_b = requestOptionsJSON.allowCredentials) === null || _b === void 0 ? void 0 : _b.map(toPublicKeyCredentialDescriptor);\n    }\n    const publicKey = {\n        ...requestOptionsJSON,\n        challenge: base64URLStringToBuffer(requestOptionsJSON.challenge),\n        allowCredentials,\n    };\n    const options = {};\n    if (useBrowserAutofill) {\n        if (!(await browserSupportsWebAuthnAutofill())) {\n            throw Error('Browser does not support WebAuthn autofill');\n        }\n        const eligibleInputs = document.querySelectorAll(\"input[autocomplete*='webauthn']\");\n        if (eligibleInputs.length < 1) {\n            throw Error('No <input> with `\"webauthn\"` in its `autocomplete` attribute was detected');\n        }\n        options.mediation = 'conditional';\n        publicKey.allowCredentials = [];\n    }\n    options.publicKey = publicKey;\n    options.signal = webauthnAbortService.createNewAbortSignal();\n    let credential;\n    try {\n        credential = (await navigator.credentials.get(options));\n    }\n    catch (err) {\n        throw identifyAuthenticationError({ error: err, options });\n    }\n    finally {\n        webauthnAbortService.reset();\n    }\n    if (!credential) {\n        throw new Error('Authentication was not completed');\n    }\n    const { id, rawId, response, type } = credential;\n    let userHandle = undefined;\n    if (response.userHandle) {\n        userHandle = bufferToUTF8String(response.userHandle);\n    }\n    return {\n        id,\n        rawId: bufferToBase64URLString(rawId),\n        response: {\n            authenticatorData: bufferToBase64URLString(response.authenticatorData),\n            clientDataJSON: bufferToBase64URLString(response.clientDataJSON),\n            signature: bufferToBase64URLString(response.signature),\n            userHandle,\n        },\n        type,\n        clientExtensionResults: credential.getClientExtensionResults(),\n        authenticatorAttachment: credential.authenticatorAttachment,\n    };\n}\n\nasync function platformAuthenticatorIsAvailable() {\n    if (!browserSupportsWebAuthn()) {\n        return false;\n    }\n    return PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();\n}\n\nexport { browserSupportsWebAuthn, browserSupportsWebAuthnAutofill, platformAuthenticatorIsAvailable, startAuthentication, startRegistration };\n","export const NHOST_REFRESH_TOKEN_KEY = 'nhostRefreshToken'\nexport const NHOST_JWT_EXPIRES_AT_KEY = 'nhostRefreshTokenExpiresAt'\n\nexport const MIN_PASSWORD_LENGTH = 3\n\n/**\n * Minimum time in seconds between now and the JWT expiration time before the JWT is refreshed\n * For instance, if set to 60, the client will refresh the JWT one minute before it expires\n */\nexport const TOKEN_REFRESH_MARGIN = 300 // five minutes\n\n/** Number of seconds before retrying a token refresh after an error */\nexport const REFRESH_TOKEN_RETRY_INTERVAL = 5\n\n// TODO not yet implemented\n// TODO try when offline for a long time: maybe we could keep state as 'signedIn'\n/** Maximum number of attempts to refresh a token before stopping the timer and logging out */\nexport const REFRESH_TOKEN_RETRY_MAX_ATTEMPTS = 30\n","export const NETWORK_ERROR_CODE = 0\nexport const OTHER_ERROR_CODE = 1\nexport const VALIDATION_ERROR_CODE = 10\nexport const STATE_ERROR_CODE = 20\n\nexport type ErrorPayload = {\n  error: string\n  status: number\n  message: string\n}\n\n/**\n * @internal\n * Adds a standard error payload to any JS Error, or convert a standard error payload into a JS Error.\n * Allows xstate to use `throw` instead of `Promise.reject` to propagate errors.\n * See https://github.com/statelyai/xstate/issues/3037\n */\nexport class CodifiedError extends Error {\n  error: ErrorPayload\n  constructor(original: Error | ErrorPayload) {\n    super(original.message)\n    Error.captureStackTrace(this, this.constructor)\n    if (original instanceof Error) {\n      this.name = original.name\n      this.error = {\n        error: original.name,\n        status: OTHER_ERROR_CODE,\n        message: original.message\n      }\n    } else {\n      this.name = original.error\n      this.error = original\n    }\n  }\n}\n\nexport type ValidationErrorPayload = ErrorPayload & { status: typeof VALIDATION_ERROR_CODE }\n\n// TODO share with hasura-auth\nexport const INVALID_EMAIL_ERROR: ValidationErrorPayload = {\n  status: VALIDATION_ERROR_CODE,\n  error: 'invalid-email',\n  message: 'Email is incorrectly formatted'\n}\n\nexport const INVALID_MFA_TYPE_ERROR: ValidationErrorPayload = {\n  status: VALIDATION_ERROR_CODE,\n  error: 'invalid-mfa-type',\n  message: 'MFA type is invalid'\n}\n\nexport const INVALID_MFA_CODE_ERROR: ValidationErrorPayload = {\n  status: VALIDATION_ERROR_CODE,\n  error: 'invalid-mfa-code',\n  message: 'MFA code is invalid'\n}\n\nexport const INVALID_PASSWORD_ERROR: ValidationErrorPayload = {\n  status: VALIDATION_ERROR_CODE,\n  error: 'invalid-password',\n  message: 'Password is incorrectly formatted'\n}\n\nexport const INVALID_PHONE_NUMBER_ERROR: ValidationErrorPayload = {\n  status: VALIDATION_ERROR_CODE,\n  error: 'invalid-phone-number',\n  message: 'Phone number is incorrectly formatted'\n}\n\nexport const INVALID_MFA_TICKET_ERROR: ValidationErrorPayload = {\n  status: VALIDATION_ERROR_CODE,\n  error: 'invalid-mfa-ticket',\n  message: 'MFA ticket is invalid'\n}\n\nexport const NO_MFA_TICKET_ERROR: ValidationErrorPayload = {\n  status: VALIDATION_ERROR_CODE,\n  error: 'no-mfa-ticket',\n  message: 'No MFA ticket has been provided'\n}\n\nexport const NO_REFRESH_TOKEN: ValidationErrorPayload = {\n  status: VALIDATION_ERROR_CODE,\n  error: 'no-refresh-token',\n  message: 'No refresh token has been provided'\n}\n\nexport const TOKEN_REFRESHER_RUNNING_ERROR: ErrorPayload = {\n  status: STATE_ERROR_CODE,\n  error: 'refresher-already-running',\n  message:\n    'The token refresher is already running. You must wait until is has finished before submitting a new token.'\n}\n\nexport const USER_ALREADY_SIGNED_IN: ErrorPayload = {\n  status: STATE_ERROR_CODE,\n  error: 'already-signed-in',\n  message: 'User is already signed in'\n}\n\nexport const USER_UNAUTHENTICATED: ErrorPayload = {\n  status: STATE_ERROR_CODE,\n  error: 'unauthenticated-user',\n  message: 'User is not authenticated'\n}\n\nexport const USER_NOT_ANONYMOUS: ErrorPayload = {\n  status: STATE_ERROR_CODE,\n  error: 'user-not-anonymous',\n  message: 'User is not anonymous'\n}\n\nexport const EMAIL_NEEDS_VERIFICATION: ErrorPayload = {\n  status: STATE_ERROR_CODE,\n  error: 'unverified-user',\n  message: 'Email needs verification'\n}\n\nexport const INVALID_REFRESH_TOKEN = {\n  status: VALIDATION_ERROR_CODE,\n  error: 'invalid-refresh-token',\n  message: 'Invalid or expired refresh token'\n}\n\nexport const INVALID_SIGN_IN_METHOD = {\n  status: OTHER_ERROR_CODE,\n  error: 'invalid-sign-in-method',\n  message: 'Invalid sign-in method'\n}\n","import axios, { AxiosError } from 'axios'\n\nimport { ErrorPayload, NETWORK_ERROR_CODE } from './errors'\n\nexport const nhostApiClient = (backendUrl: string) => {\n  const client = axios.create({ baseURL: backendUrl })\n\n  client.interceptors.response.use(\n    (response) => response,\n    (error: AxiosError<{ message: string; error?: string; statusCode?: number }>) =>\n      Promise.reject<{ error: ErrorPayload }>({\n        error: {\n          message:\n            error.response?.data?.message ??\n            error.message ??\n            error.request.responseText ??\n            JSON.stringify(error),\n          status: error.response?.status ?? error.response?.data.statusCode ?? NETWORK_ERROR_CODE,\n          error: error.response?.data?.error || error.request.statusText || 'network'\n        }\n      })\n  )\n  return client\n}\n","import Cookies from 'js-cookie'\n\nimport { ClientStorage, ClientStorageType } from './types'\nexport type StorageGetter = (key: string) => string | null | Promise<string | null>\nexport type StorageSetter = (key: string, value: string | null) => void | Promise<void>\n\nconst isBrowser = typeof window !== 'undefined'\n\nconst inMemoryLocalStorage: Map<string, string | null> = new Map()\n\nconst defaultClientStorageGetter: StorageGetter = (key) => {\n  if (isBrowser && typeof localStorage !== 'undefined') return localStorage.getItem(key)\n  else return inMemoryLocalStorage.get(key) ?? null\n}\n\nconst defaultClientStorageSetter: StorageSetter = (key, value) => {\n  if (isBrowser && typeof localStorage !== 'undefined') {\n    if (value) {\n      localStorage.setItem(key, value)\n    } else {\n      localStorage.removeItem(key)\n    }\n  } else {\n    if (value) {\n      inMemoryLocalStorage.set(key, value)\n    } else if (inMemoryLocalStorage.has(key)) {\n      inMemoryLocalStorage.delete(key)\n    }\n  }\n}\n\nexport const localStorageGetter = (\n  clientStorageType: ClientStorageType,\n  clientStorage?: ClientStorage\n): StorageGetter => {\n  if (clientStorageType === 'localStorage' || clientStorageType === 'web') {\n    return defaultClientStorageGetter\n  }\n  if (clientStorageType === 'cookie') {\n    return (key) => {\n      if (isBrowser) {\n        return Cookies.get(key) ?? null\n      } else {\n        return null\n      }\n    }\n  }\n  if (!clientStorage) {\n    throw Error(\n      `clientStorageType is set to '${clientStorageType}' but no clientStorage has been given`\n    )\n  }\n  if (clientStorageType === 'react-native') {\n    return (key) => clientStorage.getItem?.(key)\n  }\n  if (clientStorageType === 'capacitor') {\n    return (key) => clientStorage.get?.({ key })\n  }\n  if (clientStorageType === 'expo-secure-storage') {\n    return (key) => clientStorage.getItemAsync?.(key)\n  }\n  if (clientStorageType === 'custom') {\n    if (clientStorage.getItem && clientStorage.removeItem) {\n      return clientStorage.getItem\n    }\n    if (clientStorage.getItemAsync) {\n      return clientStorage.getItemAsync\n    }\n    throw Error(\n      `clientStorageType is set to 'custom' but clientStorage is missing either \"getItem\" and \"removeItem\" properties or \"getItemAsync\" property`\n    )\n  }\n  throw Error(`Unknown storage type: ${clientStorageType}`)\n}\n\nexport const localStorageSetter = (\n  clientStorageType: ClientStorageType,\n  clientStorage?: ClientStorage\n): StorageSetter => {\n  if (clientStorageType === 'localStorage' || clientStorageType === 'web') {\n    return defaultClientStorageSetter\n  }\n  if (clientStorageType === 'cookie') {\n    return (key, value) => {\n      if (isBrowser) {\n        if (value) {\n          // TODO: Set expires based on the actual refresh token expire time\n          // For now, we're using 30 days so the cookie is not removed when the browser is closed because if `expiers` is omitted, the cookie becomes a session cookie.\n          Cookies.set(key, value, { expires: 30 })\n        } else {\n          Cookies.remove(key)\n        }\n      }\n    }\n  }\n  if (!clientStorage) {\n    throw Error(\n      `clientStorageType is set to '${clientStorageType}' but no clienStorage has been given`\n    )\n  }\n  if (clientStorageType === 'react-native') {\n    return (key, value) =>\n      value ? clientStorage.setItem?.(key, value) : clientStorage.removeItem?.(key)\n  }\n  if (clientStorageType === 'capacitor') {\n    return (key, value) =>\n      value ? clientStorage.set?.({ key, value }) : clientStorage.remove?.({ key })\n  }\n  if (clientStorageType === 'expo-secure-storage') {\n    return async (key, value) =>\n      value ? clientStorage.setItemAsync?.(key, value) : clientStorage.deleteItemAsync?.(key)\n  }\n  if (clientStorageType === 'custom') {\n    if (!clientStorage.removeItem) {\n      throw Error(\n        `clientStorageType is set to 'custom' but clientStorage is missing a removeItem property`\n      )\n    }\n    if (clientStorage.setItem) {\n      return (key, value) =>\n        value ? clientStorage.setItem?.(key, value) : clientStorage.removeItem?.(key)\n    }\n    if (clientStorage.setItemAsync) {\n      return async (key, value) =>\n        value ? clientStorage.setItemAsync?.(key, value) : clientStorage.removeItem?.(key)\n    }\n    throw Error(\n      `clientStorageType is set to 'custom' but clientStorage is missing setItem or setItemAsync property`\n    )\n  }\n  throw Error(`Unknown storage type: ${clientStorageType}`)\n}\n","import { RedirectOption } from './types'\n\nexport const encodeQueryParameters = (baseUrl: string, parameters?: Record<string, unknown>) => {\n  const encodedParameters =\n    parameters &&\n    Object.entries(parameters)\n      .map(([key, value]) => {\n        const stringValue = Array.isArray(value)\n          ? value.join(',')\n          : typeof value === 'object'\n          ? JSON.stringify(value)\n          : (value as string)\n        return `${key}=${encodeURIComponent(stringValue)}`\n      })\n      .join('&')\n  if (encodedParameters) return `${baseUrl}?${encodedParameters}`\n  else return baseUrl\n}\n\n/**\n * Transform options that include a redirectTo property so the\n * redirect url is absolute, given a base clientUrl.\n * If no client url is given, any relative redirectUrl is removed while\n * the other options are sent as-is.\n * @param clientUrl base client url\n * @param options\n * @returns\n */\nexport const rewriteRedirectTo = <T extends RedirectOption>(\n  clientUrl?: string,\n  options?: T\n): (Omit<T, 'redirectTo'> & { redirectTo?: string }) | undefined => {\n  if (!options?.redirectTo) {\n    return options\n  }\n  const { redirectTo, ...otherOptions } = options\n  // * If the clientUrl is not defined, we can't rewrite the redirectTo\n  if (!clientUrl) {\n    // * If redirectTo is a relative path, we therefore pull it out of the options\n    if (redirectTo.startsWith('/')) {\n      return otherOptions\n    } else {\n      return options\n    }\n  }\n  const baseClientUrl = new URL(clientUrl)\n  const clientParams = Object.fromEntries(new URLSearchParams(baseClientUrl.search))\n  const url = new URL(redirectTo.startsWith('/') ? baseClientUrl.origin + redirectTo : redirectTo)\n  const additionalParams = new URLSearchParams(url.search)\n  let combinedParams = Object.fromEntries(additionalParams)\n\n  if (redirectTo.startsWith('/')) {\n    combinedParams = { ...clientParams, ...combinedParams }\n  }\n  let pathName = baseClientUrl.pathname\n  if (url.pathname.length > 1) {\n    pathName += url.pathname.slice(1)\n  }\n  return {\n    ...otherOptions,\n    redirectTo: encodeQueryParameters(url.origin + pathName, combinedParams)\n  }\n}\n\nexport function getParameterByName(name: string, url?: string) {\n  if (!url) {\n    if (typeof window === 'undefined') {\n      return\n    }\n    url = window.location?.href || ''\n  }\n  // eslint-disable-next-line no-useless-escape\n  name = name.replace(/[\\[\\]]/g, '\\\\$&')\n  const regex = new RegExp('[?&#]' + name + '(=([^&#]*)|&|#|$)'),\n    results = regex.exec(url)\n  if (!results) return null\n  if (!results[2]) return ''\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '))\n}\n\nexport function removeParameterFromWindow(name: string) {\n  if (typeof window === 'undefined') {\n    return\n  }\n  const location = window?.location\n  if (!location) {\n    return\n  }\n  if (location) {\n    const search = new URLSearchParams(location.search)\n    const hash = new URLSearchParams(location.hash?.slice(1))\n    search.delete(name)\n    hash.delete(name)\n    let url = window.location.pathname\n    if (Array.from(search).length) url += `?${search.toString()}`\n    if (Array.from(hash).length) url += `#${hash.toString()}`\n    window.history.pushState({}, '', url)\n  }\n}\n","import { MIN_PASSWORD_LENGTH } from './constants'\n\nexport const isValidEmail = (email?: string | null) =>\n  !!email &&\n  typeof email === 'string' &&\n  !!String(email)\n    .toLowerCase()\n    .match(\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n    )\n\nexport const isValidPassword = (password?: string | null) =>\n  !!password && typeof password === 'string' && password.length >= MIN_PASSWORD_LENGTH\n\n// TODO improve validation\nexport const isValidPhoneNumber = (phoneNumber?: string | null) =>\n  !!phoneNumber && typeof phoneNumber === 'string'\n\nexport const isValidTicket = (ticket?: string | null) =>\n  ticket &&\n  typeof ticket === 'string' &&\n  ticket.match(/^mfaTotp:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i)\n","import type { ErrorPayload } from '../errors'\nimport { User } from '../types'\n\nexport type StateErrorTypes = 'registration' | 'authentication' | 'signout'\n\nexport type AuthContext = {\n  user: User | null\n  mfa: {\n    ticket: string\n  } | null\n  accessToken: {\n    value: string | null\n    expiresAt: Date | null\n  }\n  refreshTimer: {\n    startedAt: Date | null\n    attempts: number\n    lastAttempt: Date | null\n  }\n  refreshToken: {\n    value: string | null\n  }\n  /** Number of times the user tried to get an access token from a refresh token but got a network error */\n  importTokenAttempts: number\n  errors: Partial<Record<StateErrorTypes, ErrorPayload>>\n}\n\nexport const INITIAL_MACHINE_CONTEXT: AuthContext = {\n  user: null,\n  mfa: null,\n  accessToken: {\n    value: null,\n    expiresAt: null\n  },\n  refreshTimer: {\n    startedAt: null,\n    attempts: 0,\n    lastAttempt: null\n  },\n  refreshToken: {\n    value: null\n  },\n  importTokenAttempts: 0,\n  errors: {}\n}\n","import { assign, createMachine, send } from 'xstate'\n\nimport { AuthClient } from '../client'\nimport { ErrorPayload, INVALID_EMAIL_ERROR } from '../errors'\nimport { nhostApiClient } from '../hasura-auth'\nimport { ChangeEmailOptions, ChangeEmailResponse } from '../types'\nimport { rewriteRedirectTo } from '../utils'\nimport { isValidEmail } from '../validators'\n\nexport type ChangeEmailContext = {\n  error: ErrorPayload | null\n}\n\nexport type ChangeEmailEvents =\n  | {\n      type: 'REQUEST'\n      email?: string\n      options?: ChangeEmailOptions\n    }\n  | { type: 'SUCCESS' }\n  | { type: 'ERROR'; error: ErrorPayload | null }\n\nexport type ChangeEmailServices = {\n  request: { data: ChangeEmailResponse }\n}\n\nexport type ChangeEmailMachine = ReturnType<typeof createChangeEmailMachine>\n\nexport const createChangeEmailMachine = ({ backendUrl, clientUrl, interpreter }: AuthClient) => {\n  const api = nhostApiClient(backendUrl)\n  return createMachine(\n    {\n      schema: {\n        context: {} as ChangeEmailContext,\n        events: {} as ChangeEmailEvents,\n        services: {} as ChangeEmailServices\n      },\n      tsTypes: {} as import('./change-email.typegen').Typegen0,\n      predictableActionArguments: true,\n      id: 'changeEmail',\n      initial: 'idle',\n      context: { error: null },\n      states: {\n        idle: {\n          on: {\n            REQUEST: [\n              {\n                cond: 'invalidEmail',\n                actions: 'saveInvalidEmailError',\n                target: '.error'\n              },\n              {\n                target: 'requesting'\n              }\n            ]\n          },\n          initial: 'initial',\n          states: {\n            initial: {},\n            success: {},\n            error: {}\n          }\n        },\n        requesting: {\n          invoke: {\n            src: 'requestChange',\n            id: 'requestChange',\n            onDone: { target: 'idle.success', actions: 'reportSuccess' },\n            onError: { actions: ['saveRequestError', 'reportError'], target: 'idle.error' }\n          }\n        }\n      }\n    },\n    {\n      actions: {\n        saveInvalidEmailError: assign({ error: (_) => INVALID_EMAIL_ERROR }),\n        saveRequestError: assign({\n          // * Untyped action payload. See https://github.com/statelyai/xstate/issues/3037\n          error: (_, { data: { error } }: any) => error\n        }),\n        reportError: send((ctx) => ({ type: 'ERROR', error: ctx.error })),\n        // TODO change email in the main machine (context.user.email)\n        reportSuccess: send('SUCCESS')\n      },\n      guards: {\n        invalidEmail: (_, { email }) => !isValidEmail(email)\n      },\n      services: {\n        requestChange: async (_, { email, options }) => {\n          const res = await api.post(\n            '/user/email/change',\n            {\n              newEmail: email,\n              options: rewriteRedirectTo(clientUrl, options)\n            },\n            {\n              headers: {\n                authorization: `Bearer ${interpreter?.state.context.accessToken.value}`\n              }\n            }\n          )\n          return res.data\n        }\n      }\n    }\n  )\n}\n","import { assign, createMachine, send } from 'xstate'\n\nimport { AuthClient } from '../client'\nimport { ErrorPayload, INVALID_PASSWORD_ERROR } from '../errors'\nimport { nhostApiClient } from '../hasura-auth'\nimport { ChangePasswordResponse } from '../types'\nimport { isValidPassword } from '../validators'\n\nexport type ChangePasswordContext = {\n  error: ErrorPayload | null\n}\nexport type ChangePasswordEvents =\n  | {\n      type: 'REQUEST'\n      password?: string\n      ticket?: string\n    }\n  | { type: 'SUCCESS' }\n  | { type: 'ERROR'; error: ErrorPayload | null }\n\nexport type ChangePasswordServices = {\n  requestChange: { data: ChangePasswordResponse }\n}\n\nexport type ChangePasswordMachine = ReturnType<typeof createChangePasswordMachine>\n\nexport const createChangePasswordMachine = ({ backendUrl, interpreter }: AuthClient) => {\n  const api = nhostApiClient(backendUrl)\n  return createMachine(\n    {\n      schema: {\n        context: {} as ChangePasswordContext,\n        events: {} as ChangePasswordEvents,\n        services: {} as ChangePasswordServices\n      },\n      tsTypes: {} as import('./change-password.typegen').Typegen0,\n      predictableActionArguments: true,\n      id: 'changePassword',\n      initial: 'idle',\n      context: { error: null },\n      states: {\n        idle: {\n          on: {\n            REQUEST: [\n              {\n                cond: 'invalidPassword',\n                actions: 'saveInvalidPasswordError',\n                target: '.error'\n              },\n              {\n                target: 'requesting'\n              }\n            ]\n          },\n          initial: 'initial',\n          states: {\n            initial: {},\n            success: {},\n            error: {}\n          }\n        },\n        requesting: {\n          invoke: {\n            src: 'requestChange',\n            id: 'requestChange',\n            onDone: { target: 'idle.success', actions: 'reportSuccess' },\n            onError: { actions: ['saveRequestError', 'reportError'], target: 'idle.error' }\n          }\n        }\n      }\n    },\n    {\n      actions: {\n        saveInvalidPasswordError: assign({ error: (_) => INVALID_PASSWORD_ERROR }),\n        saveRequestError: assign({\n          // * Untyped action payload. See https://github.com/statelyai/xstate/issues/3037\n          error: (_, { data: { error } }: any) => error\n        }),\n        reportError: send((ctx) => ({ type: 'ERROR', error: ctx.error })),\n        reportSuccess: send('SUCCESS')\n      },\n      guards: {\n        invalidPassword: (_, { password }) => !isValidPassword(password)\n      },\n      services: {\n        requestChange: (_, { password, ticket }) =>\n          api.post<string, ChangePasswordResponse>(\n            '/user/password',\n            { newPassword: password, ticket: ticket },\n            {\n              headers: {\n                authorization: `Bearer ${interpreter?.state.context.accessToken.value}`\n              }\n            }\n          )\n      }\n    }\n  )\n}\n","import { assign, createMachine, send } from 'xstate'\n\nimport { AuthClient } from '../client'\nimport { ErrorPayload, INVALID_MFA_CODE_ERROR, INVALID_MFA_TYPE_ERROR } from '../errors'\nimport { nhostApiClient } from '../hasura-auth'\n\nexport type EnableMfaContext = {\n  error: ErrorPayload | null\n  imageUrl: string | null\n  secret: string | null\n}\n\nexport type EnableMfaEvents =\n  | {\n      type: 'GENERATE'\n    }\n  | {\n      type: 'ACTIVATE'\n      code?: string\n      activeMfaType: 'totp'\n    }\n  | { type: 'GENERATED' }\n  | { type: 'GENERATED_ERROR'; error: ErrorPayload | null }\n  | { type: 'SUCCESS' }\n  | { type: 'ERROR'; error: ErrorPayload | null }\n\nexport type EnableMfadMachine = ReturnType<typeof createEnableMfaMachine>\n\nexport const createEnableMfaMachine = ({ backendUrl, interpreter }: AuthClient) => {\n  const api = nhostApiClient(backendUrl)\n  return createMachine(\n    {\n      schema: {\n        context: {} as EnableMfaContext,\n        events: {} as EnableMfaEvents\n      },\n      tsTypes: {} as import('./enable-mfa.typegen').Typegen0,\n      predictableActionArguments: true,\n      id: 'enableMfa',\n      initial: 'idle',\n      context: { error: null, imageUrl: null, secret: null },\n      states: {\n        idle: {\n          initial: 'initial',\n          on: {\n            GENERATE: 'generating'\n          },\n          states: {\n            initial: {},\n            error: {}\n          }\n        },\n        generating: {\n          invoke: {\n            src: 'generate',\n            id: 'generate',\n            onDone: { target: 'generated', actions: ['reportGeneratedSuccess', 'saveGeneration'] },\n            onError: { actions: ['saveError', 'reportGeneratedError'], target: 'idle.error' }\n          }\n        },\n        generated: {\n          initial: 'idle',\n          states: {\n            idle: {\n              initial: 'idle',\n              on: {\n                ACTIVATE: [\n                  {\n                    cond: 'invalidMfaType',\n                    actions: 'saveInvalidMfaTypeError',\n                    target: '.error'\n                  },\n                  {\n                    cond: 'invalidMfaCode',\n                    actions: 'saveInvalidMfaCodeError',\n                    target: '.error'\n                  },\n                  {\n                    target: 'activating'\n                  }\n                ]\n              },\n              states: { idle: {}, error: {} }\n            },\n            activating: {\n              invoke: {\n                src: 'activate',\n                id: 'activate',\n                onDone: { target: 'activated', actions: 'reportSuccess' },\n                onError: { actions: ['saveError', 'reportError'], target: 'idle.error' }\n              }\n            },\n            activated: { type: 'final' }\n          }\n        }\n      }\n    },\n    {\n      actions: {\n        saveInvalidMfaTypeError: assign({ error: (_) => INVALID_MFA_TYPE_ERROR }),\n        saveInvalidMfaCodeError: assign({ error: (_) => INVALID_MFA_CODE_ERROR }),\n        saveError: assign({\n          error: (_, { data: { error } }: any) => error\n        }),\n        saveGeneration: assign({\n          imageUrl: (_, { data: { imageUrl } }: any) => imageUrl,\n          secret: (_, { data: { totpSecret } }: any) => totpSecret\n        }),\n        reportError: send((ctx) => ({ type: 'ERROR', error: ctx.error })),\n        reportSuccess: send('SUCCESS'),\n        reportGeneratedSuccess: send('GENERATED'),\n        reportGeneratedError: send((ctx) => ({ type: 'GENERATED_ERROR', error: ctx.error }))\n      },\n      guards: {\n        invalidMfaCode: (_, { code }) => !code,\n        invalidMfaType: (_, { activeMfaType }) => !activeMfaType || activeMfaType !== 'totp'\n      },\n      services: {\n        generate: async (_) => {\n          const { data } = await api.get('/mfa/totp/generate', {\n            headers: {\n              authorization: `Bearer ${interpreter?.state.context.accessToken.value}`\n            }\n          })\n          return data\n        },\n        activate: (_, { code, activeMfaType }) =>\n          api.post(\n            '/user/mfa',\n            {\n              code,\n              activeMfaType\n            },\n            {\n              headers: {\n                authorization: `Bearer ${interpreter?.state.context.accessToken.value}`\n              }\n            }\n          )\n      }\n    }\n  )\n}\n","import { assign, createMachine, send } from 'xstate'\n\nimport { AuthClient } from '../client'\nimport { ErrorPayload, INVALID_EMAIL_ERROR } from '../errors'\nimport { nhostApiClient } from '../hasura-auth'\nimport { ResetPasswordOptions, ResetPasswordResponse } from '../types'\nimport { rewriteRedirectTo } from '../utils'\nimport { isValidEmail } from '../validators'\n\nexport type ResetPasswordContext = {\n  error: ErrorPayload | null\n}\nexport type ResetPasswordEvents =\n  | {\n      type: 'REQUEST'\n      email?: string\n      options?: ResetPasswordOptions\n    }\n  | { type: 'SUCCESS' }\n  | { type: 'ERROR'; error: ErrorPayload | null }\n\nexport type ResetPasswordServices = {\n  requestChange: { data: ResetPasswordResponse }\n}\n\nexport type ResetPasswordMachine = ReturnType<typeof createResetPasswordMachine>\n\nexport const createResetPasswordMachine = ({ backendUrl, clientUrl }: AuthClient) => {\n  const api = nhostApiClient(backendUrl)\n  return createMachine(\n    {\n      schema: {\n        context: {} as ResetPasswordContext,\n        events: {} as ResetPasswordEvents,\n        services: {} as ResetPasswordServices\n      },\n      tsTypes: {} as import('./reset-password.typegen').Typegen0,\n      predictableActionArguments: true,\n      id: 'changePassword',\n      initial: 'idle',\n      context: { error: null },\n      states: {\n        idle: {\n          on: {\n            REQUEST: [\n              {\n                cond: 'invalidEmail',\n                actions: 'saveInvalidEmailError',\n                target: '.error'\n              },\n              {\n                target: 'requesting'\n              }\n            ]\n          },\n          initial: 'initial',\n          states: {\n            initial: {},\n            success: {},\n            error: {}\n          }\n        },\n        requesting: {\n          invoke: {\n            src: 'requestChange',\n            id: 'requestChange',\n            onDone: { target: 'idle.success', actions: 'reportSuccess' },\n            onError: { actions: ['saveRequestError', 'reportError'], target: 'idle.error' }\n          }\n        }\n      }\n    },\n    {\n      actions: {\n        saveInvalidEmailError: assign({ error: (_) => INVALID_EMAIL_ERROR }),\n        saveRequestError: assign({\n          // * Untyped action payload. See https://github.com/statelyai/xstate/issues/3037\n          error: (_, { data: { error } }: any) => error\n        }),\n        reportError: send((ctx) => ({ type: 'ERROR', error: ctx.error })),\n        reportSuccess: send('SUCCESS')\n      },\n      guards: {\n        invalidEmail: (_, { email }) => !isValidEmail(email)\n      },\n      services: {\n        requestChange: (_, { email, options }) =>\n          api.post<string, ResetPasswordResponse>('/user/password/reset', {\n            email,\n            options: rewriteRedirectTo(clientUrl, options)\n          })\n      }\n    }\n  )\n}\n","import { assign, createMachine, send } from 'xstate'\n\nimport { AuthClient } from '../client'\nimport { ErrorPayload, INVALID_EMAIL_ERROR } from '../errors'\nimport { nhostApiClient } from '../hasura-auth'\nimport { SendVerificationEmailOptions, SendVerificationEmailResponse } from '../types'\nimport { rewriteRedirectTo } from '../utils'\nimport { isValidEmail } from '../validators'\n\nexport type SendVerificationEmailContext = {\n  error: ErrorPayload | null\n}\n\nexport type SendVerificationEmailEvents =\n  | {\n      type: 'REQUEST'\n      email?: string\n      options?: SendVerificationEmailOptions\n    }\n  | { type: 'SUCCESS' }\n  | { type: 'ERROR'; error: ErrorPayload | null }\n\nexport type SendVerificationEmailServices = {\n  request: { data: SendVerificationEmailResponse }\n}\n\nexport type SendVerificationEmailMachine = ReturnType<typeof createSendVerificationEmailMachine>\nexport const createSendVerificationEmailMachine = ({ backendUrl, clientUrl }: AuthClient) => {\n  const api = nhostApiClient(backendUrl)\n  return createMachine(\n    {\n      schema: {\n        context: {} as SendVerificationEmailContext,\n        events: {} as SendVerificationEmailEvents,\n        services: {} as SendVerificationEmailServices\n      },\n      tsTypes: {} as import('./send-verification-email.typegen').Typegen0,\n      predictableActionArguments: true,\n      id: 'sendVerificationEmail',\n      initial: 'idle',\n      context: { error: null },\n      states: {\n        idle: {\n          on: {\n            REQUEST: [\n              {\n                cond: 'invalidEmail',\n                actions: 'saveInvalidEmailError',\n                target: '.error'\n              },\n              {\n                target: 'requesting'\n              }\n            ]\n          },\n          initial: 'initial',\n          states: {\n            initial: {},\n            success: {},\n            error: {}\n          }\n        },\n        requesting: {\n          invoke: {\n            src: 'request',\n            id: 'request',\n            onDone: { target: 'idle.success', actions: 'reportSuccess' },\n            onError: { actions: ['saveRequestError', 'reportError'], target: 'idle.error' }\n          }\n        }\n      }\n    },\n    {\n      actions: {\n        saveInvalidEmailError: assign({ error: (_) => INVALID_EMAIL_ERROR }),\n        saveRequestError: assign({\n          // * Untyped action payload. See https://github.com/statelyai/xstate/issues/3037\n          error: (_, { data: { error } }: any) => error\n        }),\n        reportError: send((ctx) => ({ type: 'ERROR', error: ctx.error })),\n        reportSuccess: send('SUCCESS')\n      },\n      guards: {\n        invalidEmail: (_, { email }) => !isValidEmail(email)\n      },\n      services: {\n        request: async (_, { email, options }) => {\n          const res = await api.post<SendVerificationEmailResponse>(\n            '/user/email/send-verification-email',\n            {\n              email,\n              options: rewriteRedirectTo(clientUrl, options)\n            }\n          )\n          return res.data\n        }\n      }\n    }\n  )\n}\n","import type { AxiosRequestConfig } from 'axios'\nimport { assign, createMachine, send } from 'xstate'\n\nimport { startAuthentication, startRegistration } from '@simplewebauthn/browser'\nimport type {\n  AuthenticationCredentialJSON,\n  PublicKeyCredentialCreationOptionsJSON,\n  PublicKeyCredentialRequestOptionsJSON,\n  RegistrationCredentialJSON\n} from '@simplewebauthn/typescript-types'\n\nimport {\n  NHOST_JWT_EXPIRES_AT_KEY,\n  NHOST_REFRESH_TOKEN_KEY,\n  REFRESH_TOKEN_RETRY_INTERVAL,\n  TOKEN_REFRESH_MARGIN\n} from '../constants'\nimport {\n  CodifiedError,\n  ErrorPayload,\n  INVALID_EMAIL_ERROR,\n  INVALID_MFA_TICKET_ERROR,\n  INVALID_PASSWORD_ERROR,\n  INVALID_PHONE_NUMBER_ERROR,\n  NETWORK_ERROR_CODE,\n  NO_MFA_TICKET_ERROR,\n  NO_REFRESH_TOKEN,\n  VALIDATION_ERROR_CODE\n} from '../errors'\nimport { nhostApiClient } from '../hasura-auth'\nimport { localStorageGetter, localStorageSetter } from '../storage'\nimport {\n  AuthOptions,\n  DeanonymizeResponse,\n  NhostSession,\n  NhostSessionResponse,\n  PasswordlessEmailResponse,\n  PasswordlessSmsOtpResponse,\n  PasswordlessSmsResponse,\n  RefreshSessionResponse,\n  SignInAnonymousResponse,\n  SignInMfaTotpResponse,\n  SignInResponse,\n  SignOutResponse,\n  SignUpResponse\n} from '../types'\nimport { getParameterByName, removeParameterFromWindow, rewriteRedirectTo } from '../utils'\nimport { isValidEmail, isValidPassword, isValidPhoneNumber, isValidTicket } from '../validators'\n\nimport { AuthContext, INITIAL_MACHINE_CONTEXT, StateErrorTypes } from './context'\nimport { AuthEvents } from './events'\n\nexport * from './change-email'\nexport * from './change-password'\nexport * from './enable-mfa'\nexport * from './reset-password'\nexport * from './send-verification-email'\nexport type { AuthContext, AuthEvents, StateErrorTypes }\n\nexport interface AuthMachineOptions extends AuthOptions {\n  backendUrl: string\n  clientUrl: string\n}\n\nexport type AuthMachine = ReturnType<typeof createAuthMachine>\n\ntype AuthServices = {\n  signInPassword: { data: SignInResponse }\n  passwordlessSms: { data: PasswordlessSmsResponse | DeanonymizeResponse }\n  passwordlessSmsOtp: { data: PasswordlessSmsOtpResponse }\n  passwordlessEmail: { data: PasswordlessEmailResponse | DeanonymizeResponse }\n  signInAnonymous: { data: SignInAnonymousResponse }\n  signInMfaTotp: { data: SignInMfaTotpResponse }\n  signInSecurityKeyEmail: { data: SignInResponse }\n  refreshToken: { data: NhostSessionResponse }\n  signout: { data: SignOutResponse }\n  signUpEmailPassword: { data: SignUpResponse }\n  signUpSecurityKey: { data: SignUpResponse }\n  importRefreshToken: { data: NhostSessionResponse }\n}\n\nexport const createAuthMachine = ({\n  backendUrl,\n  clientUrl,\n  clientStorageGetter,\n  clientStorageSetter,\n  clientStorageType = 'web',\n  clientStorage,\n  refreshIntervalTime,\n  autoRefreshToken = true,\n  autoSignIn = true\n}: AuthMachineOptions) => {\n  const storageGetter = clientStorageGetter || localStorageGetter(clientStorageType, clientStorage)\n  const storageSetter = clientStorageSetter || localStorageSetter(clientStorageType, clientStorage)\n  const api = nhostApiClient(backendUrl)\n  const postRequest = async <T = any, D = any>(\n    url: string,\n    data?: D,\n    config?: AxiosRequestConfig<D>\n  ): Promise<T> => {\n    const result = await api.post(url, data, config)\n\n    return result.data\n  }\n  return createMachine(\n    {\n      schema: {\n        context: {} as AuthContext,\n        events: {} as AuthEvents,\n        services: {} as AuthServices\n      },\n      tsTypes: {} as import('./index.typegen').Typegen0,\n      context: INITIAL_MACHINE_CONTEXT,\n      predictableActionArguments: true,\n      id: 'nhost',\n      type: 'parallel',\n      states: {\n        authentication: {\n          initial: 'starting',\n          on: {\n            SESSION_UPDATE: [\n              {\n                cond: 'hasSession',\n                actions: ['saveSession', 'resetTimer', 'reportTokenChanged'],\n                target: '.signedIn'\n              }\n            ]\n          },\n          states: {\n            starting: {\n              tags: ['loading'],\n              always: { cond: 'isSignedIn', target: 'signedIn' },\n              invoke: {\n                id: 'importRefreshToken',\n                src: 'importRefreshToken',\n                onDone: {\n                  actions: ['saveSession', 'reportTokenChanged'],\n                  target: 'signedIn'\n                },\n                onError: [\n                  {\n                    cond: 'shouldRetryImportToken',\n                    actions: 'incrementTokenImportAttempts',\n                    target: 'retryTokenImport'\n                  },\n                  { actions: ['saveAuthenticationError'], target: 'signedOut' }\n                ]\n              }\n            },\n            retryTokenImport: {\n              tags: ['loading'],\n              after: {\n                RETRY_IMPORT_TOKEN_DELAY: 'starting'\n              }\n            },\n            signedOut: {\n              initial: 'noErrors',\n              entry: 'reportSignedOut',\n              states: {\n                noErrors: {},\n                success: {},\n                needsSmsOtp: {},\n                needsMfa: {},\n                failed: {},\n                signingOut: {\n                  entry: ['clearContextExceptRefreshToken'],\n                  exit: ['destroyRefreshToken', 'reportTokenChanged'],\n                  invoke: {\n                    src: 'signout',\n                    id: 'signingOut',\n                    onDone: {\n                      target: 'success'\n                    },\n                    onError: {\n                      target: 'failed',\n                      actions: ['saveAuthenticationError']\n                    }\n                  }\n                }\n              },\n              on: {\n                SIGNIN_PASSWORD: 'authenticating.password',\n                SIGNIN_ANONYMOUS: 'authenticating.anonymous',\n                SIGNIN_SECURITY_KEY_EMAIL: 'authenticating.securityKeyEmail',\n                SIGNIN_MFA_TOTP: 'authenticating.mfa.totp'\n              }\n            },\n            authenticating: {\n              entry: 'resetErrors',\n              states: {\n                password: {\n                  invoke: {\n                    src: 'signInPassword',\n                    id: 'authenticateUserWithPassword',\n                    onDone: [\n                      {\n                        cond: 'hasMfaTicket',\n                        actions: ['saveMfaTicket'],\n                        target: '#nhost.authentication.signedOut.needsMfa'\n                      },\n                      {\n                        actions: ['saveSession', 'reportTokenChanged'],\n                        target: '#nhost.authentication.signedIn'\n                      }\n                    ],\n                    onError: [\n                      {\n                        cond: 'unverified',\n                        target: [\n                          '#nhost.authentication.signedOut',\n                          '#nhost.registration.incomplete.needsEmailVerification'\n                        ]\n                      },\n                      {\n                        actions: 'saveAuthenticationError',\n                        target: '#nhost.authentication.signedOut.failed'\n                      }\n                    ]\n                  }\n                },\n                anonymous: {\n                  invoke: {\n                    src: 'signInAnonymous',\n                    id: 'authenticateAnonymously',\n                    onDone: {\n                      actions: ['saveSession', 'reportTokenChanged'],\n                      target: '#nhost.authentication.signedIn'\n                    },\n                    onError: {\n                      actions: 'saveAuthenticationError',\n                      target: '#nhost.authentication.signedOut.failed'\n                    }\n                  }\n                },\n                mfa: {\n                  states: {\n                    totp: {\n                      invoke: {\n                        src: 'signInMfaTotp',\n                        id: 'signInMfaTotp',\n                        onDone: {\n                          actions: ['saveSession', 'reportTokenChanged'],\n                          target: '#nhost.authentication.signedIn'\n                        },\n                        onError: {\n                          actions: ['saveAuthenticationError'],\n                          target: '#nhost.authentication.signedOut.failed'\n                        }\n                      }\n                    }\n                  }\n                },\n                securityKeyEmail: {\n                  invoke: {\n                    src: 'signInSecurityKeyEmail',\n                    id: 'authenticateUserWithSecurityKey',\n                    onDone: {\n                      actions: ['saveSession', 'reportTokenChanged'],\n                      target: '#nhost.authentication.signedIn'\n                    },\n                    onError: [\n                      {\n                        cond: 'unverified',\n                        target: [\n                          '#nhost.authentication.signedOut',\n                          '#nhost.registration.incomplete.needsEmailVerification'\n                        ]\n                      },\n                      {\n                        actions: 'saveAuthenticationError',\n                        target: '#nhost.authentication.signedOut.failed'\n                      }\n                    ]\n                  }\n                }\n              }\n            },\n            signedIn: {\n              type: 'parallel',\n              entry: ['reportSignedIn', 'cleanUrl', 'broadcastToken', 'resetErrors'],\n              on: {\n                SIGNOUT: 'signedOut.signingOut'\n              },\n              states: {\n                refreshTimer: {\n                  id: 'timer',\n                  initial: 'idle',\n                  states: {\n                    disabled: { type: 'final' },\n                    stopped: {\n                      always: {\n                        cond: 'noToken',\n                        target: 'idle'\n                      }\n                    },\n                    idle: {\n                      always: [\n                        { cond: 'isAutoRefreshDisabled', target: 'disabled' },\n                        {\n                          cond: 'hasRefreshToken',\n                          target: 'running'\n                        }\n                      ]\n                    },\n                    running: {\n                      initial: 'pending',\n                      entry: 'resetTimer',\n                      states: {\n                        pending: {\n                          after: {\n                            '1000': {\n                              internal: false,\n                              target: 'pending'\n                            }\n                          },\n                          always: {\n                            cond: 'refreshTimerShouldRefresh',\n                            target: 'refreshing'\n                          }\n                        },\n                        refreshing: {\n                          invoke: {\n                            src: 'refreshToken',\n                            id: 'refreshToken',\n                            onDone: {\n                              actions: ['saveSession', 'resetTimer', 'reportTokenChanged'],\n                              target: 'pending'\n                            },\n                            onError: [\n                              { actions: 'saveRefreshAttempt', target: 'pending' }\n                              // ? stop trying after x attempts?\n                              // {\n                              //   actions: 'retry',\n                              //   cond: 'canRetry',\n                              //   target: 'pending'\n                              // },\n                              // {\n                              //   actions: ['sendError', 'resetToken'],\n                              //   target: '#timer.stopped'\n                              // }\n                            ]\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        token: {\n          initial: 'idle',\n          states: {\n            idle: {\n              on: {\n                TRY_TOKEN: 'running'\n              },\n              initial: 'noErrors',\n              states: { noErrors: {}, error: {} }\n            },\n            running: {\n              invoke: {\n                src: 'refreshToken',\n                id: 'authenticateWithToken',\n                onDone: {\n                  actions: ['saveSession', 'reportTokenChanged'],\n                  target: ['#nhost.authentication.signedIn', 'idle.noErrors']\n                },\n                onError: [\n                  { cond: 'isSignedIn', target: 'idle.error' },\n                  {\n                    actions: 'saveAuthenticationError',\n                    target: ['#nhost.authentication.signedOut.failed', 'idle.error']\n                  }\n                ]\n              }\n            }\n          }\n        },\n        registration: {\n          initial: 'incomplete',\n          on: {\n            SIGNED_IN: [{ cond: 'isAnonymous', target: '.incomplete' }, '.complete']\n          },\n          states: {\n            incomplete: {\n              on: {\n                SIGNUP_EMAIL_PASSWORD: 'emailPassword',\n                SIGNUP_SECURITY_KEY: 'securityKey',\n                PASSWORDLESS_EMAIL: 'passwordlessEmail',\n                PASSWORDLESS_SMS: 'passwordlessSms',\n                PASSWORDLESS_SMS_OTP: 'passwordlessSmsOtp'\n              },\n              initial: 'noErrors',\n              states: {\n                noErrors: {},\n                needsEmailVerification: {},\n                needsOtp: {},\n                failed: {}\n              }\n            },\n            emailPassword: {\n              entry: ['resetErrors'],\n              invoke: {\n                src: 'signUpEmailPassword',\n                id: 'signUpEmailPassword',\n                onDone: [\n                  {\n                    cond: 'hasSession',\n                    actions: ['saveSession', 'reportTokenChanged'],\n                    target: '#nhost.authentication.signedIn'\n                  },\n                  {\n                    actions: 'clearContext',\n                    target: ['#nhost.authentication.signedOut', 'incomplete.needsEmailVerification']\n                  }\n                ],\n                onError: [\n                  {\n                    cond: 'unverified',\n                    target: 'incomplete.needsEmailVerification'\n                  },\n                  {\n                    actions: 'saveRegistrationError',\n                    target: 'incomplete.failed'\n                  }\n                ]\n              }\n            },\n            securityKey: {\n              entry: ['resetErrors'],\n              invoke: {\n                src: 'signUpSecurityKey',\n                id: 'signUpSecurityKey',\n                onDone: [\n                  {\n                    cond: 'hasSession',\n                    actions: ['saveSession', 'reportTokenChanged'],\n                    target: '#nhost.authentication.signedIn'\n                  },\n                  {\n                    actions: 'clearContext',\n                    target: ['#nhost.authentication.signedOut', 'incomplete.needsEmailVerification']\n                  }\n                ],\n                onError: [\n                  {\n                    cond: 'unverified',\n                    target: 'incomplete.needsEmailVerification'\n                  },\n                  {\n                    actions: 'saveRegistrationError',\n                    target: 'incomplete.failed'\n                  }\n                ]\n              }\n            },\n            passwordlessEmail: {\n              entry: ['resetErrors'],\n              invoke: {\n                src: 'passwordlessEmail',\n                id: 'passwordlessEmail',\n                onDone: {\n                  actions: 'clearContext',\n                  target: ['#nhost.authentication.signedOut', 'incomplete.needsEmailVerification']\n                },\n                onError: {\n                  actions: 'saveRegistrationError',\n                  target: 'incomplete.failed'\n                }\n              }\n            },\n            passwordlessSms: {\n              entry: ['resetErrors'],\n              invoke: {\n                src: 'passwordlessSms',\n                id: 'passwordlessSms',\n                onDone: {\n                  actions: 'clearContext',\n                  target: ['#nhost.authentication.signedOut', 'incomplete.needsOtp']\n                },\n                onError: {\n                  actions: 'saveRegistrationError',\n                  target: 'incomplete.failed'\n                }\n              }\n            },\n            passwordlessSmsOtp: {\n              entry: ['resetErrors'],\n              invoke: {\n                src: 'passwordlessSmsOtp',\n                id: 'passwordlessSmsOtp',\n                onDone: {\n                  actions: ['saveSession', 'reportTokenChanged'],\n                  target: '#nhost.authentication.signedIn'\n                },\n                onError: {\n                  actions: 'saveRegistrationError',\n                  target: 'incomplete.failed'\n                }\n              }\n            },\n\n            complete: {\n              on: {\n                SIGNED_OUT: 'incomplete'\n              }\n            }\n          }\n        }\n      }\n    },\n    {\n      actions: {\n        reportSignedIn: send('SIGNED_IN'),\n        reportSignedOut: send('SIGNED_OUT'),\n        reportTokenChanged: send('TOKEN_CHANGED'),\n        incrementTokenImportAttempts: assign({\n          importTokenAttempts: ({ importTokenAttempts }) => importTokenAttempts + 1\n        }),\n        clearContext: assign(() => {\n          storageSetter(NHOST_JWT_EXPIRES_AT_KEY, null)\n          storageSetter(NHOST_REFRESH_TOKEN_KEY, null)\n          return {\n            ...INITIAL_MACHINE_CONTEXT\n          }\n        }),\n        clearContextExceptRefreshToken: assign(({ refreshToken: { value } }) => {\n          storageSetter(NHOST_JWT_EXPIRES_AT_KEY, null)\n          return {\n            ...INITIAL_MACHINE_CONTEXT,\n            refreshToken: { value }\n          }\n        }),\n\n        // * Save session in the context, and persist the refresh token and the jwt expiration outside of the machine\n        saveSession: assign({\n          user: (_, { data }) => data?.session?.user || null,\n          accessToken: (_, { data }) => {\n            if (data.session) {\n              const { accessTokenExpiresIn, accessToken } = data.session\n              const nextRefresh = new Date(Date.now() + accessTokenExpiresIn * 1_000)\n              storageSetter(NHOST_JWT_EXPIRES_AT_KEY, nextRefresh.toISOString())\n              return {\n                value: accessToken,\n                expiresAt: nextRefresh\n              }\n            }\n            storageSetter(NHOST_JWT_EXPIRES_AT_KEY, null)\n            return {\n              value: null,\n              expiresAt: null\n            }\n          },\n          refreshToken: (_, { data }) => {\n            const refreshToken = data.session?.refreshToken || null\n            if (refreshToken) {\n              storageSetter(NHOST_REFRESH_TOKEN_KEY, refreshToken)\n            }\n            return { value: refreshToken }\n          }\n        }),\n        saveMfaTicket: assign({\n          mfa: (_, e) => e.data?.mfa\n        }),\n\n        resetTimer: assign({\n          refreshTimer: (_) => ({\n            startedAt: new Date(),\n            attempts: 0,\n            lastAttempt: null\n          })\n        }),\n\n        saveRefreshAttempt: assign({\n          refreshTimer: (ctx, e) => ({\n            startedAt: ctx.refreshTimer.startedAt,\n            attempts: ctx.refreshTimer.attempts + 1,\n            lastAttempt: new Date()\n          })\n        }),\n\n        // * Authentication errors\n        saveAuthenticationError: assign({\n          // * Untyped action payload. See https://github.com/statelyai/xstate/issues/3037\n          errors: ({ errors }, { data: { error } }: any) => ({\n            ...errors,\n            authentication: error\n          })\n        }),\n        resetErrors: assign({\n          errors: (_) => ({}),\n          importTokenAttempts: (_) => 0\n        }),\n        saveRegistrationError: assign({\n          // * Untyped action payload. See https://github.com/statelyai/xstate/issues/3037\n          errors: ({ errors }, { data: { error } }: any) => ({ ...errors, registration: error })\n        }),\n        destroyRefreshToken: assign({\n          refreshToken: (_) => {\n            storageSetter(NHOST_REFRESH_TOKEN_KEY, null)\n            return { value: null }\n          }\n        }),\n\n        // * Clean the browser url when `autoSignIn` is activated\n        cleanUrl: () => {\n          if (autoSignIn && getParameterByName('refreshToken')) {\n            // * Remove the refresh token from the URL\n            removeParameterFromWindow('refreshToken')\n            removeParameterFromWindow('type')\n          }\n        },\n\n        // * Broadcast the token to other tabs when `autoSignIn` is activated\n        broadcastToken: (context) => {\n          if (autoSignIn) {\n            try {\n              const channel = new BroadcastChannel('nhost')\n              // ? broadcat session instead of token ?\n              channel.postMessage(context.refreshToken.value)\n            } catch (error) {\n              // * BroadcastChannel is not available e.g. react-native\n            }\n          }\n        }\n      },\n\n      guards: {\n        isAnonymous: (ctx, e) => !!ctx.user?.isAnonymous,\n        isSignedIn: (ctx) => !!ctx.user && !!ctx.refreshToken.value && !!ctx.accessToken.value,\n        noToken: (ctx) => !ctx.refreshToken.value,\n        hasRefreshToken: (ctx) => !!ctx.refreshToken.value,\n        isAutoRefreshDisabled: () => !autoRefreshToken,\n        refreshTimerShouldRefresh: (ctx) => {\n          const { expiresAt } = ctx.accessToken\n          if (!expiresAt) {\n            return false\n          }\n          if (ctx.refreshTimer.lastAttempt) {\n            // * If a refesh previously failed, only try to refresh every `REFRESH_TOKEN_RETRY_INTERVAL` seconds\n            const elapsed = Date.now() - ctx.refreshTimer.lastAttempt.getTime()\n            return elapsed > REFRESH_TOKEN_RETRY_INTERVAL * 1_000\n          }\n          if (refreshIntervalTime) {\n            // * If a refreshIntervalTime has been passed on as an option, it will notify\n            // * the token should be refershed when this interval is overdue\n            const elapsed = Date.now() - ctx.refreshTimer.startedAt!.getTime()\n            if (elapsed > refreshIntervalTime * 1_000) {\n              return true\n            }\n          }\n          // * In any case, it's time to refresh when there's less than\n          // * TOKEN_REFRESH_MARGIN seconds before the JWT exprires\n          const expiresIn = expiresAt.getTime() - Date.now()\n          const remaining = expiresIn - 1_000 * TOKEN_REFRESH_MARGIN\n          return remaining <= 0\n        },\n        // * Untyped action payload. See https://github.com/statelyai/xstate/issues/3037\n        /** Shoud retry to import the token on network error or any internal server error */\n        shouldRetryImportToken: (_, e: any) =>\n          e.data.error.status === NETWORK_ERROR_CODE || e.data.error.status >= 500,\n        // * Authentication errors\n        // * Untyped action payload. See https://github.com/statelyai/xstate/issues/3037\n        unverified: (_, { data: { error } }: any) =>\n          error.status === 401 &&\n          // * legacy: don't use the message contents to determine if the email is unverified, but the error type (error.error)\n          (error.message === 'Email is not verified' || error.error === 'unverified-user'),\n\n        // * Event guards\n        hasSession: (_, e) => !!e.data?.session,\n        hasMfaTicket: (_, e) => !!e.data?.mfa\n      },\n\n      services: {\n        signInPassword: (_, { email, password }) => {\n          if (!isValidEmail(email)) {\n            return Promise.reject({ error: INVALID_EMAIL_ERROR })\n          }\n          if (!isValidPassword(password)) {\n            return Promise.reject({ error: INVALID_PASSWORD_ERROR })\n          }\n          return postRequest<SignInResponse>('/signin/email-password', {\n            email,\n            password\n          })\n        },\n        passwordlessSms: (context, { phoneNumber, options }) => {\n          if (!isValidPhoneNumber(phoneNumber)) {\n            return Promise.reject({ error: INVALID_PHONE_NUMBER_ERROR })\n          }\n          if (context.user?.isAnonymous) {\n            // TODO implement in hasura-auth\n            // * See https://github.com/nhost/hasura-auth/blob/9c6d0f4ded4fc8fd1b8031926c02796c74a7eada/src/routes/user/deanonymize.ts\n            console.warn(\n              'Deanonymisation from a phone number is not yet implemented in hasura-auth'\n            )\n            return postRequest(\n              '/user/deanonymize',\n              {\n                signInMethod: 'passwordless',\n                connection: 'sms',\n                phoneNumber,\n                options: rewriteRedirectTo(clientUrl, options)\n              },\n              {\n                headers: {\n                  authorization: `Bearer ${context.accessToken.value}`\n                }\n              }\n            )\n          } else {\n            return postRequest('/signin/passwordless/sms', {\n              phoneNumber,\n              options: rewriteRedirectTo(clientUrl, options)\n            })\n          }\n        },\n        passwordlessSmsOtp: (_, { phoneNumber, otp }) => {\n          if (!isValidPhoneNumber(phoneNumber)) {\n            return Promise.reject({ error: INVALID_PHONE_NUMBER_ERROR })\n          }\n          return postRequest('/signin/passwordless/sms/otp', {\n            phoneNumber,\n            otp\n          })\n        },\n        passwordlessEmail: (context, { email, options }) => {\n          if (!isValidEmail(email)) {\n            return Promise.reject({ error: INVALID_EMAIL_ERROR })\n          }\n          if (context.user?.isAnonymous) {\n            return postRequest(\n              '/user/deanonymize',\n              {\n                signInMethod: 'passwordless',\n                connection: 'email',\n                email,\n                options: rewriteRedirectTo(clientUrl, options)\n              },\n              {\n                headers: {\n                  authorization: `Bearer ${context.accessToken.value}`\n                }\n              }\n            )\n          } else {\n            return postRequest('/signin/passwordless/email', {\n              email,\n              options: rewriteRedirectTo(clientUrl, options)\n            })\n          }\n        },\n        signInAnonymous: (_) => postRequest('/signin/anonymous'),\n        signInMfaTotp: (context, data) => {\n          const ticket: string | undefined = data.ticket || context.mfa?.ticket\n          if (!ticket) {\n            return Promise.reject({ error: NO_MFA_TICKET_ERROR })\n          }\n          if (!isValidTicket(ticket)) {\n            return Promise.reject({ error: INVALID_MFA_TICKET_ERROR })\n          }\n\n          return postRequest('/signin/mfa/totp', {\n            ticket,\n            otp: data.otp\n          })\n        },\n        signInSecurityKeyEmail: async (_, { email }) => {\n          if (!isValidEmail(email)) {\n            throw new CodifiedError(INVALID_EMAIL_ERROR)\n          }\n          const options = await postRequest<PublicKeyCredentialRequestOptionsJSON>(\n            '/signin/webauthn',\n            { email }\n          )\n          let credential: AuthenticationCredentialJSON\n          try {\n            credential = await startAuthentication(options)\n          } catch (e) {\n            throw new CodifiedError(e as Error)\n          }\n          return postRequest<SignInResponse>('/signin/webauthn/verify', { email, credential })\n        },\n        refreshToken: async (ctx, event) => {\n          const refreshToken = event.type === 'TRY_TOKEN' ? event.token : ctx.refreshToken.value\n          const session = await postRequest<RefreshSessionResponse>('/token', {\n            refreshToken\n          })\n          return { session, error: null }\n        },\n        signout: (ctx, e) =>\n          postRequest('/signout', {\n            refreshToken: ctx.refreshToken.value,\n            all: !!e.all\n          }),\n        signUpEmailPassword: async (context, { email, password, options }) => {\n          if (!isValidEmail(email)) {\n            return Promise.reject<SignUpResponse>({ error: INVALID_EMAIL_ERROR })\n          }\n          if (!isValidPassword(password)) {\n            return Promise.reject<SignUpResponse>({ error: INVALID_PASSWORD_ERROR })\n          }\n          if (context.user?.isAnonymous) {\n            return postRequest<SignUpResponse>(\n              '/user/deanonymize',\n              {\n                signInMethod: 'email-password',\n                email,\n                password,\n                options: rewriteRedirectTo(clientUrl, options)\n              },\n              {\n                headers: {\n                  authorization: `Bearer ${context.accessToken.value}`\n                }\n              }\n            )\n          } else {\n            return postRequest<SignUpResponse>('/signup/email-password', {\n              email,\n              password,\n              options: rewriteRedirectTo(clientUrl, options)\n            })\n          }\n        },\n        signUpSecurityKey: async (_, { email, options }) => {\n          if (!isValidEmail(email)) {\n            return Promise.reject<SignUpResponse>({ error: INVALID_EMAIL_ERROR })\n          }\n          // TODO anonymous users\n          const nickname = options?.nickname\n          /*\n           * The `/signup/webauthn` endpoint accepts any option from SignUpOptions,\n           * We therefore remove the nickname from the options object before sending it to the server,\n           * as options if of type `SignUpSecurityKeyOptions`, which extends `SignUpOptions` with the optional `nickname` property.\n           */\n          if (nickname) delete options.nickname\n          const webAuthnOptions = await postRequest<PublicKeyCredentialCreationOptionsJSON>(\n            '/signup/webauthn',\n            { email, options }\n          )\n          let credential: RegistrationCredentialJSON\n          try {\n            credential = await startRegistration(webAuthnOptions)\n          } catch (e) {\n            throw new CodifiedError(e as Error)\n          }\n          return postRequest<SignUpResponse>('/signup/webauthn/verify', {\n            credential,\n            options: {\n              redirectTo: options?.redirectTo,\n              nickname\n            }\n          })\n        },\n        importRefreshToken: async () => {\n          let error: ErrorPayload | null = null\n          if (autoSignIn) {\n            const urlToken = getParameterByName('refreshToken') || null\n            if (urlToken) {\n              try {\n                const session = await postRequest<NhostSession>('/token', {\n                  refreshToken: urlToken\n                })\n                return { session, error: null }\n              } catch (exception) {\n                error = (exception as { error: ErrorPayload }).error\n              }\n            } else {\n              const error = getParameterByName('error')\n              if (error) {\n                return Promise.reject<NhostSessionResponse>({\n                  session: null,\n                  error: {\n                    status: VALIDATION_ERROR_CODE,\n                    error,\n                    message: getParameterByName('errorDescription') || error\n                  }\n                })\n              }\n            }\n          }\n          const storageToken = await storageGetter(NHOST_REFRESH_TOKEN_KEY)\n          if (storageToken) {\n            try {\n              const session = await postRequest<NhostSession>('/token', {\n                refreshToken: storageToken\n              })\n              return { session, error: null }\n            } catch (exception) {\n              error = (exception as { error: ErrorPayload }).error\n              return Promise.reject<NhostSessionResponse>({ error })\n            }\n          }\n          if (!error) {\n            error = NO_REFRESH_TOKEN\n          }\n          return Promise.reject<NhostSessionResponse>({ error })\n        }\n      },\n      delays: {\n        RETRY_IMPORT_TOKEN_DELAY: ({ importTokenAttempts }) => {\n          if (importTokenAttempts < 5) {\n            return 1000\n          }\n          return 5000\n        }\n      }\n    }\n  )\n}\n","import { interpret } from 'xstate'\n\nimport { AuthMachine, AuthMachineOptions, createAuthMachine } from './machines'\nimport type { AuthInterpreter } from './types'\n\nexport type NhostClientOptions = AuthMachineOptions & {\n  /** @internal create and start xstate interpreter on creation. With React, it is started inside the Nhost provider */\n  start?: boolean\n}\n\n/**\n * @internal\n * This is a private API.\n */\nexport class AuthClient {\n  readonly backendUrl: string\n  readonly clientUrl: string\n  readonly machine: AuthMachine\n  private _interpreter?: AuthInterpreter\n  private _channel?: BroadcastChannel\n  private _subscriptions: Set<(client: AuthClient) => void> = new Set()\n\n  constructor({\n    clientStorageType = 'web',\n    autoSignIn = true,\n    autoRefreshToken = true,\n    start = true,\n    backendUrl,\n    clientUrl,\n    devTools,\n    ...defaultOptions\n  }: NhostClientOptions) {\n    this.backendUrl = backendUrl\n    this.clientUrl = clientUrl\n\n    this.machine = createAuthMachine({\n      ...defaultOptions,\n      backendUrl,\n      clientUrl,\n      clientStorageType,\n      autoSignIn,\n      autoRefreshToken\n    })\n\n    if (start) {\n      this.interpreter = interpret(this.machine, { devTools })\n      this.interpreter.start()\n    }\n\n    if (typeof window !== 'undefined' && autoSignIn) {\n      try {\n        // TODO listen to sign out\n        // TODO the same refresh token is used and refreshed by all tabs\n        // * Ideally, a single tab should autorefresh and share the new jwt\n        this._channel = new BroadcastChannel('nhost')\n        this._channel.addEventListener('message', (token) => {\n          const existingToken = this.interpreter?.state.context.refreshToken.value\n          if (this.interpreter && token.data !== existingToken) {\n            this.interpreter.send('TRY_TOKEN', { token: token.data })\n          }\n        })\n      } catch (error) {\n        // * BroadcastChannel is not available e.g. react-native\n      }\n    }\n  }\n\n  get interpreter(): AuthInterpreter | undefined {\n    return this._interpreter\n  }\n  set interpreter(interpreter: AuthInterpreter | undefined) {\n    this._interpreter = interpreter\n    if (interpreter) {\n      this._subscriptions.forEach((fn) => fn(this))\n    }\n  }\n\n  onStart(fn: (client: AuthClient) => void) {\n    if (this.interpreter) {\n      // * The interpreter is already available: we can add the listener straight ahead\n      fn(this)\n    } else {\n      // * The interpreter is not yet available: we add the listener to a queue that will be started when setting the interpreter\n      // * Note: in React, the Xstate interpreter does not start from the global state, but from the root component\n      this._subscriptions.add(fn)\n    }\n  }\n}\n","import { AuthClient, NhostClientOptions } from './client'\nconst isBrowser = typeof window !== 'undefined'\n\n/** @deprecated Not in use anymore. Use `clientStorageType: 'cookie'` instead */\nexport class AuthCookieClient extends AuthClient {\n  constructor({\n    ...options\n  }: Omit<\n    NhostClientOptions,\n    'clientStorageGetter' | 'clientStorageSetter' | 'clientStorage' | 'clientStorageType'\n  >) {\n    super({\n      ...options,\n      autoSignIn: isBrowser && options.autoSignIn,\n      autoRefreshToken: isBrowser && options.autoRefreshToken,\n      clientStorageType: 'cookie'\n    })\n  }\n}\n\n/** @deprecated Alias for {@link AuthCookieClient} */\nexport const AuthClientSSR = AuthCookieClient\n","import { startRegistration } from '@simplewebauthn/browser'\nimport {\n  PublicKeyCredentialCreationOptionsJSON,\n  RegistrationCredentialJSON\n} from '@simplewebauthn/typescript-types'\n\nimport { AuthClient } from '../client'\nimport { CodifiedError, ErrorPayload } from '../errors'\nimport { nhostApiClient } from '../hasura-auth'\nimport { SecurityKey } from '../types'\n\nimport { ActionErrorState, ActionLoadingState, ActionSuccessState } from './types'\nexport interface AddSecurityKeyHandlerResult extends ActionErrorState, ActionSuccessState {\n  key?: SecurityKey\n}\n\nexport interface AddSecurityKeyState extends AddSecurityKeyHandlerResult, ActionLoadingState {}\n\nexport const addSecurityKeyPromise = async (\n  { backendUrl, interpreter }: AuthClient,\n  nickname?: string\n): Promise<AddSecurityKeyHandlerResult> => {\n  const api = nhostApiClient(backendUrl)\n  try {\n    const { data: options } = await api.post<PublicKeyCredentialCreationOptionsJSON>(\n      '/user/webauthn/add',\n      {},\n      {\n        headers: {\n          authorization: `Bearer ${interpreter?.state.context.accessToken.value}`\n        }\n      }\n    )\n    let credential: RegistrationCredentialJSON\n    try {\n      credential = await startRegistration(options)\n    } catch (e) {\n      throw new CodifiedError(e as Error)\n    }\n    const { data: key } = await api.post<SecurityKey>(\n      '/user/webauthn/verify',\n      { credential, nickname },\n      {\n        headers: {\n          authorization: `Bearer ${interpreter?.state.context.accessToken.value}`\n        }\n      }\n    )\n    return { key, isError: false, error: null, isSuccess: true }\n  } catch (e) {\n    const { error } = e as { error: ErrorPayload }\n    return { isError: true, error, isSuccess: false }\n  }\n}\n","import { InterpreterFrom } from 'xstate'\n\nimport { ChangeEmailMachine } from '../machines'\nimport { ChangeEmailOptions } from '../types'\n\nimport { ActionErrorState, ActionLoadingState, NeedsEmailVerificationState } from './types'\nexport interface ChangeEmailHandlerResult extends ActionErrorState, NeedsEmailVerificationState {}\n\nexport interface ChangeEmailState extends ChangeEmailHandlerResult, ActionLoadingState {}\n\nexport const changeEmailPromise = async (\n  interpreter: InterpreterFrom<ChangeEmailMachine>,\n  email: string,\n  options?: ChangeEmailOptions\n): Promise<ChangeEmailHandlerResult> =>\n  new Promise<ChangeEmailHandlerResult>((resolve) => {\n    interpreter.send('REQUEST', {\n      email,\n      options\n    })\n    interpreter.onTransition((s) => {\n      if (s.matches({ idle: 'error' })) {\n        resolve({ error: s.context.error, isError: true, needsEmailVerification: false })\n      } else if (s.matches({ idle: 'success' })) {\n        resolve({ error: null, isError: false, needsEmailVerification: true })\n      }\n    })\n  })\n","import { InterpreterFrom } from 'xstate'\n\nimport { ChangePasswordMachine } from '../machines'\n\nimport { ActionErrorState, ActionLoadingState, ActionSuccessState } from './types'\n\nexport interface ChangePasswordState extends ChangePasswordHandlerResult, ActionLoadingState {}\n\nexport interface ChangePasswordHandlerResult extends ActionErrorState, ActionSuccessState {}\n\nexport const changePasswordPromise = async (\n  interpreter: InterpreterFrom<ChangePasswordMachine>,\n  password: string,\n  ticket?: string\n): Promise<ChangePasswordHandlerResult> =>\n  new Promise<ChangePasswordHandlerResult>((resolve) => {\n    interpreter.send('REQUEST', {\n      password, ticket\n    })\n    interpreter.onTransition((state) => {\n      if (state.matches({ idle: 'error' })) {\n        resolve({ error: state.context.error, isError: true, isSuccess: false })\n      } else if (state.matches({ idle: 'success' })) {\n        resolve({ error: null, isError: false, isSuccess: true })\n      }\n    })\n  })\n","import { InterpreterFrom } from 'xstate'\n\nimport { EnableMfadMachine } from '../machines'\n\nimport { ActionErrorState } from './types'\n\nexport interface GenerateQrCodeHandlerResult extends ActionErrorState {\n  qrCodeDataUrl: string\n  isGenerated: boolean\n}\n\nexport interface GenerateQrCodeState extends GenerateQrCodeHandlerResult {\n  isGenerating: boolean\n}\nexport interface ActivateMfaHandlerResult extends ActionErrorState {\n  isActivated: boolean\n}\n\nexport interface ActivateMfaState extends ActivateMfaHandlerResult {\n  isActivating: boolean\n}\n\nexport const generateQrCodePromise = (service: InterpreterFrom<EnableMfadMachine>) =>\n  new Promise<GenerateQrCodeHandlerResult>((resolve) => {\n    service.send('GENERATE')\n    service.onTransition((state) => {\n      if (state.matches('generated')) {\n        resolve({\n          error: null,\n          isError: false,\n          isGenerated: true,\n          qrCodeDataUrl: state.context.imageUrl || ''\n        })\n      } else if (state.matches({ idle: 'error' })) {\n        resolve({\n          error: state.context.error || null,\n          isError: true,\n          isGenerated: false,\n          qrCodeDataUrl: ''\n        })\n      }\n    })\n  })\nexport const activateMfaPromise = (service: InterpreterFrom<EnableMfadMachine>, code: string) =>\n  new Promise<ActivateMfaHandlerResult>((resolve) => {\n    service.send('ACTIVATE', {\n      activeMfaType: 'totp',\n      code\n    })\n    service.onTransition((state) => {\n      if (state.matches({ generated: 'activated' })) {\n        resolve({ error: null, isActivated: true, isError: false })\n      } else if (state.matches({ generated: { idle: 'error' } })) {\n        resolve({ error: state.context.error, isActivated: false, isError: true })\n      }\n    })\n  })\n","import { InterpreterFrom } from 'xstate'\n\nimport { ResetPasswordMachine } from '../machines'\nimport { ResetPasswordOptions } from '../types'\n\nimport { ActionErrorState, ActionLoadingState } from './types'\n\nexport interface ResetPasswordHandlerResult extends ActionErrorState {\n  /** Returns `true` when an email to reset the password has been sent */\n  isSent: boolean\n}\n\nexport interface ResetPasswordState extends ResetPasswordHandlerResult, ActionLoadingState {}\n\nexport const resetPasswordPromise = async (\n  interpreter: InterpreterFrom<ResetPasswordMachine>,\n  email: string,\n  options?: ResetPasswordOptions\n): Promise<ResetPasswordHandlerResult> =>\n  new Promise((resolve) => {\n    interpreter.send('REQUEST', {\n      email,\n      options\n    })\n    interpreter.onTransition((state) => {\n      if (state.matches({ idle: 'error' })) {\n        resolve({ error: state.context.error, isError: true, isSent: false })\n      } else if (state.matches({ idle: 'success' })) {\n        resolve({ error: null, isError: false, isSent: true })\n      }\n    })\n  })\n","import { InterpreterFrom } from 'xstate'\n\nimport { SendVerificationEmailMachine } from '../machines'\nimport { SendVerificationEmailOptions } from '../types'\n\nimport { ActionErrorState, ActionLoadingState } from './types'\n\nexport interface SendVerificationEmailHandlerResult extends ActionErrorState {\n  /** Returns `true` when a new verification email has been sent */\n  isSent: boolean\n}\n\nexport interface SendVerificationEmailState\n  extends ActionLoadingState,\n    SendVerificationEmailHandlerResult {}\n\nexport const sendVerificationEmailPromise = (\n  interpreter: InterpreterFrom<SendVerificationEmailMachine>,\n  email: string,\n  options?: SendVerificationEmailOptions\n): Promise<SendVerificationEmailHandlerResult> =>\n  new Promise<SendVerificationEmailHandlerResult>((resolve) => {\n    interpreter.send('REQUEST', {\n      email,\n      options\n    })\n    interpreter.onTransition((state) => {\n      if (state.matches({ idle: 'error' })) {\n        resolve({ error: state.context.error, isError: true, isSent: false })\n      } else if (state.matches({ idle: 'success' })) {\n        resolve({ error: null, isError: false, isSent: true })\n      }\n    })\n  })\n","import { USER_ALREADY_SIGNED_IN } from '../errors'\nimport { AuthInterpreter } from '../types'\n\nimport { ActionLoadingState, SessionActionHandlerResult } from './types'\n\nexport interface SignInAnonymousHandlerResult extends SessionActionHandlerResult {}\nexport interface SignInAnonymousState extends SignInAnonymousHandlerResult, ActionLoadingState {}\n\nexport const signInAnonymousPromise = (\n  interpreter: AuthInterpreter\n): Promise<SignInAnonymousHandlerResult> =>\n  new Promise((resolve) => {\n    const { changed } = interpreter.send('SIGNIN_ANONYMOUS')\n    if (!changed) {\n      resolve({\n        isSuccess: false,\n        isError: true,\n        error: USER_ALREADY_SIGNED_IN,\n        user: null,\n        accessToken: null\n      })\n    }\n    interpreter.onTransition((state) => {\n      if (state.matches({ authentication: 'signedIn' })) {\n        resolve({\n          isSuccess: true,\n          isError: false,\n          error: null,\n          user: state.context.user,\n          accessToken: state.context.accessToken.value\n        })\n      }\n      if (state.matches({ authentication: { signedOut: 'failed' } })) {\n        resolve({\n          isSuccess: false,\n          isError: true,\n          error: state.context.errors.authentication || null,\n          user: null,\n          accessToken: null\n        })\n      }\n    })\n  })\n","import { USER_ALREADY_SIGNED_IN } from '../errors'\nimport { AuthInterpreter } from '../types'\n\nimport {\n  ActionLoadingState,\n  NeedsEmailVerificationState,\n  SessionActionHandlerResult\n} from './types'\n\nexport interface SignInEmailPasswordHandlerResult\n  extends SessionActionHandlerResult,\n    NeedsEmailVerificationState {\n  needsMfaOtp: boolean\n  mfa: {\n    ticket: string\n  } | null\n}\n\nexport interface SignInEmailPasswordState\n  extends SignInEmailPasswordHandlerResult,\n    ActionLoadingState {}\n\nexport const signInEmailPasswordPromise = (\n  interpreter: AuthInterpreter,\n  email: string,\n  password: string\n) =>\n  new Promise<SignInEmailPasswordHandlerResult>((resolve) => {\n    const { changed, context } = interpreter.send('SIGNIN_PASSWORD', {\n      email,\n      password\n    })\n    if (!changed) {\n      return resolve({\n        accessToken: context.accessToken.value,\n        error: USER_ALREADY_SIGNED_IN,\n        isError: true,\n        isSuccess: false,\n        needsEmailVerification: false,\n        needsMfaOtp: false,\n        mfa: null,\n        user: context.user\n      })\n    }\n    interpreter.onTransition((state) => {\n      if (\n        state.matches({\n          authentication: { signedOut: 'noErrors' },\n          registration: { incomplete: 'needsEmailVerification' }\n        })\n      ) {\n        resolve({\n          accessToken: null,\n          error: null,\n          isError: false,\n          isSuccess: false,\n          needsEmailVerification: true,\n          needsMfaOtp: false,\n          mfa: null,\n          user: null\n        })\n      } else if (state.matches({ authentication: { signedOut: 'needsMfa' } })) {\n        resolve({\n          accessToken: null,\n          error: null,\n          isError: false,\n          isSuccess: false,\n          needsEmailVerification: false,\n          needsMfaOtp: true,\n          mfa: state.context.mfa,\n          user: null\n        })\n      } else if (state.matches({ authentication: { signedOut: 'failed' } })) {\n        resolve({\n          accessToken: null,\n          error: state.context.errors.authentication || null,\n          isError: true,\n          isSuccess: false,\n          needsEmailVerification: false,\n          needsMfaOtp: false,\n          mfa: null,\n          user: null\n        })\n      } else if (state.matches({ authentication: 'signedIn' })) {\n        resolve({\n          accessToken: state.context.accessToken.value,\n          error: null,\n          isError: false,\n          isSuccess: true,\n          needsEmailVerification: false,\n          needsMfaOtp: false,\n          mfa: null,\n          user: state.context.user\n        })\n      }\n    })\n  })\n","import { USER_ALREADY_SIGNED_IN } from '../errors'\nimport { AuthInterpreter, PasswordlessOptions } from '../types'\n\nimport { ActionErrorState, ActionLoadingState, ActionSuccessState } from './types'\nexport interface SignInEmailPasswordlessHandlerResult\n  extends ActionErrorState,\n    ActionSuccessState {}\nexport interface SignInEmailPasswordlessState\n  extends SignInEmailPasswordlessHandlerResult,\n    ActionLoadingState {}\n\nexport const signInEmailPasswordlessPromise = (\n  interpreter: AuthInterpreter,\n  email: string,\n  options?: PasswordlessOptions\n) =>\n  new Promise<SignInEmailPasswordlessHandlerResult>((resolve) => {\n    const { changed } = interpreter.send('PASSWORDLESS_EMAIL', {\n      email,\n      options\n    })\n    if (!changed) {\n      return resolve({\n        error: USER_ALREADY_SIGNED_IN,\n        isError: true,\n        isSuccess: false\n      })\n    }\n    interpreter.onTransition((state) => {\n      if (state.matches('registration.incomplete.failed')) {\n        resolve({\n          error: state.context.errors.registration || null,\n          isError: true,\n          isSuccess: false\n        })\n      } else if (\n        state.matches({\n          authentication: { signedOut: 'noErrors' },\n          registration: { incomplete: 'needsEmailVerification' }\n        })\n      ) {\n        resolve({ error: null, isError: false, isSuccess: true })\n      }\n    })\n  })\n","import { USER_ALREADY_SIGNED_IN } from '../errors'\nimport { AuthInterpreter } from '../types'\n\nimport {\n  ActionLoadingState,\n  NeedsEmailVerificationState,\n  SessionActionHandlerResult\n} from './types'\n\nexport interface SignInSecurityKeyPasswordlessHandlerResult\n  extends SessionActionHandlerResult,\n    NeedsEmailVerificationState {}\n\nexport interface SignInSecurityKeyPasswordlessState\n  extends SignInSecurityKeyPasswordlessHandlerResult,\n    ActionLoadingState {}\n\nexport const signInEmailSecurityKeyPromise = (interpreter: AuthInterpreter, email: string) =>\n  new Promise<SignInSecurityKeyPasswordlessHandlerResult>((resolve) => {\n    const { changed, context } = interpreter.send({ type: 'SIGNIN_SECURITY_KEY_EMAIL', email })\n    if (!changed) {\n      return resolve({\n        accessToken: context.accessToken.value,\n        error: USER_ALREADY_SIGNED_IN,\n        isError: true,\n        isSuccess: false,\n        needsEmailVerification: false,\n        user: context.user\n      })\n    }\n    interpreter.onTransition((state) => {\n      if (\n        state.matches({\n          authentication: { signedOut: 'noErrors' },\n          registration: { incomplete: 'needsEmailVerification' }\n        })\n      ) {\n        resolve({\n          accessToken: null,\n          error: null,\n          isError: false,\n          isSuccess: false,\n          needsEmailVerification: true,\n          user: null\n        })\n      } else if (state.matches({ authentication: { signedOut: 'failed' } })) {\n        resolve({\n          accessToken: null,\n          error: state.context.errors.authentication || null,\n          isError: true,\n          isSuccess: false,\n          needsEmailVerification: false,\n          user: null\n        })\n      } else if (state.matches({ authentication: 'signedIn' })) {\n        resolve({\n          accessToken: state.context.accessToken.value,\n          error: null,\n          isError: false,\n          isSuccess: true,\n          needsEmailVerification: false,\n          user: state.context.user\n        })\n      }\n    })\n  })\n","import { USER_ALREADY_SIGNED_IN } from '../errors'\nimport { AuthInterpreter } from '../types'\n\nimport { ActionLoadingState, SessionActionHandlerResult } from './types'\n\nexport interface SignInMfaTotpHandlerResult extends SessionActionHandlerResult {}\n\nexport interface SignInMfaTotpState extends SignInMfaTotpHandlerResult, ActionLoadingState {}\n\nexport const signInMfaTotpPromise = (interpreter: AuthInterpreter, otp: string, ticket?: string) =>\n  new Promise<SignInMfaTotpHandlerResult>((resolve) => {\n    const { changed, context } = interpreter.send('SIGNIN_MFA_TOTP', {\n      otp,\n      ticket\n    })\n    if (!changed) {\n      return resolve({\n        accessToken: context.accessToken.value,\n        error: USER_ALREADY_SIGNED_IN,\n        isError: true,\n        isSuccess: false,\n        user: context.user\n      })\n    }\n    interpreter.onTransition((state) => {\n      if (state.matches({ authentication: { signedOut: 'failed' } })) {\n        resolve({\n          accessToken: null,\n          error: state.context.errors.authentication || null,\n          isError: true,\n          isSuccess: false,\n          user: null\n        })\n      } else if (state.matches({ authentication: 'signedIn' })) {\n        resolve({\n          accessToken: state.context.accessToken.value,\n          error: null,\n          isError: false,\n          isSuccess: true,\n          user: state.context.user\n        })\n      }\n    })\n  })\n","import { USER_ALREADY_SIGNED_IN } from '../errors'\nimport { AuthInterpreter, PasswordlessOptions } from '../types'\n\nimport { ActionErrorState, ActionLoadingState, ActionSuccessState } from './types'\n\nexport interface SignInSmsPasswordlessState\n  extends SignInSmsPasswordlessHandlerResult,\n    ActionLoadingState {}\n\nexport interface SignInSmsPasswordlessHandlerResult extends ActionErrorState, ActionSuccessState {\n  /**\n   * Returns true when the one-time password has been sent over by SMS, and the user needs to send it back to complete sign-in.\n   */\n  needsOtp: boolean\n}\n\nexport const signInSmsPasswordlessPromise = (\n  interpreter: AuthInterpreter,\n  phoneNumber: string,\n  options?: PasswordlessOptions\n) =>\n  new Promise<SignInSmsPasswordlessHandlerResult>((resolve) => {\n    const { changed } = interpreter.send('PASSWORDLESS_SMS', { phoneNumber, options })\n    if (!changed) {\n      return resolve({\n        error: USER_ALREADY_SIGNED_IN,\n        isError: true,\n        isSuccess: false,\n        needsOtp: false\n      })\n    }\n    interpreter.onTransition((state) => {\n      if (state.matches('registration.incomplete.needsOtp')) {\n        resolve({\n          error: null,\n          isError: false,\n          isSuccess: false,\n          needsOtp: true\n        })\n      } else if (state.matches('registration.incomplete.failed')) {\n        resolve({\n          error: state.context.errors.authentication || null,\n          isError: true,\n          isSuccess: false,\n          needsOtp: false\n        })\n      }\n    })\n  })\n","import { USER_ALREADY_SIGNED_IN } from '../errors'\nimport { AuthInterpreter } from '../types'\n\nimport { ActionLoadingState, SessionActionHandlerResult } from './types'\n\nexport interface SignInSmsPasswordlessOtpHandlerResult extends SessionActionHandlerResult {}\nexport interface SignInSmsPasswordlessOtpState\n  extends SignInSmsPasswordlessOtpHandlerResult,\n    ActionLoadingState {}\n\nexport const signInSmsPasswordlessOtpPromise = (\n  interpreter: AuthInterpreter,\n  phoneNumber: string,\n  otp: string\n) =>\n  new Promise<SignInSmsPasswordlessOtpHandlerResult>((resolve) => {\n    const { changed } = interpreter.send({ type: 'PASSWORDLESS_SMS_OTP', phoneNumber, otp })\n    if (!changed) {\n      return resolve({\n        error: USER_ALREADY_SIGNED_IN,\n        isError: true,\n        isSuccess: false,\n        user: null,\n        accessToken: null\n      })\n    }\n    interpreter.onTransition((state) => {\n      if (state.matches({ authentication: 'signedIn' })) {\n        resolve({\n          error: null,\n          isError: false,\n          isSuccess: true,\n          user: state.context.user,\n          accessToken: state.context.accessToken.value\n        })\n      } else if (state.matches({ registration: { incomplete: 'failed' } })) {\n        resolve({\n          error: state.context.errors.authentication || null,\n          isError: true,\n          isSuccess: false,\n          user: null,\n          accessToken: null\n        })\n      }\n    })\n  })\n","import { USER_UNAUTHENTICATED } from '../errors'\nimport { AuthInterpreter } from '../types'\n\nimport { ActionErrorState, ActionLoadingState, ActionSuccessState } from './types'\n\nexport interface SignOutlessHandlerResult extends ActionErrorState, ActionSuccessState {}\nexport interface SignOutlessState extends SignOutlessHandlerResult, ActionLoadingState {}\n\nexport const signOutPromise = async (\n  interpreter: AuthInterpreter,\n  all?: boolean\n): Promise<SignOutlessHandlerResult> =>\n  new Promise<SignOutlessHandlerResult>((resolve) => {\n    const { event } = interpreter.send('SIGNOUT', { all })\n    if (event.type !== 'SIGNED_OUT') {\n      return resolve({ isSuccess: false, isError: true, error: USER_UNAUTHENTICATED })\n    }\n    interpreter.onTransition((state) => {\n      if (state.matches({ authentication: { signedOut: 'success' } })) {\n        resolve({ isSuccess: true, isError: false, error: null })\n      } else if (state.matches('authentication.signedOut.failed')) {\n        resolve({ isSuccess: false, isError: true, error: state.context.errors.signout || null })\n      }\n    })\n  })\n","import { USER_ALREADY_SIGNED_IN } from '../errors'\nimport { AuthInterpreter, SignUpOptions } from '../types'\n\nimport {\n  ActionLoadingState,\n  NeedsEmailVerificationState,\n  SessionActionHandlerResult\n} from './types'\n\nexport interface SignUpEmailPasswordHandlerResult\n  extends SessionActionHandlerResult,\n    NeedsEmailVerificationState {}\n\nexport interface SignUpEmailPasswordState\n  extends SignUpEmailPasswordHandlerResult,\n    ActionLoadingState {}\n\nexport const signUpEmailPasswordPromise = (\n  interpreter: AuthInterpreter,\n  email: string,\n  password: string,\n  options?: SignUpOptions\n): Promise<SignUpEmailPasswordHandlerResult> =>\n  new Promise<SignUpEmailPasswordHandlerResult>((resolve) => {\n    const { changed, context } = interpreter.send('SIGNUP_EMAIL_PASSWORD', {\n      email,\n      password,\n      options\n    })\n    if (!changed) {\n      return resolve({\n        error: USER_ALREADY_SIGNED_IN,\n        accessToken: context.accessToken.value,\n        isError: true,\n        isSuccess: false,\n        needsEmailVerification: false,\n        user: context.user\n      })\n    }\n    interpreter.onTransition((state) => {\n      if (state.matches('registration.incomplete.failed')) {\n        resolve({\n          accessToken: null,\n          error: state.context.errors.registration || null,\n          isError: true,\n          isSuccess: false,\n          needsEmailVerification: false,\n          user: null\n        })\n      } else if (\n        state.matches({\n          authentication: { signedOut: 'noErrors' },\n          registration: { incomplete: 'needsEmailVerification' }\n        })\n      ) {\n        resolve({\n          accessToken: null,\n          error: null,\n          isError: false,\n          isSuccess: false,\n          needsEmailVerification: true,\n          user: null\n        })\n      } else if (state.matches({ authentication: 'signedIn', registration: 'complete' })) {\n        resolve({\n          accessToken: state.context.accessToken.value,\n          error: null,\n          isError: false,\n          isSuccess: true,\n          needsEmailVerification: false,\n          user: state.context.user\n        })\n      }\n    })\n  })\n","import { USER_ALREADY_SIGNED_IN } from '../errors'\nimport { AuthInterpreter, SignUpSecurityKeyOptions } from '../types'\n\nimport {\n  ActionLoadingState,\n  NeedsEmailVerificationState,\n  SessionActionHandlerResult\n} from './types'\n\nexport interface SignUpSecurityKeyHandlerResult\n  extends SessionActionHandlerResult,\n    NeedsEmailVerificationState {}\n\nexport interface SignUpSecurityKeyState\n  extends SignUpSecurityKeyHandlerResult,\n    ActionLoadingState {}\n\nexport const signUpEmailSecurityKeyPromise = (\n  interpreter: AuthInterpreter,\n  email: string,\n  options?: SignUpSecurityKeyOptions\n): Promise<SignUpSecurityKeyHandlerResult> =>\n  new Promise<SignUpSecurityKeyHandlerResult>((resolve) => {\n    const { changed, context } = interpreter.send('SIGNUP_SECURITY_KEY', {\n      email,\n      options\n    })\n    if (!changed) {\n      return resolve({\n        error: USER_ALREADY_SIGNED_IN,\n        accessToken: context.accessToken.value,\n        isError: true,\n        isSuccess: false,\n        needsEmailVerification: false,\n        user: context.user\n      })\n    }\n    interpreter.onTransition((state) => {\n      if (state.matches('registration.incomplete.failed')) {\n        resolve({\n          accessToken: null,\n          error: state.context.errors.registration || null,\n          isError: true,\n          isSuccess: false,\n          needsEmailVerification: false,\n          user: null\n        })\n      } else if (\n        state.matches({\n          authentication: { signedOut: 'noErrors' },\n          registration: { incomplete: 'needsEmailVerification' }\n        })\n      ) {\n        resolve({\n          accessToken: null,\n          error: null,\n          isError: false,\n          isSuccess: false,\n          needsEmailVerification: true,\n          user: null\n        })\n      } else if (state.matches({ authentication: 'signedIn', registration: 'complete' })) {\n        resolve({\n          accessToken: state.context.accessToken.value,\n          error: null,\n          isError: false,\n          isSuccess: true,\n          needsEmailVerification: false,\n          user: state.context.user\n        })\n      }\n    })\n  })\n"],"names":["utf8StringToBuffer","value","bufferToBase64URLString","buffer","bytes","str","charCode","base64URLStringToBuffer","base64URLString","base64","padLength","padded","binary","i","browserSupportsWebAuthn","toPublicKeyCredentialDescriptor","descriptor","id","isValidDomain","hostname","WebAuthnError","message","name","identifyRegistrationError","error","options","_a","_b","publicKey","param","effectiveDomain","WebAuthnAbortService","webauthnAbortService","startRegistration","creationOptionsJSON","credential","err","rawId","response","type","credentialJSON","bufferToUTF8String","browserSupportsWebAuthnAutofill","globalPublicKeyCredential","identifyAuthenticationError","startAuthentication","requestOptionsJSON","useBrowserAutofill","allowCredentials","userHandle","NHOST_REFRESH_TOKEN_KEY","NHOST_JWT_EXPIRES_AT_KEY","MIN_PASSWORD_LENGTH","TOKEN_REFRESH_MARGIN","REFRESH_TOKEN_RETRY_INTERVAL","REFRESH_TOKEN_RETRY_MAX_ATTEMPTS","NETWORK_ERROR_CODE","OTHER_ERROR_CODE","VALIDATION_ERROR_CODE","STATE_ERROR_CODE","CodifiedError","original","INVALID_EMAIL_ERROR","INVALID_MFA_TYPE_ERROR","INVALID_MFA_CODE_ERROR","INVALID_PASSWORD_ERROR","INVALID_PHONE_NUMBER_ERROR","INVALID_MFA_TICKET_ERROR","NO_MFA_TICKET_ERROR","NO_REFRESH_TOKEN","TOKEN_REFRESHER_RUNNING_ERROR","USER_ALREADY_SIGNED_IN","USER_UNAUTHENTICATED","USER_NOT_ANONYMOUS","EMAIL_NEEDS_VERIFICATION","INVALID_REFRESH_TOKEN","INVALID_SIGN_IN_METHOD","nhostApiClient","backendUrl","client","axios","_e","_d","_c","_i","_h","_f","_g","_k","_j","isBrowser","inMemoryLocalStorage","defaultClientStorageGetter","key","defaultClientStorageSetter","localStorageGetter","clientStorageType","clientStorage","Cookies","localStorageSetter","encodeQueryParameters","baseUrl","parameters","encodedParameters","stringValue","rewriteRedirectTo","clientUrl","redirectTo","otherOptions","baseClientUrl","clientParams","url","additionalParams","combinedParams","pathName","getParameterByName","regex","results","removeParameterFromWindow","location","search","hash","isValidEmail","email","isValidPassword","password","isValidPhoneNumber","phoneNumber","isValidTicket","ticket","INITIAL_MACHINE_CONTEXT","createChangeEmailMachine","interpreter","api","createMachine","assign","_","send","ctx","createChangePasswordMachine","createEnableMfaMachine","imageUrl","totpSecret","code","activeMfaType","data","createResetPasswordMachine","createSendVerificationEmailMachine","createAuthMachine","clientStorageGetter","clientStorageSetter","refreshIntervalTime","autoRefreshToken","autoSignIn","storageGetter","storageSetter","postRequest","config","importTokenAttempts","accessTokenExpiresIn","accessToken","nextRefresh","refreshToken","e","errors","context","expiresAt","otp","event","nickname","webAuthnOptions","urlToken","exception","storageToken","AuthClient","start","devTools","defaultOptions","interpret","token","existingToken","fn","AuthCookieClient","AuthClientSSR","addSecurityKeyPromise","changeEmailPromise","resolve","s","changePasswordPromise","state","generateQrCodePromise","service","activateMfaPromise","resetPasswordPromise","sendVerificationEmailPromise","signInAnonymousPromise","changed","signInEmailPasswordPromise","signInEmailPasswordlessPromise","signInEmailSecurityKeyPromise","signInMfaTotpPromise","signInSmsPasswordlessPromise","signInSmsPasswordlessOtpPromise","signOutPromise","all","signUpEmailPasswordPromise","signUpEmailSecurityKeyPromise"],"mappings":"6QACA,SAASA,GAAmBC,EAAO,CAC/B,OAAO,IAAI,YAAW,EAAG,OAAOA,CAAK,CACzC,CAEA,SAASC,EAAwBC,EAAQ,CACrC,MAAMC,EAAQ,IAAI,WAAWD,CAAM,EACnC,IAAIE,EAAM,GACV,UAAWC,KAAYF,EACnBC,GAAO,OAAO,aAAaC,CAAQ,EAGvC,OADqB,KAAKD,CAAG,EACT,QAAQ,MAAO,GAAG,EAAE,QAAQ,MAAO,GAAG,EAAE,QAAQ,KAAM,EAAE,CAChF,CAEA,SAASE,EAAwBC,EAAiB,CAC9C,MAAMC,EAASD,EAAgB,QAAQ,KAAM,GAAG,EAAE,QAAQ,KAAM,GAAG,EAC7DE,GAAa,EAAKD,EAAO,OAAS,GAAM,EACxCE,EAASF,EAAO,OAAOA,EAAO,OAASC,EAAW,GAAG,EACrDE,EAAS,KAAKD,CAAM,EACpBR,EAAS,IAAI,YAAYS,EAAO,MAAM,EACtCR,EAAQ,IAAI,WAAWD,CAAM,EACnC,QAASU,EAAI,EAAGA,EAAID,EAAO,OAAQC,IAC/BT,EAAMS,GAAKD,EAAO,WAAWC,CAAC,EAElC,OAAOV,CACX,CAEA,SAASW,GAA0B,CAC/B,OAAS,QAAW,KAA4B,OAAS,OAAO,uBAAyB,QAAa,OAAO,OAAO,qBAAwB,UAChJ,CAEA,SAASC,EAAgCC,EAAY,CACjD,KAAM,CAAE,GAAAC,CAAI,EAAGD,EACf,MAAO,CACH,GAAGA,EACH,GAAIT,EAAwBU,CAAE,EAC9B,WAAYD,EAAW,UAC/B,CACA,CAEA,SAASE,EAAcC,EAAU,CAC7B,OAAQA,IAAa,aAAe,0CAA0C,KAAKA,CAAQ,CAC/F,CAEA,MAAMC,UAAsB,KAAM,CAC9B,YAAYC,EAASC,EAAO,gBAAiB,CACzC,MAAMD,CAAO,EACb,KAAK,KAAOC,CACf,CACL,CAEA,SAASC,GAA0B,CAAE,MAAAC,EAAO,QAAAC,GAAY,CACpD,IAAIC,EAAIC,EACR,KAAM,CAAE,UAAAC,CAAW,EAAGH,EACtB,GAAI,CAACG,EACD,MAAM,MAAM,iDAAiD,EAEjE,GAAIJ,EAAM,OAAS,cACf,GAAIC,EAAQ,SAAW,IAAI,gBAAe,EAAG,OACzC,OAAO,IAAIL,EAAc,iDAAkD,YAAY,UAGtFI,EAAM,OAAS,kBAAmB,CACvC,KAAME,EAAKE,EAAU,0BAA4B,MAAQF,IAAO,OAAS,OAASA,EAAG,sBAAwB,GACzG,OAAO,IAAIN,EAAc,qFAAsF,iBAAiB,EAE/H,KAAMO,EAAKC,EAAU,0BAA4B,MAAQD,IAAO,OAAS,OAASA,EAAG,oBAAsB,WAC5G,OAAO,IAAIP,EAAc,6EAA8E,iBAAiB,CAE/H,KACI,IAAII,EAAM,OAAS,oBACpB,OAAO,IAAIJ,EAAc,8CAA+C,mBAAmB,EAE1F,GAAII,EAAM,OAAS,kBACpB,OAAO,IAAIJ,EAAc,8DAA+D,iBAAiB,EAExG,GAAII,EAAM,OAAS,oBAEpB,OAD8BI,EAAU,iBAAiB,OAAOC,GAASA,EAAM,OAAS,YAAY,EAC1E,SAAW,EAC1B,IAAIT,EAAc,wDAAyD,mBAAmB,EAElG,IAAIA,EAAc,wFAAyF,mBAAmB,EAEpI,GAAII,EAAM,OAAS,gBAAiB,CACrC,MAAMM,EAAkB,OAAO,SAAS,SACxC,GAAKZ,EAAcY,CAAe,GAG7B,GAAIF,EAAU,GAAG,KAAOE,EACzB,OAAO,IAAIV,EAAc,cAAcQ,EAAU,GAAG,iCAAkC,eAAe,MAHrG,QAAO,IAAIR,EAAc,GAAG,OAAO,SAAS,gCAAiC,eAAe,CAKnG,SACQI,EAAM,OAAS,aACpB,GAAII,EAAU,KAAK,GAAG,WAAa,GAAKA,EAAU,KAAK,GAAG,WAAa,GACnE,OAAO,IAAIR,EAAc,8CAA+C,WAAW,UAGlFI,EAAM,OAAS,eACpB,OAAO,IAAIJ,EAAc,sGAAuG,cAAc,EAElJ,OAAOI,CACX,CAEA,MAAMO,EAAqB,CACvB,sBAAuB,CACnB,OAAI,KAAK,YACL,KAAK,WAAW,QAEpB,KAAK,WAAa,IAAI,gBACf,KAAK,WAAW,MAC1B,CACD,OAAQ,CACJ,KAAK,WAAa,MACrB,CACL,CACA,MAAMC,EAAuB,IAAID,GAEjC,eAAeE,EAAkBC,EAAqB,CAClD,GAAI,CAACpB,EAAuB,EACxB,MAAM,IAAI,MAAM,2CAA2C,EAW/D,MAAMW,EAAU,CAAE,UATA,CACd,GAAGS,EACH,UAAW3B,EAAwB2B,EAAoB,SAAS,EAChE,KAAM,CACF,GAAGA,EAAoB,KACvB,GAAIlC,GAAmBkC,EAAoB,KAAK,EAAE,CACrD,EACD,mBAAoBA,EAAoB,mBAAmB,IAAInB,CAA+B,CACtG,GAEIU,EAAQ,OAASO,EAAqB,uBACtC,IAAIG,EACJ,GAAI,CACAA,EAAc,MAAM,UAAU,YAAY,OAAOV,CAAO,CAC3D,OACMW,EAAP,CACI,MAAMb,GAA0B,CAAE,MAAOa,EAAK,QAAAX,CAAS,CAAA,CAC1D,QACO,CACJO,EAAqB,MAAK,CAC7B,CACD,GAAI,CAACG,EACD,MAAM,IAAI,MAAM,gCAAgC,EAEpD,KAAM,CAAE,GAAAlB,EAAI,MAAAoB,EAAO,SAAAC,EAAU,KAAAC,CAAI,EAAKJ,EAChCK,EAAiB,CACnB,GAAAvB,EACA,MAAOf,EAAwBmC,CAAK,EACpC,SAAU,CACN,kBAAmBnC,EAAwBoC,EAAS,iBAAiB,EACrE,eAAgBpC,EAAwBoC,EAAS,cAAc,CAClE,EACD,KAAAC,EACA,uBAAwBJ,EAAW,0BAA2B,EAC9D,wBAAyBA,EAAW,uBAC5C,EACI,OAAI,OAAOG,EAAS,eAAkB,aAClCE,EAAe,WAAaF,EAAS,iBAElCE,CACX,CAEA,SAASC,GAAmBxC,EAAO,CAC/B,OAAO,IAAI,YAAY,OAAO,EAAE,OAAOA,CAAK,CAChD,CAEA,eAAeyC,IAAkC,CAC7C,GAAI,UAAU,YAAY,8BACtB,MAAO,GAEX,MAAMC,EAA4B,OAAO,oBACzC,OAAQA,EAA0B,kCAAoC,QAClEA,EAA0B,gCAA+B,CACjE,CAEA,SAASC,GAA4B,CAAE,MAAApB,EAAO,QAAAC,GAAY,CACtD,IAAIC,EACJ,KAAM,CAAE,UAAAE,CAAW,EAAGH,EACtB,GAAI,CAACG,EACD,MAAM,MAAM,iDAAiD,EAEjE,GAAIJ,EAAM,OAAS,cACf,GAAIC,EAAQ,SAAW,IAAI,gBAAe,EAAG,OACzC,OAAO,IAAIL,EAAc,mDAAoD,YAAY,MAG5F,IAAII,EAAM,OAAS,kBACpB,MAAK,GAAAE,EAAKE,EAAU,oBAAsB,MAAQF,IAAO,SAAkBA,EAAG,OACnE,IAAIN,EAAc,uEAAwE,iBAAiB,EAE/G,IAAIA,EAAc,gEAAiE,iBAAiB,EAE1G,GAAII,EAAM,OAAS,gBAAiB,CACrC,MAAMM,EAAkB,OAAO,SAAS,SACxC,GAAKZ,EAAcY,CAAe,GAG7B,GAAIF,EAAU,OAASE,EACxB,OAAO,IAAIV,EAAc,cAAcQ,EAAU,mCAAoC,eAAe,MAHpG,QAAO,IAAIR,EAAc,GAAG,OAAO,SAAS,gCAAiC,eAAe,CAKnG,SACQI,EAAM,OAAS,eACpB,OAAO,IAAIJ,EAAc,+GAAgH,cAAc,EAE3J,OAAOI,CACX,CAEA,eAAeqB,GAAoBC,EAAoBC,EAAqB,GAAO,CAC/E,IAAIrB,EAAIC,EACR,GAAI,CAACb,EAAuB,EACxB,MAAM,IAAI,MAAM,2CAA2C,EAE/D,IAAIkC,IACEtB,EAAKoB,EAAmB,oBAAsB,MAAQpB,IAAO,OAAS,OAASA,EAAG,UAAY,IAChGsB,GAAoBrB,EAAKmB,EAAmB,oBAAsB,MAAQnB,IAAO,OAAS,OAASA,EAAG,IAAIZ,CAA+B,GAE7I,MAAMa,EAAY,CACd,GAAGkB,EACH,UAAWvC,EAAwBuC,EAAmB,SAAS,EAC/D,iBAAAE,CACR,EACUvB,EAAU,CAAA,EAChB,GAAIsB,EAAoB,CACpB,GAAI,CAAE,MAAML,GAA+B,EACvC,MAAM,MAAM,4CAA4C,EAG5D,GADuB,SAAS,iBAAiB,iCAAiC,EAC/D,OAAS,EACxB,MAAM,MAAM,2EAA2E,EAE3FjB,EAAQ,UAAY,cACpBG,EAAU,iBAAmB,EAChC,CACDH,EAAQ,UAAYG,EACpBH,EAAQ,OAASO,EAAqB,uBACtC,IAAIG,EACJ,GAAI,CACAA,EAAc,MAAM,UAAU,YAAY,IAAIV,CAAO,CACxD,OACMW,EAAP,CACI,MAAMQ,GAA4B,CAAE,MAAOR,EAAK,QAAAX,CAAS,CAAA,CAC5D,QACO,CACJO,EAAqB,MAAK,CAC7B,CACD,GAAI,CAACG,EACD,MAAM,IAAI,MAAM,kCAAkC,EAEtD,KAAM,CAAE,GAAAlB,EAAI,MAAAoB,EAAO,SAAAC,EAAU,KAAAC,CAAI,EAAKJ,EACtC,IAAIc,EACJ,OAAIX,EAAS,aACTW,EAAaR,GAAmBH,EAAS,UAAU,GAEhD,CACH,GAAArB,EACA,MAAOf,EAAwBmC,CAAK,EACpC,SAAU,CACN,kBAAmBnC,EAAwBoC,EAAS,iBAAiB,EACrE,eAAgBpC,EAAwBoC,EAAS,cAAc,EAC/D,UAAWpC,EAAwBoC,EAAS,SAAS,EACrD,WAAAW,CACH,EACD,KAAAV,EACA,uBAAwBJ,EAAW,0BAA2B,EAC9D,wBAAyBA,EAAW,uBAC5C,CACA,CC5QO,MAAMe,EAA0B,oBAC1BC,EAA2B,6BAE3BC,EAAsB,EAMtBC,EAAuB,IAGvBC,GAA+B,EAK/BC,GAAmC,GCjBnCC,EAAqB,EACrBC,EAAmB,EACnBC,EAAwB,GACxBC,EAAmB,GAczB,MAAMC,UAAsB,KAAM,CAEvC,YAAYC,EAAgC,CAC1C,MAAMA,EAAS,OAAO,EAChB,MAAA,kBAAkB,KAAM,KAAK,WAAW,EAC1CA,aAAoB,OACtB,KAAK,KAAOA,EAAS,KACrB,KAAK,MAAQ,CACX,MAAOA,EAAS,KAChB,OAAQJ,EACR,QAASI,EAAS,OAAA,IAGpB,KAAK,KAAOA,EAAS,MACrB,KAAK,MAAQA,EAEjB,CACF,CAKO,MAAMC,EAA8C,CACzD,OAAQJ,EACR,MAAO,gBACP,QAAS,gCACX,EAEaK,GAAiD,CAC5D,OAAQL,EACR,MAAO,mBACP,QAAS,qBACX,EAEaM,GAAiD,CAC5D,OAAQN,EACR,MAAO,mBACP,QAAS,qBACX,EAEaO,EAAiD,CAC5D,OAAQP,EACR,MAAO,mBACP,QAAS,mCACX,EAEaQ,EAAqD,CAChE,OAAQR,EACR,MAAO,uBACP,QAAS,uCACX,EAEaS,GAAmD,CAC9D,OAAQT,EACR,MAAO,qBACP,QAAS,uBACX,EAEaU,GAA8C,CACzD,OAAQV,EACR,MAAO,gBACP,QAAS,iCACX,EAEaW,GAA2C,CACtD,OAAQX,EACR,MAAO,mBACP,QAAS,oCACX,EAEaY,GAA8C,CACzD,OAAQX,EACR,MAAO,4BACP,QACE,4GACJ,EAEaY,EAAuC,CAClD,OAAQZ,EACR,MAAO,oBACP,QAAS,2BACX,EAEaa,GAAqC,CAChD,OAAQb,EACR,MAAO,uBACP,QAAS,2BACX,EAEac,GAAmC,CAC9C,OAAQd,EACR,MAAO,qBACP,QAAS,uBACX,EAEae,GAAyC,CACpD,OAAQf,EACR,MAAO,kBACP,QAAS,0BACX,EAEagB,GAAwB,CACnC,OAAQjB,EACR,MAAO,wBACP,QAAS,kCACX,EAEakB,GAAyB,CACpC,OAAQnB,EACR,MAAO,yBACP,QAAS,wBACX,EC5HaoB,EAAkBC,GAAuB,CACpD,MAAMC,EAASC,GAAAA,QAAM,OAAO,CAAE,QAASF,EAAY,EAEnD,OAAAC,EAAO,aAAa,SAAS,IAC1BzC,GAAaA,EACbd,GACC,2BAAA,eAAQ,OAAgC,CACtC,MAAO,CACL,SACEyD,GAAAC,GAAAC,GAAAxD,GAAAD,EAAAF,EAAM,WAAN,YAAAE,EAAgB,OAAhB,YAAAC,EAAsB,UAAtB,KAAAwD,EACA3D,EAAM,UADN,KAAA0D,EAEA1D,EAAM,QAAQ,eAFd,KAAAyD,EAGA,KAAK,UAAUzD,CAAK,EACtB,QAAQ4D,GAAAC,GAAAC,EAAA9D,EAAM,WAAN,YAAA8D,EAAgB,SAAhB,KAAAD,GAA0BE,EAAA/D,EAAM,WAAN,YAAA+D,EAAgB,KAAK,aAA/C,KAAAH,EAA6D5B,EACrE,QAAOgC,GAAAC,EAAAjE,EAAM,WAAN,YAAAiE,EAAgB,OAAhB,YAAAD,EAAsB,QAAShE,EAAM,QAAQ,YAAc,SACpE,CAAA,CACD,EAAA,EAEEuD,CACT,ECjBMW,EAAY,OAAO,QAAW,YAE9BC,MAAuD,IAEvDC,GAA6CC,GAAQ,OACrD,OAAAH,GAAa,OAAO,cAAiB,YAAoB,aAAa,QAAQG,CAAG,GACzEnE,EAAAiE,EAAqB,IAAIE,CAAG,IAA5B,KAAAnE,EAAiC,IAC/C,EAEMoE,GAA4C,CAACD,EAAK5F,IAAU,CAC5DyF,GAAa,OAAO,cAAiB,YACnCzF,EACW,aAAA,QAAQ4F,EAAK5F,CAAK,EAE/B,aAAa,WAAW4F,CAAG,EAGzB5F,EACmB0F,EAAA,IAAIE,EAAK5F,CAAK,EAC1B0F,EAAqB,IAAIE,CAAG,GACrCF,EAAqB,OAAOE,CAAG,CAGrC,EAEaE,GAAqB,CAChCC,EACAC,IACkB,CACd,GAAAD,IAAsB,gBAAkBA,IAAsB,MACzD,OAAAJ,GAET,GAAII,IAAsB,SACxB,OAAQH,GAAQ,OACd,OAAIH,IACKQ,EAAAA,UAAQ,IAAIL,CAAG,IAAfK,KAAAA,EAEA,IACT,EAGJ,GAAI,CAACD,EACG,MAAA,MACJ,gCAAgCD,wCAAA,EAGpC,GAAIA,IAAsB,eACxB,OAAQH,GAAQ,OAAA,OAAAnE,EAAAuE,EAAc,UAAd,YAAAvE,EAAA,KAAAuE,EAAwBJ,IAE1C,GAAIG,IAAsB,YACxB,OAAQH,GAAQ,OAAA,OAAAnE,EAAAuE,EAAc,MAAd,YAAAvE,EAAA,KAAAuE,EAAoB,CAAE,IAAAJ,CAAK,IAE7C,GAAIG,IAAsB,sBACxB,OAAQH,GAAQ,OAAA,OAAAnE,EAAAuE,EAAc,eAAd,YAAAvE,EAAA,KAAAuE,EAA6BJ,IAE/C,GAAIG,IAAsB,SAAU,CAC9B,GAAAC,EAAc,SAAWA,EAAc,WACzC,OAAOA,EAAc,QAEvB,GAAIA,EAAc,aAChB,OAAOA,EAAc,aAEjB,MAAA,MACJ,2IAAA,CAEJ,CACM,MAAA,MAAM,yBAAyBD,GAAmB,CAC1D,EAEaG,GAAqB,CAChCH,EACAC,IACkB,CACd,GAAAD,IAAsB,gBAAkBA,IAAsB,MACzD,OAAAF,GAET,GAAIE,IAAsB,SACjB,MAAA,CAACH,EAAK5F,IAAU,CACjByF,IACEzF,EAGFiG,EAAA,QAAQ,IAAIL,EAAK5F,EAAO,CAAE,QAAS,GAAI,EAEvCiG,UAAQ,OAAOL,CAAG,EAEtB,EAGJ,GAAI,CAACI,EACG,MAAA,MACJ,gCAAgCD,uCAAA,EAGpC,GAAIA,IAAsB,eACjB,MAAA,CAACH,EAAK5F,IACX,SAAA,OAAAA,GAAQyB,EAAAuE,EAAc,UAAd,YAAAvE,EAAA,KAAAuE,EAAwBJ,EAAK5F,IAAS0B,EAAAsE,EAAc,aAAd,YAAAtE,EAAA,KAAAsE,EAA2BJ,IAE7E,GAAIG,IAAsB,YACxB,MAAO,CAACH,EAAK5F,IACX,SAAA,OAAAA,GAAQyB,EAAAuE,EAAc,MAAd,YAAAvE,EAAA,KAAAuE,EAAoB,CAAE,IAAAJ,EAAK,MAAA5F,CAAA,IAAW0B,EAAAsE,EAAc,SAAd,YAAAtE,EAAA,KAAAsE,EAAuB,CAAE,IAAAJ,CAAK,IAEhF,GAAIG,IAAsB,sBACjB,MAAA,OAAOH,EAAK5F,IACjB,SAAA,OAAAA,GAAQyB,EAAAuE,EAAc,eAAd,YAAAvE,EAAA,KAAAuE,EAA6BJ,EAAK5F,IAAS0B,EAAAsE,EAAc,kBAAd,YAAAtE,EAAA,KAAAsE,EAAgCJ,IAEvF,GAAIG,IAAsB,SAAU,CAC9B,GAAA,CAACC,EAAc,WACX,MAAA,MACJ,yFAAA,EAGJ,GAAIA,EAAc,QACT,MAAA,CAACJ,EAAK5F,IACX,SAAA,OAAAA,GAAQyB,EAAAuE,EAAc,UAAd,YAAAvE,EAAA,KAAAuE,EAAwBJ,EAAK5F,IAAS0B,EAAAsE,EAAc,aAAd,YAAAtE,EAAA,KAAAsE,EAA2BJ,IAE7E,GAAII,EAAc,aACT,MAAA,OAAOJ,EAAK5F,IACjB,SAAA,OAAAA,GAAQyB,EAAAuE,EAAc,eAAd,YAAAvE,EAAA,KAAAuE,EAA6BJ,EAAK5F,IAAS0B,EAAAsE,EAAc,aAAd,YAAAtE,EAAA,KAAAsE,EAA2BJ,IAE5E,MAAA,MACJ,oGAAA,CAEJ,CACM,MAAA,MAAM,yBAAyBG,GAAmB,CAC1D,ECjIaI,GAAwB,CAACC,EAAiBC,IAAyC,CACxF,MAAAC,EACJD,GACA,OAAO,QAAQA,CAAU,EACtB,IAAI,CAAC,CAACT,EAAK5F,CAAK,IAAM,CACrB,MAAMuG,EAAc,MAAM,QAAQvG,CAAK,EACnCA,EAAM,KAAK,GAAG,EACd,OAAOA,GAAU,SACjB,KAAK,UAAUA,CAAK,EACnBA,EACE,MAAA,GAAG4F,KAAO,mBAAmBW,CAAW,GAAA,CAChD,EACA,KAAK,GAAG,EACT,OAAAD,EAA0B,GAAGF,KAAWE,IAChCF,CACd,EAWaI,EAAoB,CAC/BC,EACAjF,IACkE,CAC9D,GAAA,EAACA,GAAA,MAAAA,EAAS,YACL,OAAAA,EAEH,KAAA,CAAE,WAAAkF,KAAeC,CAAA,EAAiBnF,EAExC,GAAI,CAACiF,EAEC,OAAAC,EAAW,WAAW,GAAG,EACpBC,EAEAnF,EAGL,MAAAoF,EAAgB,IAAI,IAAIH,CAAS,EACjCI,EAAe,OAAO,YAAY,IAAI,gBAAgBD,EAAc,MAAM,CAAC,EAC3EE,EAAM,IAAI,IAAIJ,EAAW,WAAW,GAAG,EAAIE,EAAc,OAASF,EAAaA,CAAU,EACzFK,EAAmB,IAAI,gBAAgBD,EAAI,MAAM,EACnD,IAAAE,EAAiB,OAAO,YAAYD,CAAgB,EAEpDL,EAAW,WAAW,GAAG,IAC3BM,EAAiB,CAAE,GAAGH,EAAc,GAAGG,CAAe,GAExD,IAAIC,EAAWL,EAAc,SACzB,OAAAE,EAAI,SAAS,OAAS,IACZG,GAAAH,EAAI,SAAS,MAAM,CAAC,GAE3B,CACL,GAAGH,EACH,WAAYR,GAAsBW,EAAI,OAASG,EAAUD,CAAc,CAAA,CAE3E,EAEgB,SAAAE,EAAmB7F,EAAcyF,EAAc,OAC7D,GAAI,CAACA,EAAK,CACJ,GAAA,OAAO,QAAW,YACpB,OAEIA,IAAArF,EAAA,OAAO,WAAP,YAAAA,EAAiB,OAAQ,EACjC,CAEOJ,EAAAA,EAAK,QAAQ,UAAW,MAAM,EAC/B,MAAA8F,EAAQ,IAAI,OAAO,QAAU9F,EAAO,mBAAmB,EAC3D+F,EAAUD,EAAM,KAAKL,CAAG,EAC1B,OAAKM,EACAA,EAAQ,GACN,mBAAmBA,EAAQ,GAAG,QAAQ,MAAO,GAAG,CAAC,EADhC,GADH,IAGvB,CAEO,SAASC,EAA0BhG,EAAc,OAClD,GAAA,OAAO,QAAW,YACpB,OAEF,MAAMiG,EAAW,2BAAQ,SACzB,GAAI,EAACA,GAGDA,EAAU,CACZ,MAAMC,EAAS,IAAI,gBAAgBD,EAAS,MAAM,EAC5CE,EAAO,IAAI,iBAAgB/F,EAAA6F,EAAS,OAAT,YAAA7F,EAAe,MAAM,EAAE,EACxD8F,EAAO,OAAOlG,CAAI,EAClBmG,EAAK,OAAOnG,CAAI,EACZ,IAAAyF,EAAM,OAAO,SAAS,SACtB,MAAM,KAAKS,CAAM,EAAE,SAAeT,GAAA,IAAIS,EAAO,SAAS,KACtD,MAAM,KAAKC,CAAI,EAAE,SAAeV,GAAA,IAAIU,EAAK,SAAS,KACtD,OAAO,QAAQ,UAAU,CAAC,EAAG,GAAIV,CAAG,CACtC,CACF,CChGO,MAAMW,EAAgBC,GAC3B,CAAC,CAACA,GACF,OAAOA,GAAU,UACjB,CAAC,CAAC,OAAOA,CAAK,EACX,YACA,EAAA,MACC,uJACF,EAESC,EAAmBC,GAC9B,CAAC,CAACA,GAAY,OAAOA,GAAa,UAAYA,EAAS,QAAUzE,EAGtD0E,EAAsBC,GACjC,CAAC,CAACA,GAAe,OAAOA,GAAgB,SAE7BC,GAAiBC,GAC5BA,GACA,OAAOA,GAAW,UAClBA,EAAO,MAAM,yEAAyE,ECM3EC,EAAuC,CAClD,KAAM,KACN,IAAK,KACL,YAAa,CACX,MAAO,KACP,UAAW,IACb,EACA,aAAc,CACZ,UAAW,KACX,SAAU,EACV,YAAa,IACf,EACA,aAAc,CACZ,MAAO,IACT,EACA,oBAAqB,EACrB,OAAQ,CAAC,CACX,EChBaC,GAA2B,CAAC,CAAE,WAAArD,EAAY,UAAA4B,EAAW,YAAA0B,KAA8B,CACxF,MAAAC,EAAMxD,EAAeC,CAAU,EAC9B,OAAAwD,EAAA,cACL,CACE,OAAQ,CACN,QAAS,CAAC,EACV,OAAQ,CAAC,EACT,SAAU,CAAC,CACb,EACA,QAAS,CAAC,EACV,2BAA4B,GAC5B,GAAI,cACJ,QAAS,OACT,QAAS,CAAE,MAAO,IAAK,EACvB,OAAQ,CACN,KAAM,CACJ,GAAI,CACF,QAAS,CACP,CACE,KAAM,eACN,QAAS,wBACT,OAAQ,QACV,EACA,CACE,OAAQ,YACV,CACF,CACF,EACA,QAAS,UACT,OAAQ,CACN,QAAS,CAAC,EACV,QAAS,CAAC,EACV,MAAO,CAAC,CACV,CACF,EACA,WAAY,CACV,OAAQ,CACN,IAAK,gBACL,GAAI,gBACJ,OAAQ,CAAE,OAAQ,eAAgB,QAAS,eAAgB,EAC3D,QAAS,CAAE,QAAS,CAAC,mBAAoB,aAAa,EAAG,OAAQ,YAAa,CAChF,CACF,CACF,CACF,EACA,CACE,QAAS,CACP,sBAAuBC,EAAO,OAAA,CAAE,MAAQC,GAAM1E,EAAqB,EACnE,iBAAkByE,EAAAA,OAAO,CAEvB,MAAO,CAACC,EAAG,CAAE,KAAM,CAAE,MAAAhH,MAAmBA,CAAA,CACzC,EACD,YAAaiH,EAAAA,KAAMC,IAAS,CAAE,KAAM,QAAS,MAAOA,EAAI,KAAA,EAAQ,EAEhE,cAAeD,OAAK,SAAS,CAC/B,EACA,OAAQ,CACN,aAAc,CAACD,EAAG,CAAE,MAAAb,KAAY,CAACD,EAAaC,CAAK,CACrD,EACA,SAAU,CACR,cAAe,MAAOa,EAAG,CAAE,MAAAb,EAAO,QAAAlG,MACpB,MAAM4G,EAAI,KACpB,qBACA,CACE,SAAUV,EACV,QAASlB,EAAkBC,EAAWjF,CAAO,CAC/C,EACA,CACE,QAAS,CACP,cAAe,UAAU2G,GAAA,YAAAA,EAAa,MAAM,QAAQ,YAAY,OAClE,CACF,CAAA,GAES,IAEf,CACF,CAAA,CAEJ,EChFaO,GAA8B,CAAC,CAAE,WAAA7D,EAAY,YAAAsD,KAA8B,CAChF,MAAAC,EAAMxD,EAAeC,CAAU,EAC9B,OAAAwD,EAAA,cACL,CACE,OAAQ,CACN,QAAS,CAAC,EACV,OAAQ,CAAC,EACT,SAAU,CAAC,CACb,EACA,QAAS,CAAC,EACV,2BAA4B,GAC5B,GAAI,iBACJ,QAAS,OACT,QAAS,CAAE,MAAO,IAAK,EACvB,OAAQ,CACN,KAAM,CACJ,GAAI,CACF,QAAS,CACP,CACE,KAAM,kBACN,QAAS,2BACT,OAAQ,QACV,EACA,CACE,OAAQ,YACV,CACF,CACF,EACA,QAAS,UACT,OAAQ,CACN,QAAS,CAAC,EACV,QAAS,CAAC,EACV,MAAO,CAAC,CACV,CACF,EACA,WAAY,CACV,OAAQ,CACN,IAAK,gBACL,GAAI,gBACJ,OAAQ,CAAE,OAAQ,eAAgB,QAAS,eAAgB,EAC3D,QAAS,CAAE,QAAS,CAAC,mBAAoB,aAAa,EAAG,OAAQ,YAAa,CAChF,CACF,CACF,CACF,EACA,CACE,QAAS,CACP,yBAA0BC,EAAO,OAAA,CAAE,MAAQC,GAAMvE,EAAwB,EACzE,iBAAkBsE,EAAAA,OAAO,CAEvB,MAAO,CAACC,EAAG,CAAE,KAAM,CAAE,MAAAhH,MAAmBA,CAAA,CACzC,EACD,YAAaiH,EAAAA,KAAMC,IAAS,CAAE,KAAM,QAAS,MAAOA,EAAI,KAAA,EAAQ,EAChE,cAAeD,OAAK,SAAS,CAC/B,EACA,OAAQ,CACN,gBAAiB,CAACD,EAAG,CAAE,SAAAX,KAAe,CAACD,EAAgBC,CAAQ,CACjE,EACA,SAAU,CACR,cAAe,CAACW,EAAG,CAAE,SAAAX,EAAU,OAAAI,CAAA,IAC7BI,EAAI,KACF,iBACA,CAAE,YAAaR,EAAU,OAAAI,CAAe,EACxC,CACE,QAAS,CACP,cAAe,UAAUG,GAAA,YAAAA,EAAa,MAAM,QAAQ,YAAY,OAClE,CACF,CACF,CACJ,CACF,CAAA,CAEJ,ECtEaQ,GAAyB,CAAC,CAAE,WAAA9D,EAAY,YAAAsD,KAA8B,CAC3E,MAAAC,EAAMxD,EAAeC,CAAU,EAC9B,OAAAwD,EAAA,cACL,CACE,OAAQ,CACN,QAAS,CAAC,EACV,OAAQ,CAAC,CACX,EACA,QAAS,CAAC,EACV,2BAA4B,GAC5B,GAAI,YACJ,QAAS,OACT,QAAS,CAAE,MAAO,KAAM,SAAU,KAAM,OAAQ,IAAK,EACrD,OAAQ,CACN,KAAM,CACJ,QAAS,UACT,GAAI,CACF,SAAU,YACZ,EACA,OAAQ,CACN,QAAS,CAAC,EACV,MAAO,CAAC,CACV,CACF,EACA,WAAY,CACV,OAAQ,CACN,IAAK,WACL,GAAI,WACJ,OAAQ,CAAE,OAAQ,YAAa,QAAS,CAAC,yBAA0B,gBAAgB,CAAE,EACrF,QAAS,CAAE,QAAS,CAAC,YAAa,sBAAsB,EAAG,OAAQ,YAAa,CAClF,CACF,EACA,UAAW,CACT,QAAS,OACT,OAAQ,CACN,KAAM,CACJ,QAAS,OACT,GAAI,CACF,SAAU,CACR,CACE,KAAM,iBACN,QAAS,0BACT,OAAQ,QACV,EACA,CACE,KAAM,iBACN,QAAS,0BACT,OAAQ,QACV,EACA,CACE,OAAQ,YACV,CACF,CACF,EACA,OAAQ,CAAE,KAAM,GAAI,MAAO,CAAA,CAAG,CAChC,EACA,WAAY,CACV,OAAQ,CACN,IAAK,WACL,GAAI,WACJ,OAAQ,CAAE,OAAQ,YAAa,QAAS,eAAgB,EACxD,QAAS,CAAE,QAAS,CAAC,YAAa,aAAa,EAAG,OAAQ,YAAa,CACzE,CACF,EACA,UAAW,CAAE,KAAM,OAAQ,CAC7B,CACF,CACF,CACF,EACA,CACE,QAAS,CACP,wBAAyBC,EAAO,OAAA,CAAE,MAAQC,GAAMzE,GAAwB,EACxE,wBAAyBwE,EAAO,OAAA,CAAE,MAAQC,GAAMxE,GAAwB,EACxE,UAAWuE,EAAAA,OAAO,CAChB,MAAO,CAACC,EAAG,CAAE,KAAM,CAAE,MAAAhH,MAAmBA,CAAA,CACzC,EACD,eAAgB+G,EAAAA,OAAO,CACrB,SAAU,CAACC,EAAG,CAAE,KAAM,CAAE,SAAAK,MAAsBA,EAC9C,OAAQ,CAACL,EAAG,CAAE,KAAM,CAAE,WAAAM,MAAwBA,CAAA,CAC/C,EACD,YAAaL,EAAAA,KAAMC,IAAS,CAAE,KAAM,QAAS,MAAOA,EAAI,KAAA,EAAQ,EAChE,cAAeD,OAAK,SAAS,EAC7B,uBAAwBA,OAAK,WAAW,EACxC,qBAAsBA,EAAAA,KAAMC,IAAS,CAAE,KAAM,kBAAmB,MAAOA,EAAI,KAAA,EAAQ,CACrF,EACA,OAAQ,CACN,eAAgB,CAACF,EAAG,CAAE,KAAAO,CAAA,IAAW,CAACA,EAClC,eAAgB,CAACP,EAAG,CAAE,cAAAQ,CAAoB,IAAA,CAACA,GAAiBA,IAAkB,MAChF,EACA,SAAU,CACR,SAAU,MAAOR,GAAM,CACrB,KAAM,CAAE,KAAAS,CAAK,EAAI,MAAMZ,EAAI,IAAI,qBAAsB,CACnD,QAAS,CACP,cAAe,UAAUD,GAAA,YAAAA,EAAa,MAAM,QAAQ,YAAY,OAClE,CAAA,CACD,EACM,OAAAa,CACT,EACA,SAAU,CAACT,EAAG,CAAE,KAAAO,EAAM,cAAAC,CAAA,IACpBX,EAAI,KACF,YACA,CACE,KAAAU,EACA,cAAAC,CACF,EACA,CACE,QAAS,CACP,cAAe,UAAUZ,GAAA,YAAAA,EAAa,MAAM,QAAQ,YAAY,OAClE,CACF,CACF,CACJ,CACF,CAAA,CAEJ,ECnHac,GAA6B,CAAC,CAAE,WAAApE,EAAY,UAAA4B,KAA4B,CAC7E,MAAA2B,EAAMxD,EAAeC,CAAU,EAC9B,OAAAwD,EAAA,cACL,CACE,OAAQ,CACN,QAAS,CAAC,EACV,OAAQ,CAAC,EACT,SAAU,CAAC,CACb,EACA,QAAS,CAAC,EACV,2BAA4B,GAC5B,GAAI,iBACJ,QAAS,OACT,QAAS,CAAE,MAAO,IAAK,EACvB,OAAQ,CACN,KAAM,CACJ,GAAI,CACF,QAAS,CACP,CACE,KAAM,eACN,QAAS,wBACT,OAAQ,QACV,EACA,CACE,OAAQ,YACV,CACF,CACF,EACA,QAAS,UACT,OAAQ,CACN,QAAS,CAAC,EACV,QAAS,CAAC,EACV,MAAO,CAAC,CACV,CACF,EACA,WAAY,CACV,OAAQ,CACN,IAAK,gBACL,GAAI,gBACJ,OAAQ,CAAE,OAAQ,eAAgB,QAAS,eAAgB,EAC3D,QAAS,CAAE,QAAS,CAAC,mBAAoB,aAAa,EAAG,OAAQ,YAAa,CAChF,CACF,CACF,CACF,EACA,CACE,QAAS,CACP,sBAAuBC,EAAO,OAAA,CAAE,MAAQC,GAAM1E,EAAqB,EACnE,iBAAkByE,EAAAA,OAAO,CAEvB,MAAO,CAACC,EAAG,CAAE,KAAM,CAAE,MAAAhH,MAAmBA,CAAA,CACzC,EACD,YAAaiH,EAAAA,KAAMC,IAAS,CAAE,KAAM,QAAS,MAAOA,EAAI,KAAA,EAAQ,EAChE,cAAeD,OAAK,SAAS,CAC/B,EACA,OAAQ,CACN,aAAc,CAACD,EAAG,CAAE,MAAAb,KAAY,CAACD,EAAaC,CAAK,CACrD,EACA,SAAU,CACR,cAAe,CAACa,EAAG,CAAE,MAAAb,EAAO,QAAAlG,CAAQ,IAClC4G,EAAI,KAAoC,uBAAwB,CAC9D,MAAAV,EACA,QAASlB,EAAkBC,EAAWjF,CAAO,CAAA,CAC9C,CACL,CACF,CAAA,CAEJ,ECnEa0H,GAAqC,CAAC,CAAE,WAAArE,EAAY,UAAA4B,KAA4B,CACrF,MAAA2B,EAAMxD,EAAeC,CAAU,EAC9B,OAAAwD,EAAA,cACL,CACE,OAAQ,CACN,QAAS,CAAC,EACV,OAAQ,CAAC,EACT,SAAU,CAAC,CACb,EACA,QAAS,CAAC,EACV,2BAA4B,GAC5B,GAAI,wBACJ,QAAS,OACT,QAAS,CAAE,MAAO,IAAK,EACvB,OAAQ,CACN,KAAM,CACJ,GAAI,CACF,QAAS,CACP,CACE,KAAM,eACN,QAAS,wBACT,OAAQ,QACV,EACA,CACE,OAAQ,YACV,CACF,CACF,EACA,QAAS,UACT,OAAQ,CACN,QAAS,CAAC,EACV,QAAS,CAAC,EACV,MAAO,CAAC,CACV,CACF,EACA,WAAY,CACV,OAAQ,CACN,IAAK,UACL,GAAI,UACJ,OAAQ,CAAE,OAAQ,eAAgB,QAAS,eAAgB,EAC3D,QAAS,CAAE,QAAS,CAAC,mBAAoB,aAAa,EAAG,OAAQ,YAAa,CAChF,CACF,CACF,CACF,EACA,CACE,QAAS,CACP,sBAAuBC,EAAO,OAAA,CAAE,MAAQC,GAAM1E,EAAqB,EACnE,iBAAkByE,EAAAA,OAAO,CAEvB,MAAO,CAACC,EAAG,CAAE,KAAM,CAAE,MAAAhH,MAAmBA,CAAA,CACzC,EACD,YAAaiH,EAAAA,KAAMC,IAAS,CAAE,KAAM,QAAS,MAAOA,EAAI,KAAA,EAAQ,EAChE,cAAeD,OAAK,SAAS,CAC/B,EACA,OAAQ,CACN,aAAc,CAACD,EAAG,CAAE,MAAAb,KAAY,CAACD,EAAaC,CAAK,CACrD,EACA,SAAU,CACR,QAAS,MAAOa,EAAG,CAAE,MAAAb,EAAO,QAAAlG,MACd,MAAM4G,EAAI,KACpB,sCACA,CACE,MAAAV,EACA,QAASlB,EAAkBC,EAAWjF,CAAO,CAC/C,CAAA,GAES,IAEf,CACF,CAAA,CAEJ,EClBa2H,GAAoB,CAAC,CAChC,WAAAtE,EACA,UAAA4B,EACA,oBAAA2C,EACA,oBAAAC,EACA,kBAAAtD,EAAoB,MACpB,cAAAC,EACA,oBAAAsD,EACA,iBAAAC,EAAmB,GACnB,WAAAC,EAAa,EACf,IAA0B,CACxB,MAAMC,EAAgBL,GAAuBtD,GAAmBC,EAAmBC,CAAa,EAC1F0D,EAAgBL,GAAuBnD,GAAmBH,EAAmBC,CAAa,EAC1FoC,EAAMxD,EAAeC,CAAU,EAC/B8E,EAAc,MAClB7C,EACAkC,EACAY,KAEe,MAAMxB,EAAI,KAAKtB,EAAKkC,EAAMY,CAAM,GAEjC,KAET,OAAAvB,EAAA,cACL,CACE,OAAQ,CACN,QAAS,CAAC,EACV,OAAQ,CAAC,EACT,SAAU,CAAC,CACb,EACA,QAAS,CAAC,EACV,QAASJ,EACT,2BAA4B,GAC5B,GAAI,QACJ,KAAM,WACN,OAAQ,CACN,eAAgB,CACd,QAAS,WACT,GAAI,CACF,eAAgB,CACd,CACE,KAAM,aACN,QAAS,CAAC,cAAe,aAAc,oBAAoB,EAC3D,OAAQ,WACV,CACF,CACF,EACA,OAAQ,CACN,SAAU,CACR,KAAM,CAAC,SAAS,EAChB,OAAQ,CAAE,KAAM,aAAc,OAAQ,UAAW,EACjD,OAAQ,CACN,GAAI,qBACJ,IAAK,qBACL,OAAQ,CACN,QAAS,CAAC,cAAe,oBAAoB,EAC7C,OAAQ,UACV,EACA,QAAS,CACP,CACE,KAAM,yBACN,QAAS,+BACT,OAAQ,kBACV,EACA,CAAE,QAAS,CAAC,yBAAyB,EAAG,OAAQ,WAAY,CAC9D,CACF,CACF,EACA,iBAAkB,CAChB,KAAM,CAAC,SAAS,EAChB,MAAO,CACL,yBAA0B,UAC5B,CACF,EACA,UAAW,CACT,QAAS,WACT,MAAO,kBACP,OAAQ,CACN,SAAU,CAAC,EACX,QAAS,CAAC,EACV,YAAa,CAAC,EACd,SAAU,CAAC,EACX,OAAQ,CAAC,EACT,WAAY,CACV,MAAO,CAAC,gCAAgC,EACxC,KAAM,CAAC,sBAAuB,oBAAoB,EAClD,OAAQ,CACN,IAAK,UACL,GAAI,aACJ,OAAQ,CACN,OAAQ,SACV,EACA,QAAS,CACP,OAAQ,SACR,QAAS,CAAC,yBAAyB,CACrC,CACF,CACF,CACF,EACA,GAAI,CACF,gBAAiB,0BACjB,iBAAkB,2BAClB,0BAA2B,kCAC3B,gBAAiB,yBACnB,CACF,EACA,eAAgB,CACd,MAAO,cACP,OAAQ,CACN,SAAU,CACR,OAAQ,CACN,IAAK,iBACL,GAAI,+BACJ,OAAQ,CACN,CACE,KAAM,eACN,QAAS,CAAC,eAAe,EACzB,OAAQ,0CACV,EACA,CACE,QAAS,CAAC,cAAe,oBAAoB,EAC7C,OAAQ,gCACV,CACF,EACA,QAAS,CACP,CACE,KAAM,aACN,OAAQ,CACN,kCACA,uDACF,CACF,EACA,CACE,QAAS,0BACT,OAAQ,wCACV,CACF,CACF,CACF,EACA,UAAW,CACT,OAAQ,CACN,IAAK,kBACL,GAAI,0BACJ,OAAQ,CACN,QAAS,CAAC,cAAe,oBAAoB,EAC7C,OAAQ,gCACV,EACA,QAAS,CACP,QAAS,0BACT,OAAQ,wCACV,CACF,CACF,EACA,IAAK,CACH,OAAQ,CACN,KAAM,CACJ,OAAQ,CACN,IAAK,gBACL,GAAI,gBACJ,OAAQ,CACN,QAAS,CAAC,cAAe,oBAAoB,EAC7C,OAAQ,gCACV,EACA,QAAS,CACP,QAAS,CAAC,yBAAyB,EACnC,OAAQ,wCACV,CACF,CACF,CACF,CACF,EACA,iBAAkB,CAChB,OAAQ,CACN,IAAK,yBACL,GAAI,kCACJ,OAAQ,CACN,QAAS,CAAC,cAAe,oBAAoB,EAC7C,OAAQ,gCACV,EACA,QAAS,CACP,CACE,KAAM,aACN,OAAQ,CACN,kCACA,uDACF,CACF,EACA,CACE,QAAS,0BACT,OAAQ,wCACV,CACF,CACF,CACF,CACF,CACF,EACA,SAAU,CACR,KAAM,WACN,MAAO,CAAC,iBAAkB,WAAY,iBAAkB,aAAa,EACrE,GAAI,CACF,QAAS,sBACX,EACA,OAAQ,CACN,aAAc,CACZ,GAAI,QACJ,QAAS,OACT,OAAQ,CACN,SAAU,CAAE,KAAM,OAAQ,EAC1B,QAAS,CACP,OAAQ,CACN,KAAM,UACN,OAAQ,MACV,CACF,EACA,KAAM,CACJ,OAAQ,CACN,CAAE,KAAM,wBAAyB,OAAQ,UAAW,EACpD,CACE,KAAM,kBACN,OAAQ,SACV,CACF,CACF,EACA,QAAS,CACP,QAAS,UACT,MAAO,aACP,OAAQ,CACN,QAAS,CACP,MAAO,CACL,IAAQ,CACN,SAAU,GACV,OAAQ,SACV,CACF,EACA,OAAQ,CACN,KAAM,4BACN,OAAQ,YACV,CACF,EACA,WAAY,CACV,OAAQ,CACN,IAAK,eACL,GAAI,eACJ,OAAQ,CACN,QAAS,CAAC,cAAe,aAAc,oBAAoB,EAC3D,OAAQ,SACV,EACA,QAAS,CACP,CAAE,QAAS,qBAAsB,OAAQ,SAAU,CAWrD,CACF,CACF,CACF,CACF,CACF,CACF,CACF,CACF,CACF,CACF,EACA,MAAO,CACL,QAAS,OACT,OAAQ,CACN,KAAM,CACJ,GAAI,CACF,UAAW,SACb,EACA,QAAS,WACT,OAAQ,CAAE,SAAU,GAAI,MAAO,CAAA,CAAG,CACpC,EACA,QAAS,CACP,OAAQ,CACN,IAAK,eACL,GAAI,wBACJ,OAAQ,CACN,QAAS,CAAC,cAAe,oBAAoB,EAC7C,OAAQ,CAAC,iCAAkC,eAAe,CAC5D,EACA,QAAS,CACP,CAAE,KAAM,aAAc,OAAQ,YAAa,EAC3C,CACE,QAAS,0BACT,OAAQ,CAAC,yCAA0C,YAAY,CACjE,CACF,CACF,CACF,CACF,CACF,EACA,aAAc,CACZ,QAAS,aACT,GAAI,CACF,UAAW,CAAC,CAAE,KAAM,cAAe,OAAQ,eAAiB,WAAW,CACzE,EACA,OAAQ,CACN,WAAY,CACV,GAAI,CACF,sBAAuB,gBACvB,oBAAqB,cACrB,mBAAoB,oBACpB,iBAAkB,kBAClB,qBAAsB,oBACxB,EACA,QAAS,WACT,OAAQ,CACN,SAAU,CAAC,EACX,uBAAwB,CAAC,EACzB,SAAU,CAAC,EACX,OAAQ,CAAC,CACX,CACF,EACA,cAAe,CACb,MAAO,CAAC,aAAa,EACrB,OAAQ,CACN,IAAK,sBACL,GAAI,sBACJ,OAAQ,CACN,CACE,KAAM,aACN,QAAS,CAAC,cAAe,oBAAoB,EAC7C,OAAQ,gCACV,EACA,CACE,QAAS,eACT,OAAQ,CAAC,kCAAmC,mCAAmC,CACjF,CACF,EACA,QAAS,CACP,CACE,KAAM,aACN,OAAQ,mCACV,EACA,CACE,QAAS,wBACT,OAAQ,mBACV,CACF,CACF,CACF,EACA,YAAa,CACX,MAAO,CAAC,aAAa,EACrB,OAAQ,CACN,IAAK,oBACL,GAAI,oBACJ,OAAQ,CACN,CACE,KAAM,aACN,QAAS,CAAC,cAAe,oBAAoB,EAC7C,OAAQ,gCACV,EACA,CACE,QAAS,eACT,OAAQ,CAAC,kCAAmC,mCAAmC,CACjF,CACF,EACA,QAAS,CACP,CACE,KAAM,aACN,OAAQ,mCACV,EACA,CACE,QAAS,wBACT,OAAQ,mBACV,CACF,CACF,CACF,EACA,kBAAmB,CACjB,MAAO,CAAC,aAAa,EACrB,OAAQ,CACN,IAAK,oBACL,GAAI,oBACJ,OAAQ,CACN,QAAS,eACT,OAAQ,CAAC,kCAAmC,mCAAmC,CACjF,EACA,QAAS,CACP,QAAS,wBACT,OAAQ,mBACV,CACF,CACF,EACA,gBAAiB,CACf,MAAO,CAAC,aAAa,EACrB,OAAQ,CACN,IAAK,kBACL,GAAI,kBACJ,OAAQ,CACN,QAAS,eACT,OAAQ,CAAC,kCAAmC,qBAAqB,CACnE,EACA,QAAS,CACP,QAAS,wBACT,OAAQ,mBACV,CACF,CACF,EACA,mBAAoB,CAClB,MAAO,CAAC,aAAa,EACrB,OAAQ,CACN,IAAK,qBACL,GAAI,qBACJ,OAAQ,CACN,QAAS,CAAC,cAAe,oBAAoB,EAC7C,OAAQ,gCACV,EACA,QAAS,CACP,QAAS,wBACT,OAAQ,mBACV,CACF,CACF,EAEA,SAAU,CACR,GAAI,CACF,WAAY,YACd,CACF,CACF,CACF,CACF,CACF,EACA,CACE,QAAS,CACP,eAAgBO,OAAK,WAAW,EAChC,gBAAiBA,OAAK,YAAY,EAClC,mBAAoBA,OAAK,eAAe,EACxC,6BAA8BF,EAAAA,OAAO,CACnC,oBAAqB,CAAC,CAAE,oBAAAuB,KAA0BA,EAAsB,CAAA,CACzE,EACD,aAAcvB,SAAO,KACnBoB,EAAcxG,EAA0B,IAAI,EAC5CwG,EAAczG,EAAyB,IAAI,EACpC,CACL,GAAGgF,CAAA,EAEN,EACD,+BAAgCK,SAAO,CAAC,CAAE,aAAc,CAAE,MAAAtI,OACxD0J,EAAcxG,EAA0B,IAAI,EACrC,CACL,GAAG+E,EACH,aAAc,CAAE,MAAAjI,CAAM,CAAA,EAEzB,EAGD,YAAasI,EAAAA,OAAO,CAClB,KAAM,CAACC,EAAG,CAAE,KAAAS,CAAW,IAAA,OAAA,QAAAvH,EAAAuH,GAAA,YAAAA,EAAM,UAAN,YAAAvH,EAAe,OAAQ,MAC9C,YAAa,CAAC8G,EAAG,CAAE,KAAAS,KAAW,CAC5B,GAAIA,EAAK,QAAS,CAChB,KAAM,CAAE,qBAAAc,EAAsB,YAAAC,GAAgBf,EAAK,QAC7CgB,EAAc,IAAI,KAAK,KAAK,MAAQF,EAAuB,GAAK,EACxD,OAAAJ,EAAAxG,EAA0B8G,EAAY,YAAa,CAAA,EAC1D,CACL,MAAOD,EACP,UAAWC,CAAA,CAEf,CACA,OAAAN,EAAcxG,EAA0B,IAAI,EACrC,CACL,MAAO,KACP,UAAW,IAAA,CAEf,EACA,aAAc,CAACqF,EAAG,CAAE,KAAAS,KAAW,OACvB,MAAAiB,IAAexI,EAAAuH,EAAK,UAAL,YAAAvH,EAAc,eAAgB,KACnD,OAAIwI,GACFP,EAAczG,EAAyBgH,CAAY,EAE9C,CAAE,MAAOA,EAClB,CAAA,CACD,EACD,cAAe3B,EAAAA,OAAO,CACpB,IAAK,CAACC,EAAG2B,IAAA,OAAM,OAAAzI,EAAAyI,EAAE,OAAF,YAAAzI,EAAQ,IAAA,CACxB,EAED,WAAY6G,EAAAA,OAAO,CACjB,aAAeC,IAAO,CACpB,UAAW,IAAI,KACf,SAAU,EACV,YAAa,IAAA,EACf,CACD,EAED,mBAAoBD,EAAAA,OAAO,CACzB,aAAc,CAACG,EAAKyB,KAAO,CACzB,UAAWzB,EAAI,aAAa,UAC5B,SAAUA,EAAI,aAAa,SAAW,EACtC,YAAa,IAAI,IAAK,EACxB,CACD,EAGD,wBAAyBH,EAAAA,OAAO,CAE9B,OAAQ,CAAC,CAAE,OAAA6B,CAAO,EAAG,CAAE,KAAM,CAAE,MAAA5I,CAAM,MAAc,CACjD,GAAG4I,EACH,eAAgB5I,CAAA,EAClB,CACD,EACD,YAAa+G,EAAAA,OAAO,CAClB,OAASC,IAAO,IAChB,oBAAsBA,GAAM,CAAA,CAC7B,EACD,sBAAuBD,EAAAA,OAAO,CAE5B,OAAQ,CAAC,CAAE,OAAA6B,GAAU,CAAE,KAAM,CAAE,MAAA5I,OAAoB,CAAE,GAAG4I,EAAQ,aAAc5I,CAAM,EAAA,CACrF,EACD,oBAAqB+G,EAAAA,OAAO,CAC1B,aAAeC,IACbmB,EAAczG,EAAyB,IAAI,EACpC,CAAE,MAAO,MAClB,CACD,EAGD,SAAU,IAAM,CACVuG,GAActC,EAAmB,cAAc,IAEjDG,EAA0B,cAAc,EACxCA,EAA0B,MAAM,EAEpC,EAGA,eAAiB+C,GAAY,CAC3B,GAAIZ,EACE,GAAA,CACc,IAAI,iBAAiB,OAAO,EAEpC,YAAYY,EAAQ,aAAa,KAAK,QAGhD,CAEJ,CACF,EAEA,OAAQ,CACN,YAAa,CAAC3B,EAAKyB,IAAM,OAAA,OAAC,GAACzI,EAAAgH,EAAI,OAAJ,MAAAhH,EAAU,cACrC,WAAagH,GAAQ,CAAC,CAACA,EAAI,MAAQ,CAAC,CAACA,EAAI,aAAa,OAAS,CAAC,CAACA,EAAI,YAAY,MACjF,QAAUA,GAAQ,CAACA,EAAI,aAAa,MACpC,gBAAkBA,GAAQ,CAAC,CAACA,EAAI,aAAa,MAC7C,sBAAuB,IAAM,CAACc,EAC9B,0BAA4Bd,GAAQ,CAC5B,KAAA,CAAE,UAAA4B,CAAU,EAAI5B,EAAI,YAC1B,OAAK4B,EAGD5B,EAAI,aAAa,YAEH,KAAK,MAAQA,EAAI,aAAa,YAAY,UACzCpF,GAA+B,IAE9CiG,GAGc,KAAK,MAAQb,EAAI,aAAa,UAAW,UAC3Ca,EAAsB,IAC3B,GAKOe,EAAU,QAAQ,EAAI,KAAK,IAAI,EACnB,IAAQjH,GAClB,EAnBX,EAoBX,EAGA,uBAAwB,CAACmF,EAAG2B,IAC1BA,EAAE,KAAK,MAAM,SAAW3G,GAAsB2G,EAAE,KAAK,MAAM,QAAU,IAGvE,WAAY,CAAC3B,EAAG,CAAE,KAAM,CAAE,MAAAhH,CAAM,CAAA,IAC9BA,EAAM,SAAW,MAEhBA,EAAM,UAAY,yBAA2BA,EAAM,QAAU,mBAGhE,WAAY,CAACgH,EAAG2B,IAAM,OAAA,OAAC,GAACzI,EAAAyI,EAAE,OAAF,MAAAzI,EAAQ,UAChC,aAAc,CAAC8G,EAAG2B,IAAM,OAAA,OAAC,GAACzI,EAAAyI,EAAE,OAAF,MAAAzI,EAAQ,KACpC,EAEA,SAAU,CACR,eAAgB,CAAC8G,EAAG,CAAE,MAAAb,EAAO,SAAAE,KACtBH,EAAaC,CAAK,EAGlBC,EAAgBC,CAAQ,EAGtB+B,EAA4B,yBAA0B,CAC3D,MAAAjC,EACA,SAAAE,CAAA,CACD,EALQ,QAAQ,OAAO,CAAE,MAAO5D,CAAwB,CAAA,EAHhD,QAAQ,OAAO,CAAE,MAAOH,CAAqB,CAAA,EAUxD,gBAAiB,CAACuG,EAAS,CAAE,YAAAtC,EAAa,QAAAtG,KAAc,OAClD,OAACqG,EAAmBC,CAAW,GAG/BrG,EAAA2I,EAAQ,OAAR,MAAA3I,EAAc,aAGR,QAAA,KACN,2EAAA,EAEKkI,EACL,oBACA,CACE,aAAc,eACd,WAAY,MACZ,YAAA7B,EACA,QAAStB,EAAkBC,EAAWjF,CAAO,CAC/C,EACA,CACE,QAAS,CACP,cAAe,UAAU4I,EAAQ,YAAY,OAC/C,CACF,CAAA,GAGKT,EAAY,2BAA4B,CAC7C,YAAA7B,EACA,QAAStB,EAAkBC,EAAWjF,CAAO,CAAA,CAC9C,EA1BM,QAAQ,OAAO,CAAE,MAAOyC,CAA4B,CAAA,CA4B/D,EACA,mBAAoB,CAACsE,EAAG,CAAE,YAAAT,EAAa,IAAAwC,KAChCzC,EAAmBC,CAAW,EAG5B6B,EAAY,+BAAgC,CACjD,YAAA7B,EACA,IAAAwC,CAAA,CACD,EALQ,QAAQ,OAAO,CAAE,MAAOrG,CAA4B,CAAA,EAO/D,kBAAmB,CAACmG,EAAS,CAAE,MAAA1C,EAAO,QAAAlG,KAAc,OAC9C,OAACiG,EAAaC,CAAK,GAGnBjG,EAAA2I,EAAQ,OAAR,MAAA3I,EAAc,YACTkI,EACL,oBACA,CACE,aAAc,eACd,WAAY,QACZ,MAAAjC,EACA,QAASlB,EAAkBC,EAAWjF,CAAO,CAC/C,EACA,CACE,QAAS,CACP,cAAe,UAAU4I,EAAQ,YAAY,OAC/C,CACF,CAAA,EAGKT,EAAY,6BAA8B,CAC/C,MAAAjC,EACA,QAASlB,EAAkBC,EAAWjF,CAAO,CAAA,CAC9C,EArBM,QAAQ,OAAO,CAAE,MAAOqC,CAAqB,CAAA,CAuBxD,EACA,gBAAkB0E,GAAMoB,EAAY,mBAAmB,EACvD,cAAe,CAACS,EAASpB,IAAS,OAChC,MAAMhB,EAA6BgB,EAAK,UAAUvH,EAAA2I,EAAQ,MAAR,YAAA3I,EAAa,QAC/D,OAAKuG,EAGAD,GAAcC,CAAM,EAIlB2B,EAAY,mBAAoB,CACrC,OAAA3B,EACA,IAAKgB,EAAK,GAAA,CACX,EANQ,QAAQ,OAAO,CAAE,MAAO9E,EAA0B,CAAA,EAHlD,QAAQ,OAAO,CAAE,MAAOC,EAAqB,CAAA,CAUxD,EACA,uBAAwB,MAAOoE,EAAG,CAAE,MAAAb,KAAY,CAC1C,GAAA,CAACD,EAAaC,CAAK,EACf,MAAA,IAAI/D,EAAcE,CAAmB,EAE7C,MAAMrC,EAAU,MAAMmI,EACpB,mBACA,CAAE,MAAAjC,CAAM,CAAA,EAEN,IAAAxF,EACA,GAAA,CACWA,EAAA,MAAMU,GAAoBpB,CAAO,QACvC0I,GACD,MAAA,IAAIvG,EAAcuG,CAAU,CACpC,CACA,OAAOP,EAA4B,0BAA2B,CAAE,MAAAjC,EAAO,WAAAxF,CAAY,CAAA,CACrF,EACA,aAAc,MAAOuG,EAAK8B,IAAU,CAClC,MAAMN,EAAeM,EAAM,OAAS,YAAcA,EAAM,MAAQ9B,EAAI,aAAa,MAI1E,MAAA,CAAE,QAHO,MAAMkB,EAAoC,SAAU,CAClE,aAAAM,CAAA,CACD,EACiB,MAAO,KAC3B,EACA,QAAS,CAACxB,EAAKyB,IACbP,EAAY,WAAY,CACtB,aAAclB,EAAI,aAAa,MAC/B,IAAK,CAAC,CAACyB,EAAE,GAAA,CACV,EACH,oBAAqB,MAAOE,EAAS,CAAE,MAAA1C,EAAO,SAAAE,EAAU,QAAApG,KAAc,OAChE,OAACiG,EAAaC,CAAK,EAGlBC,EAAgBC,CAAQ,GAGzBnG,EAAA2I,EAAQ,OAAR,MAAA3I,EAAc,YACTkI,EACL,oBACA,CACE,aAAc,iBACd,MAAAjC,EACA,SAAAE,EACA,QAASpB,EAAkBC,EAAWjF,CAAO,CAC/C,EACA,CACE,QAAS,CACP,cAAe,UAAU4I,EAAQ,YAAY,OAC/C,CACF,CAAA,EAGKT,EAA4B,yBAA0B,CAC3D,MAAAjC,EACA,SAAAE,EACA,QAASpB,EAAkBC,EAAWjF,CAAO,CAAA,CAC9C,EAtBM,QAAQ,OAAuB,CAAE,MAAOwC,CAAwB,CAAA,EAHhE,QAAQ,OAAuB,CAAE,MAAOH,CAAqB,CAAA,CA2BxE,EACA,kBAAmB,MAAO0E,EAAG,CAAE,MAAAb,EAAO,QAAAlG,KAAc,CAC9C,GAAA,CAACiG,EAAaC,CAAK,EACrB,OAAO,QAAQ,OAAuB,CAAE,MAAO7D,CAAqB,CAAA,EAGtE,MAAM2G,EAAWhJ,GAAA,YAAAA,EAAS,SAMtBgJ,GAAU,OAAOhJ,EAAQ,SAC7B,MAAMiJ,EAAkB,MAAMd,EAC5B,mBACA,CAAE,MAAAjC,EAAO,QAAAlG,CAAQ,CAAA,EAEf,IAAAU,EACA,GAAA,CACWA,EAAA,MAAMF,EAAkByI,CAAe,QAC7CP,IACD,MAAA,IAAIvG,EAAcuG,EAAU,CACpC,CACA,OAAOP,EAA4B,0BAA2B,CAC5D,WAAAzH,EACA,QAAS,CACP,WAAYV,GAAA,YAAAA,EAAS,WACrB,SAAAgJ,CACF,CAAA,CACD,CACH,EACA,mBAAoB,SAAY,CAC9B,IAAIjJ,EAA6B,KACjC,GAAIiI,EAAY,CACR,MAAAkB,EAAWxD,EAAmB,cAAc,GAAK,KACvD,GAAIwD,EACE,GAAA,CAIK,MAAA,CAAE,QAHO,MAAMf,EAA0B,SAAU,CACxD,aAAce,CAAA,CACf,EACiB,MAAO,YAClBC,GACPpJ,EAASoJ,EAAsC,KACjD,KACK,CACCpJ,MAAAA,EAAQ2F,EAAmB,OAAO,EACxC,GAAI3F,EACF,OAAO,QAAQ,OAA6B,CAC1C,QAAS,KACT,MAAO,CACL,OAAQkC,EACR,MAAAlC,EACA,QAAS2F,EAAmB,kBAAkB,GAAK3F,CACrD,CAAA,CACD,CAEL,CACF,CACM,MAAAqJ,EAAe,MAAMnB,EAAcxG,CAAuB,EAChE,GAAI2H,EACE,GAAA,CAIK,MAAA,CAAE,QAHO,MAAMjB,EAA0B,SAAU,CACxD,aAAciB,CAAA,CACf,EACiB,MAAO,YAClBD,GACP,OAAApJ,EAASoJ,EAAsC,MACxC,QAAQ,OAA6B,CAAE,MAAApJ,CAAO,CAAA,CACvD,CAEF,OAAKA,IACKA,EAAA6C,IAEH,QAAQ,OAA6B,CAAE,MAAA7C,CAAO,CAAA,CACvD,CACF,EACA,OAAQ,CACN,yBAA0B,CAAC,CAAE,oBAAAsI,KACvBA,EAAsB,EACjB,IAEF,GAEX,CACF,CAAA,CAEJ,ECl4BO,MAAMgB,EAAW,CAQtB,YAAY,CACV,kBAAA9E,EAAoB,MACpB,WAAAyD,EAAa,GACb,iBAAAD,EAAmB,GACnB,MAAAuB,EAAQ,GACR,WAAAjG,EACA,UAAA4B,EACA,SAAAsE,KACGC,CAAA,EACkB,CAkBjB,GA7BE,KAAA,mBAAwD,IAY9D,KAAK,WAAanG,EAClB,KAAK,UAAY4B,EAEjB,KAAK,QAAU0C,GAAkB,CAC/B,GAAG6B,EACH,WAAAnG,EACA,UAAA4B,EACA,kBAAAV,EACA,WAAAyD,EACA,iBAAAD,CAAA,CACD,EAEGuB,IACF,KAAK,YAAcG,YAAU,KAAK,QAAS,CAAE,SAAAF,EAAU,EACvD,KAAK,YAAY,SAGf,OAAO,QAAW,aAAevB,EAC/B,GAAA,CAIG,KAAA,SAAW,IAAI,iBAAiB,OAAO,EAC5C,KAAK,SAAS,iBAAiB,UAAY0B,GAAU,OACnD,MAAMC,GAAgB1J,EAAA,KAAK,cAAL,YAAAA,EAAkB,MAAM,QAAQ,aAAa,MAC/D,KAAK,aAAeyJ,EAAM,OAASC,GACrC,KAAK,YAAY,KAAK,YAAa,CAAE,MAAOD,EAAM,KAAM,CAC1D,CACD,QAGH,CAEJ,CAEA,IAAI,aAA2C,CAC7C,OAAO,KAAK,YACd,CACA,IAAI,YAAY/C,EAA0C,CACxD,KAAK,aAAeA,EAChBA,GACF,KAAK,eAAe,QAASiD,GAAOA,EAAG,IAAI,CAAC,CAEhD,CAEA,QAAQA,EAAkC,CACpC,KAAK,YAEPA,EAAG,IAAI,EAIF,KAAA,eAAe,IAAIA,CAAE,CAE9B,CACF,CCtFA,MAAM3F,EAAY,OAAO,QAAW,YAG7B,MAAM4F,WAAyBR,EAAW,CAC/C,YAAY,IACPrJ,CAAA,EAIF,CACK,MAAA,CACJ,GAAGA,EACH,WAAYiE,GAAajE,EAAQ,WACjC,iBAAkBiE,GAAajE,EAAQ,iBACvC,kBAAmB,QAAA,CACpB,CACH,CACF,CAGO,MAAM8J,GAAgBD,GCHhBE,GAAwB,MACnC,CAAE,WAAA1G,EAAY,YAAAsD,CAAA,EACdqC,IACyC,CACnC,MAAApC,EAAMxD,EAAeC,CAAU,EACjC,GAAA,CACF,KAAM,CAAE,KAAMrD,GAAY,MAAM4G,EAAI,KAClC,qBACA,CAAC,EACD,CACE,QAAS,CACP,cAAe,UAAUD,GAAA,YAAAA,EAAa,MAAM,QAAQ,YAAY,OAClE,CACF,CAAA,EAEE,IAAAjG,EACA,GAAA,CACWA,EAAA,MAAMF,EAAkBR,CAAO,QACrC0I,GACD,MAAA,IAAIvG,EAAcuG,CAAU,CACpC,CACA,KAAM,CAAE,KAAMtE,GAAQ,MAAMwC,EAAI,KAC9B,wBACA,CAAE,WAAAlG,EAAY,SAAAsI,CAAS,EACvB,CACE,QAAS,CACP,cAAe,UAAUrC,GAAA,YAAAA,EAAa,MAAM,QAAQ,YAAY,OAClE,CACF,CAAA,EAEF,MAAO,CAAE,IAAAvC,EAAK,QAAS,GAAO,MAAO,KAAM,UAAW,UAC/CsE,GACD,KAAA,CAAE,MAAA3I,CAAU,EAAA2I,EAClB,MAAO,CAAE,QAAS,GAAM,MAAA3I,EAAO,UAAW,EAAM,CAClD,CACF,EC3CaiK,GAAqB,MAChCrD,EACAT,EACAlG,IAEA,IAAI,QAAmCiK,GAAY,CACjDtD,EAAY,KAAK,UAAW,CAC1B,MAAAT,EACA,QAAAlG,CAAA,CACD,EACW2G,EAAA,aAAcuD,GAAM,CAC1BA,EAAE,QAAQ,CAAE,KAAM,OAAS,CAAA,EACrBD,EAAA,CAAE,MAAOC,EAAE,QAAQ,MAAO,QAAS,GAAM,uBAAwB,EAAA,CAAO,EACvEA,EAAE,QAAQ,CAAE,KAAM,SAAW,CAAA,GACtCD,EAAQ,CAAE,MAAO,KAAM,QAAS,GAAO,uBAAwB,GAAM,CACvE,CACD,CACH,CAAC,ECjBUE,GAAwB,MACnCxD,EACAP,EACAI,IAEA,IAAI,QAAsCyD,GAAY,CACpDtD,EAAY,KAAK,UAAW,CAC1B,SAAAP,EAAU,OAAAI,CAAA,CACX,EACWG,EAAA,aAAcyD,GAAU,CAC9BA,EAAM,QAAQ,CAAE,KAAM,OAAS,CAAA,EACzBH,EAAA,CAAE,MAAOG,EAAM,QAAQ,MAAO,QAAS,GAAM,UAAW,EAAA,CAAO,EAC9DA,EAAM,QAAQ,CAAE,KAAM,SAAW,CAAA,GAC1CH,EAAQ,CAAE,MAAO,KAAM,QAAS,GAAO,UAAW,GAAM,CAC1D,CACD,CACH,CAAC,ECJUI,GAAyBC,GACpC,IAAI,QAAsCL,GAAY,CACpDK,EAAQ,KAAK,UAAU,EACfA,EAAA,aAAcF,GAAU,CAC1BA,EAAM,QAAQ,WAAW,EACnBH,EAAA,CACN,MAAO,KACP,QAAS,GACT,YAAa,GACb,cAAeG,EAAM,QAAQ,UAAY,EAAA,CAC1C,EACQA,EAAM,QAAQ,CAAE,KAAM,OAAS,CAAA,GAChCH,EAAA,CACN,MAAOG,EAAM,QAAQ,OAAS,KAC9B,QAAS,GACT,YAAa,GACb,cAAe,EAAA,CAChB,CACH,CACD,CACH,CAAC,EACUG,GAAqB,CAACD,EAA6ChD,IAC9E,IAAI,QAAmC2C,GAAY,CACjDK,EAAQ,KAAK,WAAY,CACvB,cAAe,OACf,KAAAhD,CAAA,CACD,EACOgD,EAAA,aAAcF,GAAU,CAC1BA,EAAM,QAAQ,CAAE,UAAW,WAAa,CAAA,EAC1CH,EAAQ,CAAE,MAAO,KAAM,YAAa,GAAM,QAAS,GAAO,EACjDG,EAAM,QAAQ,CAAE,UAAW,CAAE,KAAM,OAAU,CAAA,CAAC,GAC/CH,EAAA,CAAE,MAAOG,EAAM,QAAQ,MAAO,YAAa,GAAO,QAAS,EAAA,CAAM,CAC3E,CACD,CACH,CAAC,EC1CUI,GAAuB,MAClC7D,EACAT,EACAlG,IAEA,IAAI,QAASiK,GAAY,CACvBtD,EAAY,KAAK,UAAW,CAC1B,MAAAT,EACA,QAAAlG,CAAA,CACD,EACW2G,EAAA,aAAcyD,GAAU,CAC9BA,EAAM,QAAQ,CAAE,KAAM,OAAS,CAAA,EACzBH,EAAA,CAAE,MAAOG,EAAM,QAAQ,MAAO,QAAS,GAAM,OAAQ,EAAA,CAAO,EAC3DA,EAAM,QAAQ,CAAE,KAAM,SAAW,CAAA,GAC1CH,EAAQ,CAAE,MAAO,KAAM,QAAS,GAAO,OAAQ,GAAM,CACvD,CACD,CACH,CAAC,ECfUQ,GAA+B,CAC1C9D,EACAT,EACAlG,IAEA,IAAI,QAA6CiK,GAAY,CAC3DtD,EAAY,KAAK,UAAW,CAC1B,MAAAT,EACA,QAAAlG,CAAA,CACD,EACW2G,EAAA,aAAcyD,GAAU,CAC9BA,EAAM,QAAQ,CAAE,KAAM,OAAS,CAAA,EACzBH,EAAA,CAAE,MAAOG,EAAM,QAAQ,MAAO,QAAS,GAAM,OAAQ,EAAA,CAAO,EAC3DA,EAAM,QAAQ,CAAE,KAAM,SAAW,CAAA,GAC1CH,EAAQ,CAAE,MAAO,KAAM,QAAS,GAAO,OAAQ,GAAM,CACvD,CACD,CACH,CAAC,ECzBUS,GACX/D,GAEA,IAAI,QAASsD,GAAY,CACvB,KAAM,CAAE,QAAAU,CAAY,EAAAhE,EAAY,KAAK,kBAAkB,EAClDgE,GACKV,EAAA,CACN,UAAW,GACX,QAAS,GACT,MAAOnH,EACP,KAAM,KACN,YAAa,IAAA,CACd,EAES6D,EAAA,aAAcyD,GAAU,CAC9BA,EAAM,QAAQ,CAAE,eAAgB,UAAY,CAAA,GACtCH,EAAA,CACN,UAAW,GACX,QAAS,GACT,MAAO,KACP,KAAMG,EAAM,QAAQ,KACpB,YAAaA,EAAM,QAAQ,YAAY,KAAA,CACxC,EAECA,EAAM,QAAQ,CAAE,eAAgB,CAAE,UAAW,QAAW,CAAA,CAAC,GACnDH,EAAA,CACN,UAAW,GACX,QAAS,GACT,MAAOG,EAAM,QAAQ,OAAO,gBAAkB,KAC9C,KAAM,KACN,YAAa,IAAA,CACd,CACH,CACD,CACH,CAAC,ECpBUQ,GAA6B,CACxCjE,EACAT,EACAE,IAEA,IAAI,QAA2C6D,GAAY,CACzD,KAAM,CAAE,QAAAU,EAAS,QAAA/B,CAAA,EAAYjC,EAAY,KAAK,kBAAmB,CAC/D,MAAAT,EACA,SAAAE,CAAA,CACD,EACD,GAAI,CAACuE,EACH,OAAOV,EAAQ,CACb,YAAarB,EAAQ,YAAY,MACjC,MAAO9F,EACP,QAAS,GACT,UAAW,GACX,uBAAwB,GACxB,YAAa,GACb,IAAK,KACL,KAAM8F,EAAQ,IAAA,CACf,EAESjC,EAAA,aAAcyD,GAAU,CAEhCA,EAAM,QAAQ,CACZ,eAAgB,CAAE,UAAW,UAAW,EACxC,aAAc,CAAE,WAAY,wBAAyB,CAAA,CACtD,EAEOH,EAAA,CACN,YAAa,KACb,MAAO,KACP,QAAS,GACT,UAAW,GACX,uBAAwB,GACxB,YAAa,GACb,IAAK,KACL,KAAM,IAAA,CACP,EACQG,EAAM,QAAQ,CAAE,eAAgB,CAAE,UAAW,UAAa,CAAA,CAAC,EAC5DH,EAAA,CACN,YAAa,KACb,MAAO,KACP,QAAS,GACT,UAAW,GACX,uBAAwB,GACxB,YAAa,GACb,IAAKG,EAAM,QAAQ,IACnB,KAAM,IAAA,CACP,EACQA,EAAM,QAAQ,CAAE,eAAgB,CAAE,UAAW,QAAW,CAAA,CAAC,EAC1DH,EAAA,CACN,YAAa,KACb,MAAOG,EAAM,QAAQ,OAAO,gBAAkB,KAC9C,QAAS,GACT,UAAW,GACX,uBAAwB,GACxB,YAAa,GACb,IAAK,KACL,KAAM,IAAA,CACP,EACQA,EAAM,QAAQ,CAAE,eAAgB,UAAY,CAAA,GAC7CH,EAAA,CACN,YAAaG,EAAM,QAAQ,YAAY,MACvC,MAAO,KACP,QAAS,GACT,UAAW,GACX,uBAAwB,GACxB,YAAa,GACb,IAAK,KACL,KAAMA,EAAM,QAAQ,IAAA,CACrB,CACH,CACD,CACH,CAAC,ECrFUS,GAAiC,CAC5ClE,EACAT,EACAlG,IAEA,IAAI,QAA+CiK,GAAY,CAC7D,KAAM,CAAE,QAAAU,CAAY,EAAAhE,EAAY,KAAK,qBAAsB,CACzD,MAAAT,EACA,QAAAlG,CAAA,CACD,EACD,GAAI,CAAC2K,EACH,OAAOV,EAAQ,CACb,MAAOnH,EACP,QAAS,GACT,UAAW,EAAA,CACZ,EAES6D,EAAA,aAAcyD,GAAU,CAC9BA,EAAM,QAAQ,gCAAgC,EACxCH,EAAA,CACN,MAAOG,EAAM,QAAQ,OAAO,cAAgB,KAC5C,QAAS,GACT,UAAW,EAAA,CACZ,EAEDA,EAAM,QAAQ,CACZ,eAAgB,CAAE,UAAW,UAAW,EACxC,aAAc,CAAE,WAAY,wBAAyB,CAAA,CACtD,GAEDH,EAAQ,CAAE,MAAO,KAAM,QAAS,GAAO,UAAW,GAAM,CAC1D,CACD,CACH,CAAC,EC3BUa,GAAgC,CAACnE,EAA8BT,IAC1E,IAAI,QAAqD+D,GAAY,CAC7D,KAAA,CAAE,QAAAU,EAAS,QAAA/B,CAAA,EAAYjC,EAAY,KAAK,CAAE,KAAM,4BAA6B,MAAAT,CAAA,CAAO,EAC1F,GAAI,CAACyE,EACH,OAAOV,EAAQ,CACb,YAAarB,EAAQ,YAAY,MACjC,MAAO9F,EACP,QAAS,GACT,UAAW,GACX,uBAAwB,GACxB,KAAM8F,EAAQ,IAAA,CACf,EAESjC,EAAA,aAAcyD,GAAU,CAEhCA,EAAM,QAAQ,CACZ,eAAgB,CAAE,UAAW,UAAW,EACxC,aAAc,CAAE,WAAY,wBAAyB,CAAA,CACtD,EAEOH,EAAA,CACN,YAAa,KACb,MAAO,KACP,QAAS,GACT,UAAW,GACX,uBAAwB,GACxB,KAAM,IAAA,CACP,EACQG,EAAM,QAAQ,CAAE,eAAgB,CAAE,UAAW,QAAW,CAAA,CAAC,EAC1DH,EAAA,CACN,YAAa,KACb,MAAOG,EAAM,QAAQ,OAAO,gBAAkB,KAC9C,QAAS,GACT,UAAW,GACX,uBAAwB,GACxB,KAAM,IAAA,CACP,EACQA,EAAM,QAAQ,CAAE,eAAgB,UAAY,CAAA,GAC7CH,EAAA,CACN,YAAaG,EAAM,QAAQ,YAAY,MACvC,MAAO,KACP,QAAS,GACT,UAAW,GACX,uBAAwB,GACxB,KAAMA,EAAM,QAAQ,IAAA,CACrB,CACH,CACD,CACH,CAAC,ECxDUW,GAAuB,CAACpE,EAA8BmC,EAAatC,IAC9E,IAAI,QAAqCyD,GAAY,CACnD,KAAM,CAAE,QAAAU,EAAS,QAAA/B,CAAA,EAAYjC,EAAY,KAAK,kBAAmB,CAC/D,IAAAmC,EACA,OAAAtC,CAAA,CACD,EACD,GAAI,CAACmE,EACH,OAAOV,EAAQ,CACb,YAAarB,EAAQ,YAAY,MACjC,MAAO9F,EACP,QAAS,GACT,UAAW,GACX,KAAM8F,EAAQ,IAAA,CACf,EAESjC,EAAA,aAAcyD,GAAU,CAC9BA,EAAM,QAAQ,CAAE,eAAgB,CAAE,UAAW,QAAW,CAAA,CAAC,EACnDH,EAAA,CACN,YAAa,KACb,MAAOG,EAAM,QAAQ,OAAO,gBAAkB,KAC9C,QAAS,GACT,UAAW,GACX,KAAM,IAAA,CACP,EACQA,EAAM,QAAQ,CAAE,eAAgB,UAAY,CAAA,GAC7CH,EAAA,CACN,YAAaG,EAAM,QAAQ,YAAY,MACvC,MAAO,KACP,QAAS,GACT,UAAW,GACX,KAAMA,EAAM,QAAQ,IAAA,CACrB,CACH,CACD,CACH,CAAC,EC3BUY,GAA+B,CAC1CrE,EACAL,EACAtG,IAEA,IAAI,QAA6CiK,GAAY,CACrD,KAAA,CAAE,QAAAU,CAAY,EAAAhE,EAAY,KAAK,mBAAoB,CAAE,YAAAL,EAAa,QAAAtG,CAAA,CAAS,EACjF,GAAI,CAAC2K,EACH,OAAOV,EAAQ,CACb,MAAOnH,EACP,QAAS,GACT,UAAW,GACX,SAAU,EAAA,CACX,EAES6D,EAAA,aAAcyD,GAAU,CAC9BA,EAAM,QAAQ,kCAAkC,EAC1CH,EAAA,CACN,MAAO,KACP,QAAS,GACT,UAAW,GACX,SAAU,EAAA,CACX,EACQG,EAAM,QAAQ,gCAAgC,GAC/CH,EAAA,CACN,MAAOG,EAAM,QAAQ,OAAO,gBAAkB,KAC9C,QAAS,GACT,UAAW,GACX,SAAU,EAAA,CACX,CACH,CACD,CACH,CAAC,ECtCUa,GAAkC,CAC7CtE,EACAL,EACAwC,IAEA,IAAI,QAAgDmB,GAAY,CACxD,KAAA,CAAE,QAAAU,GAAYhE,EAAY,KAAK,CAAE,KAAM,uBAAwB,YAAAL,EAAa,IAAAwC,CAAA,CAAK,EACvF,GAAI,CAAC6B,EACH,OAAOV,EAAQ,CACb,MAAOnH,EACP,QAAS,GACT,UAAW,GACX,KAAM,KACN,YAAa,IAAA,CACd,EAES6D,EAAA,aAAcyD,GAAU,CAC9BA,EAAM,QAAQ,CAAE,eAAgB,UAAY,CAAA,EACtCH,EAAA,CACN,MAAO,KACP,QAAS,GACT,UAAW,GACX,KAAMG,EAAM,QAAQ,KACpB,YAAaA,EAAM,QAAQ,YAAY,KAAA,CACxC,EACQA,EAAM,QAAQ,CAAE,aAAc,CAAE,WAAY,QAAW,CAAA,CAAC,GACzDH,EAAA,CACN,MAAOG,EAAM,QAAQ,OAAO,gBAAkB,KAC9C,QAAS,GACT,UAAW,GACX,KAAM,KACN,YAAa,IAAA,CACd,CACH,CACD,CACH,CAAC,ECrCUc,GAAiB,MAC5BvE,EACAwE,IAEA,IAAI,QAAmClB,GAAY,CAC3C,KAAA,CAAE,MAAAlB,GAAUpC,EAAY,KAAK,UAAW,CAAE,IAAAwE,EAAK,EACjD,GAAApC,EAAM,OAAS,aACV,OAAAkB,EAAQ,CAAE,UAAW,GAAO,QAAS,GAAM,MAAOlH,GAAsB,EAErE4D,EAAA,aAAcyD,GAAU,CAC9BA,EAAM,QAAQ,CAAE,eAAgB,CAAE,UAAW,SAAY,CAAA,CAAC,EAC5DH,EAAQ,CAAE,UAAW,GAAM,QAAS,GAAO,MAAO,KAAM,EAC/CG,EAAM,QAAQ,iCAAiC,GAChDH,EAAA,CAAE,UAAW,GAAO,QAAS,GAAM,MAAOG,EAAM,QAAQ,OAAO,SAAW,IAAM,CAAA,CAC1F,CACD,CACH,CAAC,ECPUgB,GAA6B,CACxCzE,EACAT,EACAE,EACApG,IAEA,IAAI,QAA2CiK,GAAY,CACzD,KAAM,CAAE,QAAAU,EAAS,QAAA/B,CAAA,EAAYjC,EAAY,KAAK,wBAAyB,CACrE,MAAAT,EACA,SAAAE,EACA,QAAApG,CAAA,CACD,EACD,GAAI,CAAC2K,EACH,OAAOV,EAAQ,CACb,MAAOnH,EACP,YAAa8F,EAAQ,YAAY,MACjC,QAAS,GACT,UAAW,GACX,uBAAwB,GACxB,KAAMA,EAAQ,IAAA,CACf,EAESjC,EAAA,aAAcyD,GAAU,CAC9BA,EAAM,QAAQ,gCAAgC,EACxCH,EAAA,CACN,YAAa,KACb,MAAOG,EAAM,QAAQ,OAAO,cAAgB,KAC5C,QAAS,GACT,UAAW,GACX,uBAAwB,GACxB,KAAM,IAAA,CACP,EAEDA,EAAM,QAAQ,CACZ,eAAgB,CAAE,UAAW,UAAW,EACxC,aAAc,CAAE,WAAY,wBAAyB,CAAA,CACtD,EAEOH,EAAA,CACN,YAAa,KACb,MAAO,KACP,QAAS,GACT,UAAW,GACX,uBAAwB,GACxB,KAAM,IAAA,CACP,EACQG,EAAM,QAAQ,CAAE,eAAgB,WAAY,aAAc,UAAW,CAAC,GACvEH,EAAA,CACN,YAAaG,EAAM,QAAQ,YAAY,MACvC,MAAO,KACP,QAAS,GACT,UAAW,GACX,uBAAwB,GACxB,KAAMA,EAAM,QAAQ,IAAA,CACrB,CACH,CACD,CACH,CAAC,ECzDUiB,GAAgC,CAC3C1E,EACAT,EACAlG,IAEA,IAAI,QAAyCiK,GAAY,CACvD,KAAM,CAAE,QAAAU,EAAS,QAAA/B,CAAA,EAAYjC,EAAY,KAAK,sBAAuB,CACnE,MAAAT,EACA,QAAAlG,CAAA,CACD,EACD,GAAI,CAAC2K,EACH,OAAOV,EAAQ,CACb,MAAOnH,EACP,YAAa8F,EAAQ,YAAY,MACjC,QAAS,GACT,UAAW,GACX,uBAAwB,GACxB,KAAMA,EAAQ,IAAA,CACf,EAESjC,EAAA,aAAcyD,GAAU,CAC9BA,EAAM,QAAQ,gCAAgC,EACxCH,EAAA,CACN,YAAa,KACb,MAAOG,EAAM,QAAQ,OAAO,cAAgB,KAC5C,QAAS,GACT,UAAW,GACX,uBAAwB,GACxB,KAAM,IAAA,CACP,EAEDA,EAAM,QAAQ,CACZ,eAAgB,CAAE,UAAW,UAAW,EACxC,aAAc,CAAE,WAAY,wBAAyB,CAAA,CACtD,EAEOH,EAAA,CACN,YAAa,KACb,MAAO,KACP,QAAS,GACT,UAAW,GACX,uBAAwB,GACxB,KAAM,IAAA,CACP,EACQG,EAAM,QAAQ,CAAE,eAAgB,WAAY,aAAc,UAAW,CAAC,GACvEH,EAAA,CACN,YAAaG,EAAM,QAAQ,YAAY,MACvC,MAAO,KACP,QAAS,GACT,UAAW,GACX,uBAAwB,GACxB,KAAMA,EAAM,QAAQ,IAAA,CACrB,CACH,CACD,CACH,CAAC"}