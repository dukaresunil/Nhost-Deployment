{"version":3,"file":"index.esm.js","sources":["../src/hooks.tsx","../src/provider.tsx"],"sourcesContent":["import {\n  DocumentNode,\n  OperationVariables,\n  QueryHookOptions,\n  SubscriptionHookOptions,\n  TypedDocumentNode,\n  useQuery,\n  useSubscription\n} from '@apollo/client'\nimport { useAuthenticated } from '@nhost/react'\n\nexport function useAuthQuery<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: QueryHookOptions<TData, TVariables>\n) {\n  const isAuthenticated = useAuthenticated()\n  const newOptions = { ...options, skip: options?.skip || !isAuthenticated }\n  return useQuery(query, newOptions)\n}\n\nexport function useAuthSubscription<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables\n>(\n  subscription: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: SubscriptionHookOptions<TData, TVariables>\n) {\n  const isAuthenticated = useAuthenticated()\n  const newOptions: SubscriptionHookOptions<TData, TVariables> = {\n    ...options,\n    skip: options?.skip || !isAuthenticated\n  }\n\n  return useSubscription(subscription, newOptions)\n}\n\n// TODO consider other hooks\n/*\n- useAuthLazyQuery\n- useAuthMutation\n- useRoleQuery\n- useRoleLazyQuery\n- useRoleMutation\n- useRoleSubscription\n*/\n","import React, { PropsWithChildren, useEffect, useState } from 'react'\n\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client'\nimport { createApolloClient, NhostApolloClientOptions } from '@nhost/apollo'\n\n// This is needed because ApolloProvider can't be rendered without a client. To be able to render\n// the children without our client, we need an ApolloProvider because of potential underlying\n// useQuery hooks in customer applications. This way ApolloProvider and children can be rendered.\nconst mockApolloClient = new ApolloClient({ cache: new InMemoryCache() })\n\nexport const NhostApolloProvider: React.FC<PropsWithChildren<NhostApolloClientOptions>> = ({\n  children,\n  ...options\n}) => {\n  // * See https://github.com/nhost/nhost/pull/214#pullrequestreview-889730478\n  const [client, setClient] = useState<ReturnType<typeof createApolloClient>>()\n\n  // Note: Because we're using XState under the hood, we need to make sure to start the interpreter\n  // on the client side when the component is mounted. This is why we're using `useState` and\n  // `useEffect`.\n  useEffect(() => {\n    if (!client) {\n      setClient(createApolloClient(options))\n    }\n  }, [client, options])\n\n  return <ApolloProvider client={client || mockApolloClient}>{children}</ApolloProvider>\n}\n"],"names":["useAuthQuery","query","options","isAuthenticated","useAuthenticated","newOptions","useQuery","useAuthSubscription","subscription","useSubscription","mockApolloClient","ApolloClient","InMemoryCache","NhostApolloProvider","children","client","setClient","useState","useEffect","createApolloClient","React","ApolloProvider"],"mappings":";;;;AAWgB,SAAAA,EAIdC,GACAC,GACA;AACA,QAAMC,IAAkBC,KAClBC,IAAa,EAAE,GAAGH,GAAS,OAAMA,KAAA,gBAAAA,EAAS,SAAQ,CAACC;AAClD,SAAAG,EAASL,GAAOI,CAAU;AACnC;AAEgB,SAAAE,EAIdC,GACAN,GACA;AACA,QAAMC,IAAkBC,KAClBC,IAAyD;AAAA,IAC7D,GAAGH;AAAA,IACH,OAAMA,KAAA,gBAAAA,EAAS,SAAQ,CAACC;AAAA,EAAA;AAGnB,SAAAM,EAAgBD,GAAcH,CAAU;AACjD;AC7BA,MAAMK,IAAmB,IAAIC,EAAa,EAAE,OAAO,IAAIC,KAAiB,GAE3DC,IAA6E,CAAC;AAAA,EACzF,UAAAC;AAAA,EACA,GAAGZ;AACL,MAAM;AAEJ,QAAM,CAACa,GAAQC,CAAS,IAAIC,EAAgD;AAK5E,SAAAC,EAAU,MAAM;AACd,IAAKH,KACOC,EAAAG,EAAmBjB,CAAO,CAAC;AAAA,EACvC,GACC,CAACa,GAAQb,CAAO,CAAC,GAEZ,gBAAAkB,EAAA,cAAAC,GAAA,EAAe,QAAQN,KAAUL,KAAmBI,CAAS;AACvE;"}