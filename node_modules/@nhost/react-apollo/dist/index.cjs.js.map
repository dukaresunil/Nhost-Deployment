{"version":3,"file":"index.cjs.js","sources":["../src/hooks.tsx","../src/provider.tsx"],"sourcesContent":["import {\n  DocumentNode,\n  OperationVariables,\n  QueryHookOptions,\n  SubscriptionHookOptions,\n  TypedDocumentNode,\n  useQuery,\n  useSubscription\n} from '@apollo/client'\nimport { useAuthenticated } from '@nhost/react'\n\nexport function useAuthQuery<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: QueryHookOptions<TData, TVariables>\n) {\n  const isAuthenticated = useAuthenticated()\n  const newOptions = { ...options, skip: options?.skip || !isAuthenticated }\n  return useQuery(query, newOptions)\n}\n\nexport function useAuthSubscription<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables\n>(\n  subscription: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: SubscriptionHookOptions<TData, TVariables>\n) {\n  const isAuthenticated = useAuthenticated()\n  const newOptions: SubscriptionHookOptions<TData, TVariables> = {\n    ...options,\n    skip: options?.skip || !isAuthenticated\n  }\n\n  return useSubscription(subscription, newOptions)\n}\n\n// TODO consider other hooks\n/*\n- useAuthLazyQuery\n- useAuthMutation\n- useRoleQuery\n- useRoleLazyQuery\n- useRoleMutation\n- useRoleSubscription\n*/\n","import React, { PropsWithChildren, useEffect, useState } from 'react'\n\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client'\nimport { createApolloClient, NhostApolloClientOptions } from '@nhost/apollo'\n\n// This is needed because ApolloProvider can't be rendered without a client. To be able to render\n// the children without our client, we need an ApolloProvider because of potential underlying\n// useQuery hooks in customer applications. This way ApolloProvider and children can be rendered.\nconst mockApolloClient = new ApolloClient({ cache: new InMemoryCache() })\n\nexport const NhostApolloProvider: React.FC<PropsWithChildren<NhostApolloClientOptions>> = ({\n  children,\n  ...options\n}) => {\n  // * See https://github.com/nhost/nhost/pull/214#pullrequestreview-889730478\n  const [client, setClient] = useState<ReturnType<typeof createApolloClient>>()\n\n  // Note: Because we're using XState under the hood, we need to make sure to start the interpreter\n  // on the client side when the component is mounted. This is why we're using `useState` and\n  // `useEffect`.\n  useEffect(() => {\n    if (!client) {\n      setClient(createApolloClient(options))\n    }\n  }, [client, options])\n\n  return <ApolloProvider client={client || mockApolloClient}>{children}</ApolloProvider>\n}\n"],"names":["useAuthQuery","query","options","isAuthenticated","useAuthenticated","newOptions","useQuery","useAuthSubscription","subscription","useSubscription","mockApolloClient","ApolloClient","InMemoryCache","NhostApolloProvider","children","client","setClient","useState","useEffect","createApolloClient","React","ApolloProvider"],"mappings":"0LAWgB,SAAAA,EAIdC,EACAC,EACA,CACA,MAAMC,EAAkBC,EAAAA,mBAClBC,EAAa,CAAE,GAAGH,EAAS,MAAMA,GAAA,YAAAA,EAAS,OAAQ,CAACC,GAClD,OAAAG,EAAA,SAASL,EAAOI,CAAU,CACnC,CAEgB,SAAAE,EAIdC,EACAN,EACA,CACA,MAAMC,EAAkBC,EAAAA,mBAClBC,EAAyD,CAC7D,GAAGH,EACH,MAAMA,GAAA,YAAAA,EAAS,OAAQ,CAACC,CAAA,EAGnB,OAAAM,EAAA,gBAAgBD,EAAcH,CAAU,CACjD,CC7BA,MAAMK,EAAmB,IAAIC,EAAAA,aAAa,CAAE,MAAO,IAAIC,EAAAA,cAAiB,EAE3DC,EAA6E,CAAC,CACzF,SAAAC,EACA,GAAGZ,CACL,IAAM,CAEJ,KAAM,CAACa,EAAQC,CAAS,EAAIC,EAAgD,SAAA,EAK5EC,OAAAA,EAAAA,UAAU,IAAM,CACTH,GACOC,EAAAG,EAAAA,mBAAmBjB,CAAO,CAAC,CACvC,EACC,CAACa,EAAQb,CAAO,CAAC,EAEZkB,EAAA,cAAAC,iBAAA,CAAe,OAAQN,GAAUL,GAAmBI,CAAS,CACvE"}