import { createHttpLink as M, split as P, from as G, ApolloClient as V, InMemoryCache as g } from "@apollo/client/core";
import { setContext as H } from "@apollo/client/link/context";
import { GraphQLWsLink as U } from "@apollo/client/link/subscriptions";
import { getMainDefinition as W } from "@apollo/client/utilities";
import { jwtDecode as _ } from "jwt-decode";
import { createClient as L } from "graphql-ws";
function R(n) {
  let c = !1, l = () => {
    c = !0;
  }, p = !1, u, m;
  const w = L({
    ...n,
    on: {
      ...n.on,
      error: (i) => {
        var t, a;
        console.error(i), (a = (t = n.on) == null ? void 0 : t.error) == null || a.call(t, i), l();
      },
      ping: (i) => {
        i || (m = setTimeout(() => {
          w.terminate(), l();
        }, 5e3));
      },
      pong: (i) => {
        i && clearTimeout(m);
      },
      opened: (i) => {
        var t, a;
        u = i, (a = (t = n.on) == null ? void 0 : t.opened) == null || a.call(t, u), p = !0, l = () => {
          u.readyState === WebSocket.OPEN ? u.close(4205, "Client Restart") : c = !0;
        }, c && (c = !1, l());
      },
      closed: (i) => {
        var t, a;
        (a = (t = n == null ? void 0 : n.on) == null ? void 0 : t.closed) == null || a.call(t, i), p = !1;
      }
    }
  });
  return {
    ...w,
    restart: () => l(),
    isOpen: () => p
  };
}
const O = typeof window != "undefined", j = ({
  nhost: n,
  graphqlUrl: c,
  headers: l = {},
  publicRole: p = "public",
  fetchPolicy: u,
  cache: m = new g(),
  connectToDevTools: w = O && process.env.NODE_ENV === "development",
  onError: i,
  link: t,
  generateLinks: a
}) => {
  const N = c || (n == null ? void 0 : n.graphql.httpUrl);
  if (!N)
    throw Error("Can't initialize the Apollo Client: no backend Url has been provided");
  const h = N, k = n == null ? void 0 : n.auth.client.interpreter;
  let e = null;
  const x = () => {
    if (!(e != null && e.value))
      return !1;
    const o = 3 * 1e3;
    return _(e.value).exp * 1e3 > Date.now() - o;
  }, E = () => !!(e != null && e.value) && !!(e != null && e.expiresAt) && (e == null ? void 0 : e.expiresAt) > /* @__PURE__ */ new Date() && x(), D = () => !e || E(), v = () => {
    if (D())
      return Promise.resolve();
    const r = () => D() ? Promise.resolve(!0) : new Promise((o) => {
      setTimeout(() => r().then(o), 100);
    });
    return r();
  }, b = async () => {
    await v();
    const r = {
      ...l,
      "Sec-WebSocket-Protocol": "graphql-ws"
    };
    return e ? r.authorization = `Bearer ${e.value}` : r.role = p, r;
  }, s = O ? R({
    url: h.startsWith("https") ? h.replace(/^https/, "wss") : h.replace(/^http/, "ws"),
    shouldRetry: () => !0,
    retryAttempts: 100,
    retryWait: async (r) => new Promise(
      (y) => setTimeout(
        y,
        1e3 * Math.pow(2, r) + Math.floor(Math.random() * 3e3)
      )
    ),
    connectionParams: async () => ({
      headers: {
        ...l,
        ...await b()
      }
    })
  }) : null, A = s ? new U(s) : null, S = H(async (r, { headers: o }) => ({
    headers: {
      ...o,
      ...await b()
    }
  })).concat(M({ uri: h })), C = A ? P(
    ({ query: r }) => {
      const o = W(r), { kind: f } = o;
      let y;
      return "operation" in o && (y = o.operation), f === "OperationDefinition" && y === "subscription";
    },
    A,
    S
  ) : S, d = [];
  i && d.push(i), t && d.push(t), d.push(C);
  const I = G(a ? a(d) : d), T = new V({
    cache: m || new g(),
    ssrMode: !O,
    defaultOptions: {
      watchQuery: {
        fetchPolicy: u
      }
    },
    connectToDevTools: w,
    link: I
  });
  return k == null || k.onTransition(async (r, o) => {
    if (["SIGNOUT", "SIGNED_IN", "TOKEN_CHANGED"].includes(o.type)) {
      if (o.type === "SIGNOUT" || o.type === "TOKEN_CHANGED" && r.context.accessToken.value === null) {
        e = null;
        try {
          await T.resetStore();
        } catch (f) {
          console.error("Error resetting Apollo client cache"), console.error(f);
        }
        return;
      }
      if (e = r.context.accessToken, !O || !(s != null && s.isOpen()))
        return;
      s == null || s.restart();
    }
  }), T;
};
export {
  j as createApolloClient
};
//# sourceMappingURL=index.esm.js.map
