{"version":3,"file":"apollo.umd.js","sources":["../../../node_modules/.pnpm/jwt-decode@4.0.0/node_modules/jwt-decode/build/esm/index.js","../../../node_modules/.pnpm/graphql-ws@5.16.0_graphql@16.8.1/node_modules/graphql-ws/lib/utils.mjs","../../../node_modules/.pnpm/graphql-ws@5.16.0_graphql@16.8.1/node_modules/graphql-ws/lib/common.mjs","../../../node_modules/.pnpm/graphql-ws@5.16.0_graphql@16.8.1/node_modules/graphql-ws/lib/client.mjs","../src/ws.ts","../src/index.ts"],"sourcesContent":["export class InvalidTokenError extends Error {\n}\nInvalidTokenError.prototype.name = \"InvalidTokenError\";\nfunction b64DecodeUnicode(str) {\n    return decodeURIComponent(atob(str).replace(/(.)/g, (m, p) => {\n        let code = p.charCodeAt(0).toString(16).toUpperCase();\n        if (code.length < 2) {\n            code = \"0\" + code;\n        }\n        return \"%\" + code;\n    }));\n}\nfunction base64UrlDecode(str) {\n    let output = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch (output.length % 4) {\n        case 0:\n            break;\n        case 2:\n            output += \"==\";\n            break;\n        case 3:\n            output += \"=\";\n            break;\n        default:\n            throw new Error(\"base64 string is not of the correct length\");\n    }\n    try {\n        return b64DecodeUnicode(output);\n    }\n    catch (err) {\n        return atob(output);\n    }\n}\nexport function jwtDecode(token, options) {\n    if (typeof token !== \"string\") {\n        throw new InvalidTokenError(\"Invalid token specified: must be a string\");\n    }\n    options || (options = {});\n    const pos = options.header === true ? 0 : 1;\n    const part = token.split(\".\")[pos];\n    if (typeof part !== \"string\") {\n        throw new InvalidTokenError(`Invalid token specified: missing part #${pos + 1}`);\n    }\n    let decoded;\n    try {\n        decoded = base64UrlDecode(part);\n    }\n    catch (e) {\n        throw new InvalidTokenError(`Invalid token specified: invalid base64 for part #${pos + 1} (${e.message})`);\n    }\n    try {\n        return JSON.parse(decoded);\n    }\n    catch (e) {\n        throw new InvalidTokenError(`Invalid token specified: invalid json for part #${pos + 1} (${e.message})`);\n    }\n}\n","/** @private */\nexport function extendedTypeof(val) {\n    if (val === null) {\n        return 'null';\n    }\n    if (Array.isArray(val)) {\n        return 'array';\n    }\n    return typeof val;\n}\n/** @private */\nexport function isObject(val) {\n    return extendedTypeof(val) === 'object';\n}\n/** @private */\nexport function isAsyncIterable(val) {\n    return typeof Object(val)[Symbol.asyncIterator] === 'function';\n}\n/** @private */\nexport function isAsyncGenerator(val) {\n    return (isObject(val) &&\n        typeof Object(val)[Symbol.asyncIterator] === 'function' &&\n        typeof val.return === 'function'\n    // for lazy ones, we only need the return anyway\n    // typeof val.throw === 'function' &&\n    // typeof val.next === 'function'\n    );\n}\n/** @private */\nexport function areGraphQLErrors(obj) {\n    return (Array.isArray(obj) &&\n        // must be at least one error\n        obj.length > 0 &&\n        // error has at least a message\n        obj.every((ob) => 'message' in ob));\n}\n/**\n * Limits the WebSocket close event reason to not exceed a length of one frame.\n * Reference: https://datatracker.ietf.org/doc/html/rfc6455#section-5.2.\n *\n * @private\n */\nexport function limitCloseReason(reason, whenTooLong) {\n    return reason.length < 124 ? reason : whenTooLong;\n}\n","/**\n *\n * common\n *\n */\nimport { areGraphQLErrors, extendedTypeof, isObject } from './utils.mjs';\n/**\n * The WebSocket sub-protocol used for the [GraphQL over WebSocket Protocol](https://github.com/graphql/graphql-over-http/blob/main/rfcs/GraphQLOverWebSocket.md).\n *\n * @category Common\n */\nexport const GRAPHQL_TRANSPORT_WS_PROTOCOL = 'graphql-transport-ws';\n/**\n * The deprecated subprotocol used by [subscriptions-transport-ws](https://github.com/apollographql/subscriptions-transport-ws).\n *\n * @private\n */\nexport const DEPRECATED_GRAPHQL_WS_PROTOCOL = 'graphql-ws';\n/**\n * `graphql-ws` expected and standard close codes of the [GraphQL over WebSocket Protocol](https://github.com/graphql/graphql-over-http/blob/main/rfcs/GraphQLOverWebSocket.md).\n *\n * @category Common\n */\nexport var CloseCode;\n(function (CloseCode) {\n    CloseCode[CloseCode[\"InternalServerError\"] = 4500] = \"InternalServerError\";\n    CloseCode[CloseCode[\"InternalClientError\"] = 4005] = \"InternalClientError\";\n    CloseCode[CloseCode[\"BadRequest\"] = 4400] = \"BadRequest\";\n    CloseCode[CloseCode[\"BadResponse\"] = 4004] = \"BadResponse\";\n    /** Tried subscribing before connect ack */\n    CloseCode[CloseCode[\"Unauthorized\"] = 4401] = \"Unauthorized\";\n    CloseCode[CloseCode[\"Forbidden\"] = 4403] = \"Forbidden\";\n    CloseCode[CloseCode[\"SubprotocolNotAcceptable\"] = 4406] = \"SubprotocolNotAcceptable\";\n    CloseCode[CloseCode[\"ConnectionInitialisationTimeout\"] = 4408] = \"ConnectionInitialisationTimeout\";\n    CloseCode[CloseCode[\"ConnectionAcknowledgementTimeout\"] = 4504] = \"ConnectionAcknowledgementTimeout\";\n    /** Subscriber distinction is very important */\n    CloseCode[CloseCode[\"SubscriberAlreadyExists\"] = 4409] = \"SubscriberAlreadyExists\";\n    CloseCode[CloseCode[\"TooManyInitialisationRequests\"] = 4429] = \"TooManyInitialisationRequests\";\n})(CloseCode || (CloseCode = {}));\n/**\n * Types of messages allowed to be sent by the client/server over the WS protocol.\n *\n * @category Common\n */\nexport var MessageType;\n(function (MessageType) {\n    MessageType[\"ConnectionInit\"] = \"connection_init\";\n    MessageType[\"ConnectionAck\"] = \"connection_ack\";\n    MessageType[\"Ping\"] = \"ping\";\n    MessageType[\"Pong\"] = \"pong\";\n    MessageType[\"Subscribe\"] = \"subscribe\";\n    MessageType[\"Next\"] = \"next\";\n    MessageType[\"Error\"] = \"error\";\n    MessageType[\"Complete\"] = \"complete\";\n})(MessageType || (MessageType = {}));\n/**\n * Validates the message against the GraphQL over WebSocket Protocol.\n *\n * Invalid messages will throw descriptive errors.\n *\n * @category Common\n */\nexport function validateMessage(val) {\n    if (!isObject(val)) {\n        throw new Error(`Message is expected to be an object, but got ${extendedTypeof(val)}`);\n    }\n    if (!val.type) {\n        throw new Error(`Message is missing the 'type' property`);\n    }\n    if (typeof val.type !== 'string') {\n        throw new Error(`Message is expects the 'type' property to be a string, but got ${extendedTypeof(val.type)}`);\n    }\n    switch (val.type) {\n        case MessageType.ConnectionInit:\n        case MessageType.ConnectionAck:\n        case MessageType.Ping:\n        case MessageType.Pong: {\n            if (val.payload != null && !isObject(val.payload)) {\n                throw new Error(`\"${val.type}\" message expects the 'payload' property to be an object or nullish or missing, but got \"${val.payload}\"`);\n            }\n            break;\n        }\n        case MessageType.Subscribe: {\n            if (typeof val.id !== 'string') {\n                throw new Error(`\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);\n            }\n            if (!val.id) {\n                throw new Error(`\"${val.type}\" message requires a non-empty 'id' property`);\n            }\n            if (!isObject(val.payload)) {\n                throw new Error(`\"${val.type}\" message expects the 'payload' property to be an object, but got ${extendedTypeof(val.payload)}`);\n            }\n            if (typeof val.payload.query !== 'string') {\n                throw new Error(`\"${val.type}\" message payload expects the 'query' property to be a string, but got ${extendedTypeof(val.payload.query)}`);\n            }\n            if (val.payload.variables != null && !isObject(val.payload.variables)) {\n                throw new Error(`\"${val.type}\" message payload expects the 'variables' property to be a an object or nullish or missing, but got ${extendedTypeof(val.payload.variables)}`);\n            }\n            if (val.payload.operationName != null &&\n                extendedTypeof(val.payload.operationName) !== 'string') {\n                throw new Error(`\"${val.type}\" message payload expects the 'operationName' property to be a string or nullish or missing, but got ${extendedTypeof(val.payload.operationName)}`);\n            }\n            if (val.payload.extensions != null && !isObject(val.payload.extensions)) {\n                throw new Error(`\"${val.type}\" message payload expects the 'extensions' property to be a an object or nullish or missing, but got ${extendedTypeof(val.payload.extensions)}`);\n            }\n            break;\n        }\n        case MessageType.Next: {\n            if (typeof val.id !== 'string') {\n                throw new Error(`\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);\n            }\n            if (!val.id) {\n                throw new Error(`\"${val.type}\" message requires a non-empty 'id' property`);\n            }\n            if (!isObject(val.payload)) {\n                throw new Error(`\"${val.type}\" message expects the 'payload' property to be an object, but got ${extendedTypeof(val.payload)}`);\n            }\n            break;\n        }\n        case MessageType.Error: {\n            if (typeof val.id !== 'string') {\n                throw new Error(`\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);\n            }\n            if (!val.id) {\n                throw new Error(`\"${val.type}\" message requires a non-empty 'id' property`);\n            }\n            if (!areGraphQLErrors(val.payload)) {\n                throw new Error(`\"${val.type}\" message expects the 'payload' property to be an array of GraphQL errors, but got ${JSON.stringify(val.payload)}`);\n            }\n            break;\n        }\n        case MessageType.Complete: {\n            if (typeof val.id !== 'string') {\n                throw new Error(`\"${val.type}\" message expects the 'id' property to be a string, but got ${extendedTypeof(val.id)}`);\n            }\n            if (!val.id) {\n                throw new Error(`\"${val.type}\" message requires a non-empty 'id' property`);\n            }\n            break;\n        }\n        default:\n            throw new Error(`Invalid message 'type' property \"${val.type}\"`);\n    }\n    return val;\n}\n/**\n * Checks if the provided value is a valid GraphQL over WebSocket message.\n *\n * @deprecated Use `validateMessage` instead.\n *\n * @category Common\n */\nexport function isMessage(val) {\n    try {\n        validateMessage(val);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\n/**\n * Parses the raw websocket message data to a valid message.\n *\n * @category Common\n */\nexport function parseMessage(data, reviver) {\n    return validateMessage(typeof data === 'string' ? JSON.parse(data, reviver) : data);\n}\n/**\n * Stringifies a valid message ready to be sent through the socket.\n *\n * @category Common\n */\nexport function stringifyMessage(msg, replacer) {\n    validateMessage(msg);\n    return JSON.stringify(msg, replacer);\n}\n","/**\n *\n * client\n *\n */\nvar __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }\nvar __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n    function fulfill(value) { resume(\"next\", value); }\n    function reject(value) { resume(\"throw\", value); }\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n};\nimport { GRAPHQL_TRANSPORT_WS_PROTOCOL, CloseCode, MessageType, parseMessage, stringifyMessage, } from './common.mjs';\nimport { isObject, limitCloseReason } from './utils.mjs';\n/** This file is the entry point for browsers, re-export common elements. */\nexport * from './common.mjs';\n/**\n * Creates a disposable GraphQL over WebSocket client.\n *\n * @category Client\n */\nexport function createClient(options) {\n    const { url, connectionParams, lazy = true, onNonLazyError = console.error, lazyCloseTimeout: lazyCloseTimeoutMs = 0, keepAlive = 0, disablePong, connectionAckWaitTimeout = 0, retryAttempts = 5, retryWait = async function randomisedExponentialBackoff(retries) {\n        let retryDelay = 1000; // start with 1s delay\n        for (let i = 0; i < retries; i++) {\n            retryDelay *= 2;\n        }\n        await new Promise((resolve) => setTimeout(resolve, retryDelay +\n            // add random timeout from 300ms to 3s\n            Math.floor(Math.random() * (3000 - 300) + 300)));\n    }, shouldRetry = isLikeCloseEvent, isFatalConnectionProblem, on, webSocketImpl, \n    /**\n     * Generates a v4 UUID to be used as the ID using `Math`\n     * as the random number generator. Supply your own generator\n     * in case you need more uniqueness.\n     *\n     * Reference: https://gist.github.com/jed/982883\n     */\n    generateID = function generateUUID() {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n            const r = (Math.random() * 16) | 0, v = c == 'x' ? r : (r & 0x3) | 0x8;\n            return v.toString(16);\n        });\n    }, jsonMessageReplacer: replacer, jsonMessageReviver: reviver, } = options;\n    let ws;\n    if (webSocketImpl) {\n        if (!isWebSocket(webSocketImpl)) {\n            throw new Error('Invalid WebSocket implementation provided');\n        }\n        ws = webSocketImpl;\n    }\n    else if (typeof WebSocket !== 'undefined') {\n        ws = WebSocket;\n    }\n    else if (typeof global !== 'undefined') {\n        ws =\n            global.WebSocket ||\n                // @ts-expect-error: Support more browsers\n                global.MozWebSocket;\n    }\n    else if (typeof window !== 'undefined') {\n        ws =\n            window.WebSocket ||\n                // @ts-expect-error: Support more browsers\n                window.MozWebSocket;\n    }\n    if (!ws)\n        throw new Error(\"WebSocket implementation missing; on Node you can `import WebSocket from 'ws';` and pass `webSocketImpl: WebSocket` to `createClient`\");\n    const WebSocketImpl = ws;\n    // websocket status emitter, subscriptions are handled differently\n    const emitter = (() => {\n        const message = (() => {\n            const listeners = {};\n            return {\n                on(id, listener) {\n                    listeners[id] = listener;\n                    return () => {\n                        delete listeners[id];\n                    };\n                },\n                emit(message) {\n                    var _a;\n                    if ('id' in message)\n                        (_a = listeners[message.id]) === null || _a === void 0 ? void 0 : _a.call(listeners, message);\n                },\n            };\n        })();\n        const listeners = {\n            connecting: (on === null || on === void 0 ? void 0 : on.connecting) ? [on.connecting] : [],\n            opened: (on === null || on === void 0 ? void 0 : on.opened) ? [on.opened] : [],\n            connected: (on === null || on === void 0 ? void 0 : on.connected) ? [on.connected] : [],\n            ping: (on === null || on === void 0 ? void 0 : on.ping) ? [on.ping] : [],\n            pong: (on === null || on === void 0 ? void 0 : on.pong) ? [on.pong] : [],\n            message: (on === null || on === void 0 ? void 0 : on.message) ? [message.emit, on.message] : [message.emit],\n            closed: (on === null || on === void 0 ? void 0 : on.closed) ? [on.closed] : [],\n            error: (on === null || on === void 0 ? void 0 : on.error) ? [on.error] : [],\n        };\n        return {\n            onMessage: message.on,\n            on(event, listener) {\n                const l = listeners[event];\n                l.push(listener);\n                return () => {\n                    l.splice(l.indexOf(listener), 1);\n                };\n            },\n            emit(event, ...args) {\n                // we copy the listeners so that unlistens dont \"pull the rug under our feet\"\n                for (const listener of [...listeners[event]]) {\n                    // @ts-expect-error: The args should fit\n                    listener(...args);\n                }\n            },\n        };\n    })();\n    // invokes the callback either when an error or closed event is emitted,\n    // first one that gets called prevails, other emissions are ignored\n    function errorOrClosed(cb) {\n        const listening = [\n            // errors are fatal and more critical than close events, throw them first\n            emitter.on('error', (err) => {\n                listening.forEach((unlisten) => unlisten());\n                cb(err);\n            }),\n            // closes can be graceful and not fatal, throw them second (if error didnt throw)\n            emitter.on('closed', (event) => {\n                listening.forEach((unlisten) => unlisten());\n                cb(event);\n            }),\n        ];\n    }\n    let connecting, locks = 0, lazyCloseTimeout, retrying = false, retries = 0, disposed = false;\n    async function connect() {\n        // clear the lazy close timeout immediatelly so that close gets debounced\n        // see: https://github.com/enisdenjo/graphql-ws/issues/388\n        clearTimeout(lazyCloseTimeout);\n        const [socket, throwOnClose] = await (connecting !== null && connecting !== void 0 ? connecting : (connecting = new Promise((connected, denied) => (async () => {\n            if (retrying) {\n                await retryWait(retries);\n                // subscriptions might complete while waiting for retry\n                if (!locks) {\n                    connecting = undefined;\n                    return denied({ code: 1000, reason: 'All Subscriptions Gone' });\n                }\n                retries++;\n            }\n            emitter.emit('connecting', retrying);\n            const socket = new WebSocketImpl(typeof url === 'function' ? await url() : url, GRAPHQL_TRANSPORT_WS_PROTOCOL);\n            let connectionAckTimeout, queuedPing;\n            function enqueuePing() {\n                if (isFinite(keepAlive) && keepAlive > 0) {\n                    clearTimeout(queuedPing); // in case where a pong was received before a ping (this is valid behaviour)\n                    queuedPing = setTimeout(() => {\n                        if (socket.readyState === WebSocketImpl.OPEN) {\n                            socket.send(stringifyMessage({ type: MessageType.Ping }));\n                            emitter.emit('ping', false, undefined);\n                        }\n                    }, keepAlive);\n                }\n            }\n            errorOrClosed((errOrEvent) => {\n                connecting = undefined;\n                clearTimeout(connectionAckTimeout);\n                clearTimeout(queuedPing);\n                denied(errOrEvent);\n                if (errOrEvent instanceof TerminatedCloseEvent) {\n                    socket.close(4499, 'Terminated'); // close event is artificial and emitted manually, see `Client.terminate()` below\n                    socket.onerror = null;\n                    socket.onclose = null;\n                }\n            });\n            socket.onerror = (err) => emitter.emit('error', err);\n            socket.onclose = (event) => emitter.emit('closed', event);\n            socket.onopen = async () => {\n                try {\n                    emitter.emit('opened', socket);\n                    const payload = typeof connectionParams === 'function'\n                        ? await connectionParams()\n                        : connectionParams;\n                    // connectionParams might take too long causing the server to kick off the client\n                    // the necessary error/close event is already reported - simply stop execution\n                    if (socket.readyState !== WebSocketImpl.OPEN)\n                        return;\n                    socket.send(stringifyMessage(payload\n                        ? {\n                            type: MessageType.ConnectionInit,\n                            payload,\n                        }\n                        : {\n                            type: MessageType.ConnectionInit,\n                            // payload is completely absent if not provided\n                        }, replacer));\n                    if (isFinite(connectionAckWaitTimeout) &&\n                        connectionAckWaitTimeout > 0) {\n                        connectionAckTimeout = setTimeout(() => {\n                            socket.close(CloseCode.ConnectionAcknowledgementTimeout, 'Connection acknowledgement timeout');\n                        }, connectionAckWaitTimeout);\n                    }\n                    enqueuePing(); // enqueue ping (noop if disabled)\n                }\n                catch (err) {\n                    emitter.emit('error', err);\n                    socket.close(CloseCode.InternalClientError, limitCloseReason(err instanceof Error ? err.message : new Error(err).message, 'Internal client error'));\n                }\n            };\n            let acknowledged = false;\n            socket.onmessage = ({ data }) => {\n                try {\n                    const message = parseMessage(data, reviver);\n                    emitter.emit('message', message);\n                    if (message.type === 'ping' || message.type === 'pong') {\n                        emitter.emit(message.type, true, message.payload); // received\n                        if (message.type === 'pong') {\n                            enqueuePing(); // enqueue next ping (noop if disabled)\n                        }\n                        else if (!disablePong) {\n                            // respond with pong on ping\n                            socket.send(stringifyMessage(message.payload\n                                ? {\n                                    type: MessageType.Pong,\n                                    payload: message.payload,\n                                }\n                                : {\n                                    type: MessageType.Pong,\n                                    // payload is completely absent if not provided\n                                }));\n                            emitter.emit('pong', false, message.payload);\n                        }\n                        return; // ping and pongs can be received whenever\n                    }\n                    if (acknowledged)\n                        return; // already connected and acknowledged\n                    if (message.type !== MessageType.ConnectionAck)\n                        throw new Error(`First message cannot be of type ${message.type}`);\n                    clearTimeout(connectionAckTimeout);\n                    acknowledged = true;\n                    emitter.emit('connected', socket, message.payload, retrying); // connected = socket opened + acknowledged\n                    retrying = false; // future lazy connects are not retries\n                    retries = 0; // reset the retries on connect\n                    connected([\n                        socket,\n                        new Promise((_, reject) => errorOrClosed(reject)),\n                    ]);\n                }\n                catch (err) {\n                    socket.onmessage = null; // stop reading messages as soon as reading breaks once\n                    emitter.emit('error', err);\n                    socket.close(CloseCode.BadResponse, limitCloseReason(err instanceof Error ? err.message : new Error(err).message, 'Bad response'));\n                }\n            };\n        })())));\n        // if the provided socket is in a closing state, wait for the throw on close\n        if (socket.readyState === WebSocketImpl.CLOSING)\n            await throwOnClose;\n        let release = () => {\n            // releases this connection\n        };\n        const released = new Promise((resolve) => (release = resolve));\n        return [\n            socket,\n            release,\n            Promise.race([\n                // wait for\n                released.then(() => {\n                    if (!locks) {\n                        // and if no more locks are present, complete the connection\n                        const complete = () => socket.close(1000, 'Normal Closure');\n                        if (isFinite(lazyCloseTimeoutMs) && lazyCloseTimeoutMs > 0) {\n                            // if the keepalive is set, allow for the specified calmdown time and\n                            // then complete if the socket is still open.\n                            lazyCloseTimeout = setTimeout(() => {\n                                if (socket.readyState === WebSocketImpl.OPEN)\n                                    complete();\n                            }, lazyCloseTimeoutMs);\n                        }\n                        else {\n                            // otherwise complete immediately\n                            complete();\n                        }\n                    }\n                }),\n                // or\n                throwOnClose,\n            ]),\n        ];\n    }\n    /**\n     * Checks the `connect` problem and evaluates if the client should retry.\n     */\n    function shouldRetryConnectOrThrow(errOrCloseEvent) {\n        // some close codes are worth reporting immediately\n        if (isLikeCloseEvent(errOrCloseEvent) &&\n            (isFatalInternalCloseCode(errOrCloseEvent.code) ||\n                [\n                    CloseCode.InternalServerError,\n                    CloseCode.InternalClientError,\n                    CloseCode.BadRequest,\n                    CloseCode.BadResponse,\n                    CloseCode.Unauthorized,\n                    // CloseCode.Forbidden, might grant access out after retry\n                    CloseCode.SubprotocolNotAcceptable,\n                    // CloseCode.ConnectionInitialisationTimeout, might not time out after retry\n                    // CloseCode.ConnectionAcknowledgementTimeout, might not time out after retry\n                    CloseCode.SubscriberAlreadyExists,\n                    CloseCode.TooManyInitialisationRequests,\n                    // 4499, // Terminated, probably because the socket froze, we want to retry\n                ].includes(errOrCloseEvent.code)))\n            throw errOrCloseEvent;\n        // client was disposed, no retries should proceed regardless\n        if (disposed)\n            return false;\n        // normal closure (possibly all subscriptions have completed)\n        // if no locks were acquired in the meantime, shouldnt try again\n        if (isLikeCloseEvent(errOrCloseEvent) && errOrCloseEvent.code === 1000)\n            return locks > 0;\n        // retries are not allowed or we tried to many times, report error\n        if (!retryAttempts || retries >= retryAttempts)\n            throw errOrCloseEvent;\n        // throw non-retryable connection problems\n        if (!shouldRetry(errOrCloseEvent))\n            throw errOrCloseEvent;\n        // @deprecated throw fatal connection problems immediately\n        if (isFatalConnectionProblem === null || isFatalConnectionProblem === void 0 ? void 0 : isFatalConnectionProblem(errOrCloseEvent))\n            throw errOrCloseEvent;\n        // looks good, start retrying\n        return (retrying = true);\n    }\n    // in non-lazy (hot?) mode always hold one connection lock to persist the socket\n    if (!lazy) {\n        (async () => {\n            locks++;\n            for (;;) {\n                try {\n                    const [, , throwOnClose] = await connect();\n                    await throwOnClose; // will always throw because releaser is not used\n                }\n                catch (errOrCloseEvent) {\n                    try {\n                        if (!shouldRetryConnectOrThrow(errOrCloseEvent))\n                            return;\n                    }\n                    catch (errOrCloseEvent) {\n                        // report thrown error, no further retries\n                        return onNonLazyError === null || onNonLazyError === void 0 ? void 0 : onNonLazyError(errOrCloseEvent);\n                    }\n                }\n            }\n        })();\n    }\n    function subscribe(payload, sink) {\n        const id = generateID(payload);\n        let done = false, errored = false, releaser = () => {\n            // for handling completions before connect\n            locks--;\n            done = true;\n        };\n        (async () => {\n            locks++;\n            for (;;) {\n                try {\n                    const [socket, release, waitForReleaseOrThrowOnClose] = await connect();\n                    // if done while waiting for connect, release the connection lock right away\n                    if (done)\n                        return release();\n                    const unlisten = emitter.onMessage(id, (message) => {\n                        switch (message.type) {\n                            case MessageType.Next: {\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any -- payload will fit type\n                                sink.next(message.payload);\n                                return;\n                            }\n                            case MessageType.Error: {\n                                (errored = true), (done = true);\n                                sink.error(message.payload);\n                                releaser();\n                                return;\n                            }\n                            case MessageType.Complete: {\n                                done = true;\n                                releaser(); // release completes the sink\n                                return;\n                            }\n                        }\n                    });\n                    socket.send(stringifyMessage({\n                        id,\n                        type: MessageType.Subscribe,\n                        payload,\n                    }, replacer));\n                    releaser = () => {\n                        if (!done && socket.readyState === WebSocketImpl.OPEN)\n                            // if not completed already and socket is open, send complete message to server on release\n                            socket.send(stringifyMessage({\n                                id,\n                                type: MessageType.Complete,\n                            }, replacer));\n                        locks--;\n                        done = true;\n                        release();\n                    };\n                    // either the releaser will be called, connection completed and\n                    // the promise resolved or the socket closed and the promise rejected.\n                    // whatever happens though, we want to stop listening for messages\n                    await waitForReleaseOrThrowOnClose.finally(unlisten);\n                    return; // completed, shouldnt try again\n                }\n                catch (errOrCloseEvent) {\n                    if (!shouldRetryConnectOrThrow(errOrCloseEvent))\n                        return;\n                }\n            }\n        })()\n            .then(() => {\n            // delivering either an error or a complete terminates the sequence\n            if (!errored)\n                sink.complete();\n        }) // resolves on release or normal closure\n            .catch((err) => {\n            sink.error(err);\n        }); // rejects on close events and errors\n        return () => {\n            // dispose only of active subscriptions\n            if (!done)\n                releaser();\n        };\n    }\n    return {\n        on: emitter.on,\n        subscribe,\n        iterate(request) {\n            const pending = [];\n            const deferred = {\n                done: false,\n                error: null,\n                resolve: () => {\n                    // noop\n                },\n            };\n            const dispose = subscribe(request, {\n                next(val) {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    pending.push(val);\n                    deferred.resolve();\n                },\n                error(err) {\n                    deferred.done = true;\n                    deferred.error = err;\n                    deferred.resolve();\n                },\n                complete() {\n                    deferred.done = true;\n                    deferred.resolve();\n                },\n            });\n            const iterator = (function iterator() {\n                return __asyncGenerator(this, arguments, function* iterator_1() {\n                    for (;;) {\n                        if (!pending.length) {\n                            // only wait if there are no pending messages available\n                            yield __await(new Promise((resolve) => (deferred.resolve = resolve)));\n                        }\n                        // first flush\n                        while (pending.length) {\n                            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                            yield yield __await(pending.shift());\n                        }\n                        // then error\n                        if (deferred.error) {\n                            throw deferred.error;\n                        }\n                        // or complete\n                        if (deferred.done) {\n                            return yield __await(void 0);\n                        }\n                    }\n                });\n            })();\n            iterator.throw = async (err) => {\n                if (!deferred.done) {\n                    deferred.done = true;\n                    deferred.error = err;\n                    deferred.resolve();\n                }\n                return { done: true, value: undefined };\n            };\n            iterator.return = async () => {\n                dispose();\n                return { done: true, value: undefined };\n            };\n            return iterator;\n        },\n        async dispose() {\n            disposed = true;\n            if (connecting) {\n                // if there is a connection, close it\n                const [socket] = await connecting;\n                socket.close(1000, 'Normal Closure');\n            }\n        },\n        terminate() {\n            if (connecting) {\n                // only if there is a connection\n                emitter.emit('closed', new TerminatedCloseEvent());\n            }\n        },\n    };\n}\n/**\n * A syntetic close event `4499: Terminated` is issued to the current to immediately\n * close the connection without waiting for the one coming from `WebSocket.onclose`.\n *\n * Terminating is not considered fatal and a connection retry will occur as expected.\n *\n * Useful in cases where the WebSocket is stuck and not emitting any events;\n * can happen on iOS Safari, see: https://github.com/enisdenjo/graphql-ws/discussions/290.\n */\nexport class TerminatedCloseEvent extends Error {\n    constructor() {\n        super(...arguments);\n        this.name = 'TerminatedCloseEvent';\n        this.message = '4499: Terminated';\n        this.code = 4499;\n        this.reason = 'Terminated';\n        this.wasClean = false;\n    }\n}\nfunction isLikeCloseEvent(val) {\n    return isObject(val) && 'code' in val && 'reason' in val;\n}\nfunction isFatalInternalCloseCode(code) {\n    if ([\n        1000,\n        1001,\n        1006,\n        1005,\n        1012,\n        1013,\n        1014, // Bad Gateway\n    ].includes(code))\n        return false;\n    // all other internal errors are fatal\n    return code >= 1000 && code <= 1999;\n}\nfunction isWebSocket(val) {\n    return (typeof val === 'function' &&\n        'constructor' in val &&\n        'CLOSED' in val &&\n        'CLOSING' in val &&\n        'CONNECTING' in val &&\n        'OPEN' in val);\n}\n","// * See https://github.com/enisdenjo/graphql-ws#graceful-restart\nimport { Client, ClientOptions, createClient } from 'graphql-ws'\n\nexport interface RestartableClient extends Client {\n  restart(): void\n  isOpen(): boolean\n}\n\nexport function createRestartableClient(options: ClientOptions): RestartableClient {\n  let restartRequested = false\n  let restart = () => {\n    restartRequested = true\n  }\n\n  let connectionOpen = false\n  let socket: WebSocket\n  let timedOut: NodeJS.Timeout\n\n  const client = createClient({\n    ...options,\n    on: {\n      ...options.on,\n      error: (error) => {\n        console.error(error)\n        options.on?.error?.(error)\n\n        restart()\n      },\n      ping: (received) => {\n        if (!received /* sent */) {\n          timedOut = setTimeout(() => {\n            // a close event `4499: Terminated` is issued to the current WebSocket and an\n            // artificial `{ code: 4499, reason: 'Terminated', wasClean: false }` close-event-like\n            // object is immediately emitted without waiting for the one coming from `WebSocket.onclose`\n            //\n            // calling terminate is not considered fatal and a connection retry will occur as expected\n            //\n            // see: https://github.com/enisdenjo/graphql-ws/discussions/290\n            client.terminate()\n            restart()\n          }, 5_000)\n        }\n      },\n      pong: (received) => {\n        if (received) {\n          clearTimeout(timedOut)\n        }\n      },\n      opened: (originalSocket) => {\n        socket = originalSocket as WebSocket\n        options.on?.opened?.(socket)\n        connectionOpen = true\n\n        restart = () => {\n          if (socket.readyState === WebSocket.OPEN) {\n            // if the socket is still open for the restart, do the restart\n            socket.close(4205, 'Client Restart')\n          } else {\n            // otherwise the socket might've closed, indicate that you want\n            // a restart on the next opened event\n            restartRequested = true\n          }\n        }\n\n        // just in case you were eager to restart\n        if (restartRequested) {\n          restartRequested = false\n          restart()\n        }\n      },\n      closed: (event) => {\n        options?.on?.closed?.(event)\n        connectionOpen = false\n      }\n    }\n  })\n\n  return {\n    ...client,\n    restart: () => restart(),\n    isOpen: () => connectionOpen\n  }\n}\n","import {\n  ApolloClient,\n  ApolloLink,\n  createHttpLink,\n  from,\n  InMemoryCache,\n  RequestHandler,\n  split,\n  WatchQueryFetchPolicy\n} from '@apollo/client/core'\nimport { setContext } from '@apollo/client/link/context'\nimport { GraphQLWsLink } from '@apollo/client/link/subscriptions'\nimport { getMainDefinition } from '@apollo/client/utilities'\nimport { AuthContext, NhostClient } from '@nhost/nhost-js'\nimport { jwtDecode, JwtPayload } from 'jwt-decode'\n\nimport { createRestartableClient } from './ws'\nconst isBrowser = typeof window !== 'undefined'\n\nexport type NhostApolloClientOptions = {\n  nhost?: NhostClient\n  graphqlUrl?: string\n  headers?: any\n  publicRole?: string\n  fetchPolicy?: WatchQueryFetchPolicy\n  connectToDevTools?: boolean\n  cache?: InMemoryCache\n  /**\n   * @deprecated Please use `generateLinks` instead.\n   */\n  onError?: RequestHandler\n  /**\n   * @deprecated Please use `generateLinks` instead.\n   */\n  link?: ApolloLink\n  generateLinks?: (links: (ApolloLink | RequestHandler)[]) => (ApolloLink | RequestHandler)[]\n}\n\nexport const createApolloClient = ({\n  nhost,\n  graphqlUrl,\n  headers = {},\n  publicRole = 'public',\n  fetchPolicy,\n  cache = new InMemoryCache(),\n  connectToDevTools = isBrowser && process.env.NODE_ENV === 'development',\n  onError,\n  link: customLink,\n  generateLinks\n}: NhostApolloClientOptions) => {\n  const backendUrl = graphqlUrl || nhost?.graphql.httpUrl\n\n  if (!backendUrl) {\n    throw Error(\"Can't initialize the Apollo Client: no backend Url has been provided\")\n  }\n\n  const uri = backendUrl\n  const interpreter = nhost?.auth.client.interpreter\n\n  let accessToken: AuthContext['accessToken'] | null = null\n\n  const isJwtValid = () => {\n    if (!accessToken?.value) {\n      return false\n    }\n\n    const marginInSeconds = 3\n    const marginInMilliseconds = marginInSeconds * 1000\n\n    let decodedToken = jwtDecode(accessToken.value) as JwtPayload\n    return decodedToken.exp! * 1000 > Date.now() - marginInMilliseconds\n  }\n\n  const isTokenValid = () =>\n    !!accessToken?.value &&\n    !!accessToken?.expiresAt &&\n    accessToken?.expiresAt > new Date() &&\n    isJwtValid()\n\n  const isTokenValidOrNull = () => !accessToken || isTokenValid()\n\n  const awaitValidTokenOrNull = () => {\n    if (isTokenValidOrNull()) {\n      return Promise.resolve()\n    }\n\n    const waitForValidToken = () => {\n      if (isTokenValidOrNull()) {\n        return Promise.resolve(true)\n      }\n      return new Promise((resolve) => {\n        setTimeout(() => waitForValidToken().then(resolve), 100)\n      })\n    }\n\n    return waitForValidToken()\n  }\n\n  const getAuthHeaders = async () => {\n    // wait for valid access token\n    await awaitValidTokenOrNull()\n\n    // add headers\n    const resHeaders = {\n      ...headers,\n      'Sec-WebSocket-Protocol': 'graphql-ws'\n    }\n\n    // add auth headers if signed in\n    // or add 'public' role if not signed in\n    if (accessToken) {\n      resHeaders.authorization = `Bearer ${accessToken.value}`\n    } else {\n      // ? Not sure it changes anything for Hasura\n      resHeaders.role = publicRole\n    }\n\n    return resHeaders\n  }\n\n  const wsClient = isBrowser\n    ? createRestartableClient({\n        url: uri.startsWith('https') ? uri.replace(/^https/, 'wss') : uri.replace(/^http/, 'ws'),\n        shouldRetry: () => true,\n        retryAttempts: 100,\n        retryWait: async (retries) => {\n          // start with 1 second delay\n          const baseDelay = 1000\n\n          // max 3 seconds of jitter\n          const maxJitter = 3000\n\n          // exponential backoff with jitter\n          return new Promise((resolve) =>\n            setTimeout(\n              resolve,\n              baseDelay * Math.pow(2, retries) + Math.floor(Math.random() * maxJitter)\n            )\n          )\n        },\n        connectionParams: async () => ({\n          headers: {\n            ...headers,\n            ...(await getAuthHeaders())\n          }\n        })\n      })\n    : null\n\n  const wsLink = wsClient ? new GraphQLWsLink(wsClient) : null\n\n  const httpLink = setContext(async (_, { headers }) => {\n    return {\n      headers: {\n        ...headers,\n        ...(await getAuthHeaders())\n      }\n    }\n  }).concat(createHttpLink({ uri }))\n\n  const splitLink = wsLink\n    ? split(\n        ({ query }) => {\n          const mainDefinition = getMainDefinition(query)\n\n          const { kind } = mainDefinition\n          let operation\n          if ('operation' in mainDefinition) {\n            operation = mainDefinition.operation\n          }\n\n          return kind === 'OperationDefinition' && operation === 'subscription'\n        },\n        wsLink,\n        httpLink\n      )\n    : httpLink\n\n  const links = []\n\n  if (onError) {\n    links.push(onError)\n  }\n\n  if (customLink) {\n    links.push(customLink)\n  }\n\n  links.push(splitLink)\n\n  const link = from(generateLinks ? generateLinks(links) : links)\n\n  const client = new ApolloClient({\n    cache: cache || new InMemoryCache(),\n    ssrMode: !isBrowser,\n    defaultOptions: {\n      watchQuery: {\n        fetchPolicy\n      }\n    },\n    connectToDevTools,\n    link\n  })\n\n  interpreter?.onTransition(async (state, event) => {\n    if (['SIGNOUT', 'SIGNED_IN', 'TOKEN_CHANGED'].includes(event.type)) {\n      if (\n        event.type === 'SIGNOUT' ||\n        (event.type === 'TOKEN_CHANGED' && state.context.accessToken.value === null)\n      ) {\n        accessToken = null\n\n        try {\n          await client.resetStore()\n        } catch (error) {\n          console.error('Error resetting Apollo client cache')\n          console.error(error)\n        }\n\n        return\n      }\n\n      // update token\n      accessToken = state.context.accessToken\n\n      if (!isBrowser || !wsClient?.isOpen()) {\n        return\n      }\n\n      wsClient?.restart()\n    }\n  })\n\n  return client\n}\n"],"names":["InvalidTokenError","b64DecodeUnicode","str","m","code","base64UrlDecode","output","jwtDecode","token","options","pos","part","decoded","e","extendedTypeof","val","isObject","areGraphQLErrors","obj","ob","limitCloseReason","reason","whenTooLong","GRAPHQL_TRANSPORT_WS_PROTOCOL","CloseCode","MessageType","validateMessage","parseMessage","data","reviver","stringifyMessage","msg","replacer","__await","v","__asyncGenerator","thisArg","_arguments","generator","g","i","q","verb","n","a","b","resume","step","settle","r","fulfill","reject","value","f","createClient","url","connectionParams","lazy","onNonLazyError","lazyCloseTimeoutMs","keepAlive","disablePong","connectionAckWaitTimeout","retryAttempts","retryWait","retries","retryDelay","resolve","shouldRetry","isLikeCloseEvent","isFatalConnectionProblem","on","webSocketImpl","generateID","c","ws","isWebSocket","WebSocketImpl","emitter","message","listeners","id","listener","_a","event","l","args","errorOrClosed","cb","listening","err","unlisten","connecting","locks","lazyCloseTimeout","retrying","disposed","connect","socket","throwOnClose","connected","denied","connectionAckTimeout","queuedPing","enqueuePing","errOrEvent","TerminatedCloseEvent","payload","acknowledged","_","release","released","complete","shouldRetryConnectOrThrow","errOrCloseEvent","isFatalInternalCloseCode","subscribe","sink","done","errored","releaser","waitForReleaseOrThrowOnClose","request","pending","deferred","dispose","iterator","createRestartableClient","restartRequested","restart","connectionOpen","timedOut","client","error","_b","received","originalSocket","isBrowser","createApolloClient","nhost","graphqlUrl","headers","publicRole","fetchPolicy","cache","InMemoryCache","connectToDevTools","onError","customLink","generateLinks","backendUrl","uri","interpreter","accessToken","isJwtValid","marginInMilliseconds","isTokenValid","isTokenValidOrNull","awaitValidTokenOrNull","waitForValidToken","getAuthHeaders","resHeaders","wsClient","wsLink","GraphQLWsLink","httpLink","setContext","createHttpLink","splitLink","split","query","mainDefinition","getMainDefinition","kind","operation","links","link","from","ApolloClient","state"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}